

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 19 21:09:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47  0000                     
    48                           ; Version 1.45
    49                           ; Generated 16/11/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4550 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	smallconst
    84  000800                     __psmallconst:
    85                           	opt stack 0
    86  000800  00                 	db	0
    87  000801                     _dpowers:
    88                           	opt stack 0
    89  000801  0001               	dw	1
    90  000803  0000               	dw	0
    91  000805  000A               	dw	10
    92  000807  0000               	dw	0
    93  000809  0064               	dw	100
    94  00080B  0000               	dw	0
    95  00080D  03E8               	dw	1000
    96  00080F  0000               	dw	0
    97  000811  2710               	dw	10000
    98  000813  0000               	dw	0
    99  000815  86A0               	dw	34464
   100  000817  0001               	dw	1
   101  000819  4240               	dw	16960
   102  00081B  000F               	dw	15
   103  00081D  9680               	dw	38528
   104  00081F  0098               	dw	152
   105  000821  E100               	dw	57600
   106  000823  05F5               	dw	1525
   107  000825  CA00               	dw	51712
   108  000827  3B9A               	dw	15258
   109  000829                     __end_of_dpowers:
   110                           	opt stack 0
   111  000829                     __powers_:
   112                           	opt stack 0
   113  000829  00                 	db	0
   114  00082A  80                 	db	128
   115  00082B  3F                 	db	63
   116  00082C  00                 	db	0
   117  00082D  20                 	db	32
   118  00082E  41                 	db	65
   119  00082F  00                 	db	0
   120  000830  C8                 	db	200
   121  000831  42                 	db	66
   122  000832  00                 	db	0
   123  000833  7A                 	db	122
   124  000834  44                 	db	68
   125  000835  40                 	db	64
   126  000836  1C                 	db	28
   127  000837  46                 	db	70
   128  000838  50                 	db	80
   129  000839  C3                 	db	195
   130  00083A  47                 	db	71
   131  00083B  24                 	db	36
   132  00083C  74                 	db	116
   133  00083D  49                 	db	73
   134  00083E  97                 	db	151
   135  00083F  18                 	db	24
   136  000840  4B                 	db	75
   137  000841  BC                 	db	188
   138  000842  BE                 	db	190
   139  000843  4C                 	db	76
   140  000844  6B                 	db	107
   141  000845  6E                 	db	110
   142  000846  4E                 	db	78
   143  000847  03                 	db	3
   144  000848  15                 	db	21
   145  000849  50                 	db	80
   146  00084A  79                 	db	121
   147  00084B  AD                 	db	173
   148  00084C  60                 	db	96
   149  00084D  F3                 	db	243
   150  00084E  49                 	db	73
   151  00084F  71                 	db	113
   152  000850                     __end_of__powers_:
   153                           	opt stack 0
   154  000850                     __npowers_:
   155                           	opt stack 0
   156  000850  00                 	db	0
   157  000851  80                 	db	128
   158  000852  3F                 	db	63
   159  000853  CD                 	db	205
   160  000854  CC                 	db	204
   161  000855  3D                 	db	61
   162  000856  D7                 	db	215
   163  000857  23                 	db	35
   164  000858  3C                 	db	60
   165  000859  12                 	db	18
   166  00085A  83                 	db	131
   167  00085B  3A                 	db	58
   168  00085C  B7                 	db	183
   169  00085D  D1                 	db	209
   170  00085E  38                 	db	56
   171  00085F  C6                 	db	198
   172  000860  27                 	db	39
   173  000861  37                 	db	55
   174  000862  38                 	db	56
   175  000863  86                 	db	134
   176  000864  35                 	db	53
   177  000865  C0                 	db	192
   178  000866  D6                 	db	214
   179  000867  33                 	db	51
   180  000868  CC                 	db	204
   181  000869  2B                 	db	43
   182  00086A  32                 	db	50
   183  00086B  70                 	db	112
   184  00086C  89                 	db	137
   185  00086D  30                 	db	48
   186  00086E  E7                 	db	231
   187  00086F  DB                 	db	219
   188  000870  2E                 	db	46
   189  000871  E5                 	db	229
   190  000872  3C                 	db	60
   191  000873  1E                 	db	30
   192  000874  42                 	db	66
   193  000875  A2                 	db	162
   194  000876  0D                 	db	13
   195  000877                     __end_of__npowers_:
   196                           	opt stack 0
   197  0000                     _ADRES	set	4035
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON2bits	set	4032
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON1bits	set	4033
   202  0000                     _LATDbits	set	3980
   203  0000                     _TRISDbits	set	3989
   204  0000                     _TRISD	set	3989
   205  0000                     _PORTD	set	3971
   206  0000                     _TRISA	set	3986
   207  000877                     STR_1:
   208  000877  2A                 	db	42
   209  000878  2A                 	db	42
   210  000879  2A                 	db	42
   211  00087A  2A                 	db	42
   212  00087B  2A                 	db	42
   213  00087C  2A                 	db	42
   214  00087D  41                 	db	65	;'A'
   215  00087E  44                 	db	68	;'D'
   216  00087F  43                 	db	67	;'C'
   217  000880  2A                 	db	42
   218  000881  2A                 	db	42
   219  000882  2A                 	db	42
   220  000883  2A                 	db	42
   221  000884  2A                 	db	42
   222  000885  2A                 	db	42
   223  000886  2A                 	db	42
   224  000887  00                 	db	0
   225  000888                     STR_2:
   226  000888  20                 	db	32
   227  000889  20                 	db	32
   228  00088A  20                 	db	32
   229  00088B  20                 	db	32
   230  00088C  42                 	db	66	;'B'
   231  00088D  79                 	db	121	;'y'
   232  00088E  20                 	db	32
   233  00088F  57                 	db	87	;'W'
   234  000890  45                 	db	69	;'E'
   235  000891  4C                 	db	76	;'L'
   236  000892  53                 	db	83	;'S'
   237  000893  20                 	db	32
   238  000894  20                 	db	32
   239  000895  20                 	db	32
   240  000896  20                 	db	32
   241  000897  00                 	db	0
   242  000898                     STR_3:
   243  000898  56                 	db	86	;'V'
   244  000899  4F                 	db	79	;'O'
   245  00089A  4C                 	db	76	;'L'
   246  00089B  54                 	db	84	;'T'
   247  00089C  41                 	db	65	;'A'
   248  00089D  4A                 	db	74	;'J'
   249  00089E  45                 	db	69	;'E'
   250  00089F  20                 	db	32
   251  0008A0  45                 	db	69	;'E'
   252  0008A1  53                 	db	83	;'S'
   253  0008A2  3A                 	db	58	;':'
   254  0008A3  00                 	db	0
   255  0008A4                     STR_4:
   256  0008A4  25                 	db	37
   257  0008A5  2E                 	db	46
   258  0008A6  32                 	db	50	;'2'
   259  0008A7  66                 	db	102	;'f'
   260  0008A8  00                 	db	0
   261                           
   262                           ; #config settings
   263  0008A9  00                 	db	0	; dummy byte at the end
   264  0000                     
   265                           	psect	cinit
   266  0024FC                     __pcinit:
   267                           	opt stack 0
   268  0024FC                     start_initialization:
   269                           	opt stack 0
   270  0024FC                     __initialization:
   271                           	opt stack 0
   272                           
   273                           ; Clear objects allocated to BANK0 (20 bytes)
   274  0024FC  EE00  F077         	lfsr	0,__pbssBANK0
   275  002500  0E14               	movlw	20
   276  002502                     clear_0:
   277  002502  6AEE               	clrf	postinc0,c
   278  002504  06E8               	decf	wreg,f,c
   279  002506  E1FD               	bnz	clear_0
   280                           
   281                           ; Clear objects allocated to COMRAM (5 bytes)
   282  002508  6A53               	clrf	(__pbssCOMRAM+4)& (0+255),c
   283  00250A  6A52               	clrf	(__pbssCOMRAM+3)& (0+255),c
   284  00250C  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   285  00250E  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   286  002510  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   287  002512                     end_of_initialization:
   288                           	opt stack 0
   289  002512                     __end_of__initialization:
   290                           	opt stack 0
   291  002512  0E00               	movlw	low (__Lmediumconst shr (0+16))
   292  002514  6EF8               	movwf	tblptru,c
   293  002516  0100               	movlb	0
   294  002518  EFDC  F00B         	goto	_main	;jump to C main() function
   295                           tblptru	equ	0xFF8
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	bssCOMRAM
   300  00004F                     __pbssCOMRAM:
   301                           	opt stack 0
   302  00004F                     _voltaje:
   303                           	opt stack 0
   304  00004F                     	ds	3
   305  000052                     _valor:
   306                           	opt stack 0
   307  000052                     	ds	2
   308                           tblptru	equ	0xFF8
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           	psect	bssBANK0
   313  000077                     __pbssBANK0:
   314                           	opt stack 0
   315  000077                     _datos:
   316                           	opt stack 0
   317  000077                     	ds	20
   318                           tblptru	equ	0xFF8
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           	psect	cstackBANK0
   323  000060                     __pcstackBANK0:
   324                           	opt stack 0
   325  000060                     _sprintf$1016:
   326                           	opt stack 0
   327                           
   328                           ; 3 bytes @ 0x0
   329  000060                     	ds	3
   330  000063                     sprintf@ap:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x3
   334  000063                     	ds	2
   335  000065                     sprintf@flag:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x5
   339  000065                     	ds	2
   340  000067                     sprintf@val:
   341                           	opt stack 0
   342                           
   343                           ; 4 bytes @ 0x7
   344  000067                     	ds	4
   345  00006B                     sprintf@exp:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0xB
   349  00006B                     	ds	2
   350  00006D                     sprintf@tmpval:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0xD
   354  00006D                     	ds	4
   355  000071                     sprintf@prec:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x11
   359  000071                     	ds	2
   360  000073                     sprintf@fval:
   361                           	opt stack 0
   362                           
   363                           ; 3 bytes @ 0x13
   364  000073                     	ds	3
   365  000076                     sprintf@c:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x16
   369  000076                     	ds	1
   370                           tblptru	equ	0xFF8
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           
   374                           	psect	cstackCOMRAM
   375  000001                     __pcstackCOMRAM:
   376                           	opt stack 0
   377  000001                     ??_SetDDRamAddr:
   378  000001                     ??_isdigit:
   379  000001                     ??_DelayPORXLCD:
   380  000001                     ?_ADC_read:
   381                           	opt stack 0
   382  000001                     ?___awmod:
   383                           	opt stack 0
   384  000001                     ?___ftpack:
   385                           	opt stack 0
   386  000001                     ?___ftneg:
   387                           	opt stack 0
   388  000001                     ?__tdiv_to_l_:
   389                           	opt stack 0
   390  000001                     ?__div_to_l_:
   391                           	opt stack 0
   392  000001                     ?___lldiv:
   393                           	opt stack 0
   394  000001                     ?___llmod:
   395                           	opt stack 0
   396  000001                     WriteCmdXLCD@cmd:
   397                           	opt stack 0
   398  000001                     WriteDataXLCD@data:
   399                           	opt stack 0
   400  000001                     ___awmod@dividend:
   401                           	opt stack 0
   402  000001                     __div_to_l_@f1:
   403                           	opt stack 0
   404  000001                     ___ftpack@arg:
   405                           	opt stack 0
   406  000001                     __tdiv_to_l_@f1:
   407                           	opt stack 0
   408  000001                     ___ftge@ff1:
   409                           	opt stack 0
   410  000001                     ___ftneg@f1:
   411                           	opt stack 0
   412  000001                     ___lldiv@dividend:
   413                           	opt stack 0
   414  000001                     ___llmod@dividend:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0x0
   418  000001                     	ds	1
   419  000002                     _isdigit$665:
   420                           	opt stack 0
   421  000002                     LCD_gotoXY@x:
   422                           	opt stack 0
   423  000002                     putrsXLCD@buffer:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x1
   427  000002                     	ds	1
   428  000003                     ADC_read@ch:
   429                           	opt stack 0
   430  000003                     isdigit@c:
   431                           	opt stack 0
   432  000003                     ___awmod@divisor:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x2
   436  000003                     	ds	1
   437  000004                     SetDDRamAddr@DDaddr:
   438                           	opt stack 0
   439  000004                     ___ftpack@exp:
   440                           	opt stack 0
   441  000004                     LCD_gotoXY@y:
   442                           	opt stack 0
   443  000004                     __div_to_l_@f2:
   444                           	opt stack 0
   445  000004                     __tdiv_to_l_@f2:
   446                           	opt stack 0
   447  000004                     ___ftge@ff2:
   448                           	opt stack 0
   449                           
   450                           ; 3 bytes @ 0x3
   451  000004                     	ds	1
   452  000005                     OpenXLCD@lcdtype:
   453                           	opt stack 0
   454  000005                     ___awmod@counter:
   455                           	opt stack 0
   456  000005                     ___ftpack@sign:
   457                           	opt stack 0
   458  000005                     ___lldiv@divisor:
   459                           	opt stack 0
   460  000005                     ___llmod@divisor:
   461                           	opt stack 0
   462                           
   463                           ; 4 bytes @ 0x4
   464  000005                     	ds	1
   465  000006                     ??___ftpack:
   466  000006                     ___awmod@sign:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x5
   470  000006                     	ds	1
   471  000007                     ??__tdiv_to_l_:
   472  000007                     ??___ftge:
   473  000007                     ?___awdiv:
   474                           	opt stack 0
   475  000007                     ___awdiv@dividend:
   476                           	opt stack 0
   477  000007                     __div_to_l_@quot:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x6
   481  000007                     	ds	2
   482  000009                     ?___lltoft:
   483                           	opt stack 0
   484  000009                     ?___lwtoft:
   485                           	opt stack 0
   486  000009                     ___llmod@counter:
   487                           	opt stack 0
   488  000009                     ___awdiv@divisor:
   489                           	opt stack 0
   490  000009                     ___lwtoft@c:
   491                           	opt stack 0
   492  000009                     ___lldiv@quotient:
   493                           	opt stack 0
   494  000009                     ___lltoft@c:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x8
   498  000009                     	ds	1
   499  00000A                     __tdiv_to_l_@quot:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x9
   503  00000A                     	ds	1
   504  00000B                     ___awdiv@counter:
   505                           	opt stack 0
   506  00000B                     __div_to_l_@cntr:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0xA
   510  00000B                     	ds	1
   511  00000C                     ___awdiv@sign:
   512                           	opt stack 0
   513  00000C                     __div_to_l_@exp1:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0xB
   517  00000C                     	ds	1
   518  00000D                     ??___lltoft:
   519  00000D                     ___lldiv@counter:
   520                           	opt stack 0
   521  00000D                     ___awdiv@quotient:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0xC
   525  00000D                     	ds	1
   526  00000E                     __tdiv_to_l_@cntr:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0xD
   530  00000E                     	ds	1
   531  00000F                     ?___wmul:
   532                           	opt stack 0
   533  00000F                     __tdiv_to_l_@exp1:
   534                           	opt stack 0
   535  00000F                     ___wmul@multiplier:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0xE
   539  00000F                     	ds	2
   540  000011                     ___lltoft@exp:
   541                           	opt stack 0
   542  000011                     ___wmul@multiplicand:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x10
   546  000011                     	ds	2
   547  000013                     ___wmul@product:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x12
   551  000013                     	ds	2
   552  000015                     ?___ftmul:
   553                           	opt stack 0
   554  000015                     ___ftmul@f1:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x14
   558  000015                     	ds	3
   559  000018                     ___ftmul@f2:
   560                           	opt stack 0
   561                           
   562                           ; 3 bytes @ 0x17
   563  000018                     	ds	3
   564  00001B                     ??___ftmul:
   565                           
   566                           ; 1 bytes @ 0x1A
   567  00001B                     	ds	3
   568  00001E                     ___ftmul@exp:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x1D
   572  00001E                     	ds	1
   573  00001F                     ___ftmul@f3_as_product:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x1E
   577  00001F                     	ds	3
   578  000022                     ___ftmul@cntr:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x21
   582  000022                     	ds	1
   583  000023                     ___ftmul@sign:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x22
   587  000023                     	ds	1
   588  000024                     ?___ftdiv:
   589                           	opt stack 0
   590  000024                     ?_fround:
   591                           	opt stack 0
   592  000024                     ?_scale:
   593                           	opt stack 0
   594  000024                     ___ftdiv@f1:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x23
   598  000024                     	ds	3
   599  000027                     ___ftdiv@f2:
   600                           	opt stack 0
   601  000027                     _fround$1014:
   602                           	opt stack 0
   603  000027                     _scale$1015:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x26
   607  000027                     	ds	3
   608  00002A                     ??___ftdiv:
   609  00002A                     scale@scl:
   610                           	opt stack 0
   611  00002A                     _fround$1013:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x29
   615  00002A                     	ds	1
   616  00002B                     ?___fttol:
   617                           	opt stack 0
   618  00002B                     ___fttol@f1:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x2A
   622  00002B                     	ds	2
   623  00002D                     fround@prec:
   624                           	opt stack 0
   625  00002D                     ___ftdiv@cntr:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x2C
   629  00002D                     	ds	1
   630  00002E                     ?___ftadd:
   631                           	opt stack 0
   632  00002E                     ___ftadd@f1:
   633                           	opt stack 0
   634  00002E                     ___ftdiv@f3:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x2D
   638  00002E                     	ds	1
   639  00002F                     ??___fttol:
   640                           
   641                           ; 1 bytes @ 0x2E
   642  00002F                     	ds	2
   643  000031                     ___ftdiv@exp:
   644                           	opt stack 0
   645  000031                     ___ftadd@f2:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x30
   649  000031                     	ds	1
   650  000032                     ___ftdiv@sign:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x31
   654  000032                     	ds	2
   655  000034                     ??___ftadd:
   656  000034                     ___fttol@sign1:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x33
   660  000034                     	ds	1
   661  000035                     ___fttol@lval:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x34
   665  000035                     	ds	2
   666  000037                     ___ftadd@sign:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x36
   670  000037                     	ds	1
   671  000038                     ___ftadd@exp2:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x37
   675  000038                     	ds	1
   676  000039                     ___ftadd@exp1:
   677                           	opt stack 0
   678  000039                     ___fttol@exp1:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x38
   682  000039                     	ds	1
   683  00003A                     ?___ftsub:
   684                           	opt stack 0
   685  00003A                     ___ftsub@f1:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x39
   689  00003A                     	ds	3
   690  00003D                     ___ftsub@f2:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x3C
   694  00003D                     	ds	3
   695  000040                     ?_sprintf:
   696                           	opt stack 0
   697  000040                     sprintf@sp:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x3F
   701  000040                     	ds	2
   702  000042                     sprintf@f:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x41
   706  000042                     	ds	5
   707  000047                     ??_sprintf:
   708                           
   709                           ; 1 bytes @ 0x46
   710  000047                     	ds	6
   711  00004D                     ??_main:
   712                           
   713                           ; 1 bytes @ 0x4C
   714  00004D                     	ds	2
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719 ;;
   720 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   721 ;;
   722 ;; *************** function _main *****************
   723 ;; Defined at:
   724 ;;		line 52 in file "Programa_principal.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   738 ;;      Params:         0       0       0       0       0       0       0       0       0
   739 ;;      Locals:         0       0       0       0       0       0       0       0       0
   740 ;;      Temps:          2       0       0       0       0       0       0       0       0
   741 ;;      Totals:         2       0       0       0       0       0       0       0       0
   742 ;;Total ram usage:        2 bytes
   743 ;; Hardware stack levels required when called:    4
   744 ;; This function calls:
   745 ;;		_ADC_init
   746 ;;		_ADC_read
   747 ;;		_LCD_Init
   748 ;;		_LCD_gotoXY
   749 ;;		_WriteCmdXLCD
   750 ;;		___ftdiv
   751 ;;		___ftmul
   752 ;;		___lwtoft
   753 ;;		_putrsXLCD
   754 ;;		_sprintf
   755 ;; This function is called by:
   756 ;;		Startup code after reset
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text0
   761  0017B8                     __ptext0:
   762                           	opt stack 0
   763  0017B8                     _main:
   764                           	opt stack 27
   765                           
   766                           ;Programa_principal.c: 53: LCD_Init();
   767                           
   768                           ;incstack = 0
   769  0017B8  EC9D  F012         	call	_LCD_Init	;wreg free
   770                           
   771                           ;Programa_principal.c: 54: ADC_init();
   772  0017BC  EC5B  F012         	call	_ADC_init	;wreg free
   773                           
   774                           ;Programa_principal.c: 55: TRISA = 1;
   775  0017C0  0E01               	movlw	1
   776  0017C2  6E92               	movwf	3986,c	;volatile
   777                           
   778                           ;Programa_principal.c: 56: LCD_gotoXY(0,0);
   779  0017C4  0E00               	movlw	0
   780  0017C6  6E03               	movwf	LCD_gotoXY@x+1,c
   781  0017C8  0E00               	movlw	0
   782  0017CA  6E02               	movwf	LCD_gotoXY@x,c
   783  0017CC  0E00               	movlw	0
   784  0017CE  6E05               	movwf	LCD_gotoXY@y+1,c
   785  0017D0  0E00               	movlw	0
   786  0017D2  6E04               	movwf	LCD_gotoXY@y,c
   787  0017D4  EC6D  F012         	call	_LCD_gotoXY	;wreg free
   788                           
   789                           ;Programa_principal.c: 57: putrsXLCD("******ADC*******");
   790  0017D8  0E77               	movlw	low STR_1
   791  0017DA  6E02               	movwf	putrsXLCD@buffer,c
   792  0017DC  0E08               	movlw	high STR_1
   793  0017DE  6E03               	movwf	putrsXLCD@buffer+1,c
   794  0017E0  EC34  F011         	call	_putrsXLCD	;wreg free
   795                           
   796                           ;Programa_principal.c: 58: _delay((unsigned long)((100)*(20000000L/4000.0)));
   797  0017E4  0E03               	movlw	3
   798  0017E6  6E4E               	movwf	(??_main+1)& (0+255),c
   799  0017E8  0E8A               	movlw	138
   800  0017EA  6E4D               	movwf	??_main& (0+255),c
   801  0017EC  0E56               	movlw	86
   802  0017EE                     u3097:
   803  0017EE  2EE8               	decfsz	wreg,f,c
   804  0017F0  D7FE               	bra	u3097
   805  0017F2  2E4D               	decfsz	??_main& (0+255),f,c
   806  0017F4  D7FC               	bra	u3097
   807  0017F6  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   808  0017F8  D7FA               	bra	u3097
   809                           
   810                           ;Programa_principal.c: 59: LCD_gotoXY(1,0);
   811  0017FA  0E00               	movlw	0
   812  0017FC  6E03               	movwf	LCD_gotoXY@x+1,c
   813  0017FE  0E01               	movlw	1
   814  001800  6E02               	movwf	LCD_gotoXY@x,c
   815  001802  0E00               	movlw	0
   816  001804  6E05               	movwf	LCD_gotoXY@y+1,c
   817  001806  0E00               	movlw	0
   818  001808  6E04               	movwf	LCD_gotoXY@y,c
   819  00180A  EC6D  F012         	call	_LCD_gotoXY	;wreg free
   820                           
   821                           ;Programa_principal.c: 60: putrsXLCD("    By WELS    ");
   822  00180E  0E88               	movlw	low STR_2
   823  001810  6E02               	movwf	putrsXLCD@buffer,c
   824  001812  0E08               	movlw	high STR_2
   825  001814  6E03               	movwf	putrsXLCD@buffer+1,c
   826  001816  EC34  F011         	call	_putrsXLCD	;wreg free
   827                           
   828                           ;Programa_principal.c: 61: _delay((unsigned long)((500)*(20000000L/4000.0)));
   829  00181A  0E0D               	movlw	13
   830  00181C  6E4E               	movwf	(??_main+1)& (0+255),c
   831  00181E  0EAF               	movlw	175
   832  001820  6E4D               	movwf	??_main& (0+255),c
   833  001822  0EB6               	movlw	182
   834  001824                     u3107:
   835  001824  2EE8               	decfsz	wreg,f,c
   836  001826  D7FE               	bra	u3107
   837  001828  2E4D               	decfsz	??_main& (0+255),f,c
   838  00182A  D7FC               	bra	u3107
   839  00182C  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   840  00182E  D7FA               	bra	u3107
   841  001830  D000               	nop2	
   842                           
   843                           ;Programa_principal.c: 62: WriteCmdXLCD(0x01);
   844  001832  0E01               	movlw	1
   845  001834  ECCF  F011         	call	_WriteCmdXLCD
   846  001838                     
   847                           ;Programa_principal.c: 64: LCD_gotoXY(0,0);
   848  001838  0E00               	movlw	0
   849  00183A  6E03               	movwf	LCD_gotoXY@x+1,c
   850  00183C  0E00               	movlw	0
   851  00183E  6E02               	movwf	LCD_gotoXY@x,c
   852  001840  0E00               	movlw	0
   853  001842  6E05               	movwf	LCD_gotoXY@y+1,c
   854  001844  0E00               	movlw	0
   855  001846  6E04               	movwf	LCD_gotoXY@y,c
   856  001848  EC6D  F012         	call	_LCD_gotoXY	;wreg free
   857                           
   858                           ;Programa_principal.c: 65: putrsXLCD("VOLTAJE ES:");
   859  00184C  0E98               	movlw	low STR_3
   860  00184E  6E02               	movwf	putrsXLCD@buffer,c
   861  001850  0E08               	movlw	high STR_3
   862  001852  6E03               	movwf	putrsXLCD@buffer+1,c
   863  001854  EC34  F011         	call	_putrsXLCD	;wreg free
   864                           
   865                           ;Programa_principal.c: 66: _delay((unsigned long)((100)*(20000000L/4000.0)));
   866  001858  0E03               	movlw	3
   867  00185A  6E4E               	movwf	(??_main+1)& (0+255),c
   868  00185C  0E8A               	movlw	138
   869  00185E  6E4D               	movwf	??_main& (0+255),c
   870  001860  0E56               	movlw	86
   871  001862                     u3117:
   872  001862  2EE8               	decfsz	wreg,f,c
   873  001864  D7FE               	bra	u3117
   874  001866  2E4D               	decfsz	??_main& (0+255),f,c
   875  001868  D7FC               	bra	u3117
   876  00186A  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   877  00186C  D7FA               	bra	u3117
   878                           
   879                           ;Programa_principal.c: 67: valor = ADC_read(0);
   880  00186E  0E00               	movlw	0
   881  001870  EC0B  F012         	call	_ADC_read
   882  001874  C001  F052         	movff	?_ADC_read,_valor
   883  001878  C002  F053         	movff	?_ADC_read+1,_valor+1
   884                           
   885                           ;Programa_principal.c: 68: voltaje = (valor*5.0)/1023;
   886  00187C  0E00               	movlw	0
   887  00187E  6E18               	movwf	___ftmul@f2,c
   888  001880  0EA0               	movlw	160
   889  001882  6E19               	movwf	___ftmul@f2+1,c
   890  001884  0E40               	movlw	64
   891  001886  6E1A               	movwf	___ftmul@f2+2,c
   892  001888  C052  F009         	movff	_valor,___lwtoft@c
   893  00188C  C053  F00A         	movff	_valor+1,___lwtoft@c+1
   894  001890  EC49  F012         	call	___lwtoft	;wreg free
   895  001894  C009  F015         	movff	?___lwtoft,___ftmul@f1
   896  001898  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
   897  00189C  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
   898  0018A0  ECC0  F00D         	call	___ftmul	;wreg free
   899  0018A4  C015  F024         	movff	?___ftmul,___ftdiv@f1
   900  0018A8  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
   901  0018AC  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
   902  0018B0  0EC0               	movlw	192
   903  0018B2  6E27               	movwf	___ftdiv@f2,c
   904  0018B4  0E7F               	movlw	127
   905  0018B6  6E28               	movwf	___ftdiv@f2+1,c
   906  0018B8  0E44               	movlw	68
   907  0018BA  6E29               	movwf	___ftdiv@f2+2,c
   908  0018BC  ECB4  F00E         	call	___ftdiv	;wreg free
   909  0018C0  C024  F04F         	movff	?___ftdiv,_voltaje
   910  0018C4  C025  F050         	movff	?___ftdiv+1,_voltaje+1
   911  0018C8  C026  F051         	movff	?___ftdiv+2,_voltaje+2
   912                           
   913                           ;Programa_principal.c: 69: LCD_gotoXY(1,12);
   914  0018CC  0E00               	movlw	0
   915  0018CE  6E03               	movwf	LCD_gotoXY@x+1,c
   916  0018D0  0E01               	movlw	1
   917  0018D2  6E02               	movwf	LCD_gotoXY@x,c
   918  0018D4  0E00               	movlw	0
   919  0018D6  6E05               	movwf	LCD_gotoXY@y+1,c
   920  0018D8  0E0C               	movlw	12
   921  0018DA  6E04               	movwf	LCD_gotoXY@y,c
   922  0018DC  EC6D  F012         	call	_LCD_gotoXY	;wreg free
   923                           
   924                           ;Programa_principal.c: 70: sprintf(datos,"%.2f",voltaje);
   925  0018E0  0E77               	movlw	low _datos
   926  0018E2  6E40               	movwf	sprintf@sp,c
   927  0018E4  0E00               	movlw	high _datos
   928  0018E6  6E41               	movwf	sprintf@sp+1,c
   929  0018E8  0EA4               	movlw	low STR_4
   930  0018EA  6E42               	movwf	sprintf@f,c
   931  0018EC  0E08               	movlw	high STR_4
   932  0018EE  6E43               	movwf	sprintf@f+1,c
   933  0018F0  C04F  F044         	movff	_voltaje,?_sprintf+4
   934  0018F4  C050  F045         	movff	_voltaje+1,?_sprintf+5
   935  0018F8  C051  F046         	movff	_voltaje+2,?_sprintf+6
   936  0018FC  EC55  F004         	call	_sprintf	;wreg free
   937                           
   938                           ;Programa_principal.c: 71: putrsXLCD(datos);
   939  001900  0E77               	movlw	low _datos
   940  001902  6E02               	movwf	putrsXLCD@buffer,c
   941  001904  0E00               	movlw	high _datos
   942  001906  6E03               	movwf	putrsXLCD@buffer+1,c
   943  001908  EC34  F011         	call	_putrsXLCD	;wreg free
   944                           
   945                           ;Programa_principal.c: 72: _delay((unsigned long)((500)*(20000000L/4000.0)));
   946  00190C  0E0D               	movlw	13
   947  00190E  6E4E               	movwf	(??_main+1)& (0+255),c
   948  001910  0EAF               	movlw	175
   949  001912  6E4D               	movwf	??_main& (0+255),c
   950  001914  0EB6               	movlw	182
   951  001916                     u3127:
   952  001916  2EE8               	decfsz	wreg,f,c
   953  001918  D7FE               	bra	u3127
   954  00191A  2E4D               	decfsz	??_main& (0+255),f,c
   955  00191C  D7FC               	bra	u3127
   956  00191E  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   957  001920  D7FA               	bra	u3127
   958  001922  D000               	nop2	
   959  001924  D789               	goto	l37
   960  001926                     __end_of_main:
   961                           	opt stack 0
   962                           tblptru	equ	0xFF8
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           
   966 ;; *************** function _sprintf *****************
   967 ;; Defined at:
   968 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  sp              2   63[COMRAM] PTR unsigned char 
   971 ;;		 -> datos(20), 
   972 ;;  f               2   65[COMRAM] PTR const unsigned char 
   973 ;;		 -> STR_4(5), 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;  tmpval          4   13[BANK0 ] struct .
   976 ;;  val             4    7[BANK0 ] unsigned long 
   977 ;;  fval            3   19[BANK0 ] unsigned long 
   978 ;;  cp              3    0        PTR const unsigned char 
   979 ;;  prec            2   17[BANK0 ] int 
   980 ;;  exp             2   11[BANK0 ] int 
   981 ;;  flag            2    5[BANK0 ] unsigned short 
   982 ;;  ap              2    3[BANK0 ] PTR void [1]
   983 ;;		 -> ?_sprintf(2), 
   984 ;;  len             2    0        unsigned int 
   985 ;;  width           2    0        int 
   986 ;;  c               1   22[BANK0 ] char 
   987 ;;  d               1    0        unsigned char 
   988 ;; Return value:  Size  Location     Type
   989 ;;                  2   63[COMRAM] int 
   990 ;; Registers used:
   991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   997 ;;      Params:         7       0       0       0       0       0       0       0       0
   998 ;;      Locals:         0      23       0       0       0       0       0       0       0
   999 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1000 ;;      Totals:        13      23       0       0       0       0       0       0       0
  1001 ;;Total ram usage:       36 bytes
  1002 ;; Hardware stack levels used:    1
  1003 ;; Hardware stack levels required when called:    3
  1004 ;; This function calls:
  1005 ;;		___awdiv
  1006 ;;		___ftadd
  1007 ;;		___ftge
  1008 ;;		___ftmul
  1009 ;;		___ftneg
  1010 ;;		___ftsub
  1011 ;;		___fttol
  1012 ;;		___lldiv
  1013 ;;		___llmod
  1014 ;;		___lltoft
  1015 ;;		___wmul
  1016 ;;		__div_to_l_
  1017 ;;		__tdiv_to_l_
  1018 ;;		_fround
  1019 ;;		_isdigit
  1020 ;;		_scale
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text1
  1027  0008AA                     __ptext1:
  1028                           	opt stack 0
  1029  0008AA                     _sprintf:
  1030                           	opt stack 27
  1031                           
  1032                           ;doprnt.c: 494: va_list ap;
  1033                           ;doprnt.c: 499: signed char c;
  1034                           ;doprnt.c: 501: int width;
  1035                           ;doprnt.c: 504: int prec;
  1036                           ;doprnt.c: 508: unsigned short flag;
  1037                           ;doprnt.c: 515: char d;
  1038                           ;doprnt.c: 516: double fval;
  1039                           ;doprnt.c: 517: int exp;
  1040                           ;doprnt.c: 523: union {
  1041                           ;doprnt.c: 524: unsigned long vd;
  1042                           ;doprnt.c: 525: double integ;
  1043                           ;doprnt.c: 526: } tmpval;
  1044                           ;doprnt.c: 528: unsigned long val;
  1045                           ;doprnt.c: 529: unsigned len;
  1046                           ;doprnt.c: 530: const char * cp;
  1047                           ;doprnt.c: 533: *ap = __va_start();
  1048                           
  1049                           ;incstack = 0
  1050  0008AA  0E44               	movlw	low (?_sprintf+4)
  1051  0008AC  0100               	movlb	0	; () banked
  1052  0008AE  6F63               	movwf	sprintf@ap& (0+255),b
  1053  0008B0  0E00               	movlw	high (?_sprintf+4)
  1054  0008B2  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1055                           
  1056                           ;doprnt.c: 536: while(c = *f++) {
  1057  0008B4  D36B               	goto	l263
  1058  0008B6                     
  1059                           ; BSR set to: 0
  1060                           ;doprnt.c: 538: if(c != '%')
  1061                           
  1062                           ; BSR set to: 0
  1063  0008B6  0E25               	movlw	37
  1064  0008B8  1976               	xorwf	sprintf@c& (0+255),w,b
  1065  0008BA  B4D8               	btfsc	status,2,c
  1066  0008BC  D007               	goto	l209
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;doprnt.c: 540: {
  1070                           ;doprnt.c: 541: ((*sp++ = (c)));
  1071  0008BE  C040  FFD9         	movff	sprintf@sp,fsr2l
  1072  0008C2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1073  0008C6  C076  FFDF         	movff	sprintf@c,indf2
  1074  0008CA  D35E               	goto	l3084
  1075  0008CC                     l209:
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;doprnt.c: 543: }
  1079                           ;doprnt.c: 548: flag = 0;
  1080                           
  1081                           ; BSR set to: 0
  1082  0008CC  0E00               	movlw	0
  1083  0008CE  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1084  0008D0  0E00               	movlw	0
  1085  0008D2  6F65               	movwf	sprintf@flag& (0+255),b
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;doprnt.c: 611: if(*f == '.') {
  1089  0008D4  C042  FFF6         	movff	sprintf@f,tblptrl
  1090  0008D8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1091  0008DC                     	if	0	;tblptru may be non-zero
  1092  0008DC                     	endif
  1093  0008DC                     	if	0	;tblptru may be non-zero
  1094  0008DC                     	endif
  1095  0008DC  0008               	tblrd		*
  1096  0008DE  50F5               	movf	tablat,w,c
  1097  0008E0  0A2E               	xorlw	46
  1098  0008E2  A4D8               	btfss	status,2,c
  1099  0008E4  D02F               	goto	l210
  1100                           
  1101                           ; BSR set to: 0
  1102                           ;doprnt.c: 612: flag |= 0x4000;
  1103  0008E6  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1104                           
  1105                           ;doprnt.c: 613: f++;
  1106  0008E8  4A42               	infsnz	sprintf@f,f,c
  1107  0008EA  2A43               	incf	sprintf@f+1,f,c
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;doprnt.c: 620: {
  1111                           ;doprnt.c: 621: prec = 0;
  1112  0008EC  0E00               	movlw	0
  1113  0008EE  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1114  0008F0  0E00               	movlw	0
  1115  0008F2  6F71               	movwf	sprintf@prec& (0+255),b
  1116                           
  1117                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1118  0008F4  D01C               	goto	l211
  1119  0008F6                     
  1120                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1121                           
  1122                           ; BSR set to: 0
  1123  0008F6  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1124  0008FA  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1125  0008FE  0E00               	movlw	0
  1126  000900  6E12               	movwf	___wmul@multiplicand+1,c
  1127  000902  0E0A               	movlw	10
  1128  000904  6E11               	movwf	___wmul@multiplicand,c
  1129  000906  EC24  F012         	call	___wmul	;wreg free
  1130  00090A  C042  FFF6         	movff	sprintf@f,tblptrl
  1131  00090E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1132  000912                     	if	0	;tblptru may be non-zero
  1133  000912                     	endif
  1134  000912                     	if	0	;tblptru may be non-zero
  1135  000912                     	endif
  1136  000912  0008               	tblrd		*
  1137  000914  50F5               	movf	tablat,w,c
  1138  000916  260F               	addwf	?___wmul,f,c
  1139  000918  0E00               	movlw	0
  1140  00091A  2210               	addwfc	?___wmul+1,f,c
  1141  00091C  0ED0               	movlw	208
  1142  00091E  240F               	addwf	?___wmul,w,c
  1143  000920  0100               	movlb	0	; () banked
  1144  000922  6F71               	movwf	sprintf@prec& (0+255),b
  1145  000924  0EFF               	movlw	255
  1146  000926  2010               	addwfc	?___wmul+1,w,c
  1147  000928  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1148                           
  1149                           ; BSR set to: 0
  1150  00092A  4A42               	infsnz	sprintf@f,f,c
  1151  00092C  2A43               	incf	sprintf@f+1,f,c
  1152  00092E                     l211:
  1153                           
  1154                           ; BSR set to: 0
  1155                           
  1156                           ; BSR set to: 0
  1157  00092E  C042  FFF6         	movff	sprintf@f,tblptrl
  1158  000932  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1159  000936                     	if	0	;tblptru may be non-zero
  1160  000936                     	endif
  1161  000936                     	if	0	;tblptru may be non-zero
  1162  000936                     	endif
  1163  000936  0008               	tblrd		*
  1164  000938  50F5               	movf	tablat,w,c
  1165  00093A  EC8E  F012         	call	_isdigit
  1166  00093E  A0D8               	btfss	status,0,c
  1167  000940  D00A               	goto	l215
  1168  000942  D7D9               	goto	l212
  1169  000944                     l210:
  1170                           
  1171                           ;doprnt.c: 626: prec = 0;
  1172  000944  0E00               	movlw	0
  1173  000946  0100               	movlb	0	; () banked
  1174  000948  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1175  00094A  0E00               	movlw	0
  1176  00094C  6F71               	movwf	sprintf@prec& (0+255),b
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;doprnt.c: 628: flag |= 0x1000;
  1180  00094E  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;doprnt.c: 630: }
  1184                           ;doprnt.c: 635: switch(c = *f++) {
  1185  000950  D002               	goto	l215
  1186  000952                     
  1187                           ; BSR set to: 0
  1188                           ;doprnt.c: 663: flag |= 0x400;
  1189                           
  1190                           ; BSR set to: 0
  1191  000952  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1192                           
  1193                           ;doprnt.c: 664: break;
  1194  000954  D012               	goto	l219
  1195  000956                     l215:
  1196                           
  1197                           ; BSR set to: 0
  1198  000956  C042  FFF6         	movff	sprintf@f,tblptrl
  1199  00095A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1200  00095E  4A42               	infsnz	sprintf@f,f,c
  1201  000960  2A43               	incf	sprintf@f+1,f,c
  1202  000962                     	if	0	;tblptru may be non-zero
  1203  000962                     	endif
  1204  000962                     	if	0	;tblptru may be non-zero
  1205  000962                     	endif
  1206  000962  0008               	tblrd		*
  1207  000964  CFF5 F076          	movff	tablat,sprintf@c
  1208  000968  0100               	movlb	0	; () banked
  1209  00096A  5176               	movf	sprintf@c& (0+255),w,b
  1210                           
  1211                           ; Switch size 1, requested type "space"
  1212                           ; Number of cases is 2, Range of values is 0 to 102
  1213                           ; switch strategies available:
  1214                           ; Name         Instructions Cycles
  1215                           ; simple_byte            7     4 (average)
  1216                           ;	Chosen strategy is simple_byte
  1217  00096C  0A00               	xorlw	0	; case 0
  1218  00096E  B4D8               	btfsc	status,2,c
  1219  000970  D319               	goto	u2970
  1220  000972  0A66               	xorlw	102	; case 102
  1221  000974  B4D8               	btfsc	status,2,c
  1222  000976  D7ED               	goto	l218
  1223  000978  D309               	goto	l263
  1224  00097A                     l219:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;doprnt.c: 825: if(flag & (0x700)) {
  1228                           
  1229                           ; BSR set to: 0
  1230  00097A  0E07               	movlw	7
  1231  00097C  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1232  00097E  B4D8               	btfsc	status,2,c
  1233  000980  D2C9               	goto	l221
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;doprnt.c: 827: if(flag & 0x1000)
  1237  000982  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1238  000984  D004               	goto	l222
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;doprnt.c: 829: prec = 6;
  1242  000986  0E00               	movlw	0
  1243  000988  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1244  00098A  0E06               	movlw	6
  1245  00098C  6F71               	movwf	sprintf@prec& (0+255),b
  1246  00098E                     l222:
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1250                           
  1251                           ; BSR set to: 0
  1252  00098E  C063  FFD9         	movff	sprintf@ap,fsr2l
  1253  000992  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1254  000996  CFDE F073          	movff	postinc2,sprintf@fval
  1255  00099A  CFDE F074          	movff	postinc2,sprintf@fval+1
  1256  00099E  CFDD F075          	movff	postdec2,sprintf@fval+2
  1257                           
  1258                           ; BSR set to: 0
  1259  0009A2  0E03               	movlw	3
  1260  0009A4  2763               	addwf	sprintf@ap& (0+255),f,b
  1261  0009A6  0E00               	movlw	0
  1262  0009A8  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;doprnt.c: 831: if(fval < 0.0) {
  1266  0009AA  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1267  0009AC  D011               	goto	l223
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;doprnt.c: 832: fval = -fval;
  1271  0009AE  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1272  0009B2  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1273  0009B6  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1274  0009BA  EC37  F012         	call	___ftneg	;wreg free
  1275  0009BE  C001  F073         	movff	?___ftneg,sprintf@fval
  1276  0009C2  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1277  0009C6  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1278                           
  1279                           ;doprnt.c: 833: flag |= 0x03;
  1280  0009CA  0E03               	movlw	3
  1281  0009CC  0100               	movlb	0	; () banked
  1282  0009CE  1365               	iorwf	sprintf@flag& (0+255),f,b
  1283  0009D0                     l223:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 834: }
  1287                           ;doprnt.c: 835: exp = 0;
  1288                           
  1289                           ; BSR set to: 0
  1290  0009D0  0E00               	movlw	0
  1291  0009D2  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1292  0009D4  0E00               	movlw	0
  1293  0009D6  6F6B               	movwf	sprintf@exp& (0+255),b
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;doprnt.c: 836: if( fval!=0) {
  1297  0009D8  5173               	movf	sprintf@fval& (0+255),w,b
  1298  0009DA  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1299  0009DC  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1300  0009DE  B4D8               	btfsc	status,2,c
  1301  0009E0  D086               	goto	l228
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1305  0009E2  0E82               	movlw	130
  1306  0009E4  6E47               	movwf	??_sprintf& (0+255),c
  1307  0009E6  0EFF               	movlw	255
  1308  0009E8  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1309  0009EA  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1310  0009EE  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1311  0009F2  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1312  0009F6  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1313  0009FA  0E10               	movlw	16
  1314  0009FC  D005               	goto	u2720
  1315  0009FE                     u2725:
  1316  0009FE  90D8               	bcf	status,0,c
  1317  000A00  324C               	rrcf	??_sprintf+5,f,c
  1318  000A02  324B               	rrcf	??_sprintf+4,f,c
  1319  000A04  324A               	rrcf	??_sprintf+3,f,c
  1320  000A06  3249               	rrcf	??_sprintf+2,f,c
  1321  000A08                     u2720:
  1322  000A08  2EE8               	decfsz	wreg,f,c
  1323  000A0A  D7F9               	goto	u2725
  1324  000A0C  5049               	movf	??_sprintf+2,w,c
  1325  000A0E  2447               	addwf	??_sprintf,w,c
  1326  000A10  6F6B               	movwf	sprintf@exp& (0+255),b
  1327  000A12  0E00               	movlw	0
  1328  000A14  2048               	addwfc	??_sprintf+1,w,c
  1329  000A16  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;doprnt.c: 838: exp--;
  1333  000A18  076B               	decf	sprintf@exp& (0+255),f,b
  1334  000A1A  A0D8               	btfss	status,0,c
  1335  000A1C  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;doprnt.c: 839: exp *= 3;
  1339  000A1E  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  1340  000A22  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1341  000A26  0E00               	movlw	0
  1342  000A28  6E12               	movwf	___wmul@multiplicand+1,c
  1343  000A2A  0E03               	movlw	3
  1344  000A2C  6E11               	movwf	___wmul@multiplicand,c
  1345  000A2E  EC24  F012         	call	___wmul	;wreg free
  1346  000A32  C00F  F06B         	movff	?___wmul,sprintf@exp
  1347  000A36  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  1348                           
  1349                           ;doprnt.c: 840: exp /= 10;
  1350  000A3A  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  1351  000A3E  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1352  000A42  0E00               	movlw	0
  1353  000A44  6E0A               	movwf	___awdiv@divisor+1,c
  1354  000A46  0E0A               	movlw	10
  1355  000A48  6E09               	movwf	___awdiv@divisor,c
  1356  000A4A  EC18  F010         	call	___awdiv	;wreg free
  1357  000A4E  C007  F06B         	movff	?___awdiv,sprintf@exp
  1358  000A52  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  1359                           
  1360                           ;doprnt.c: 841: if(exp < 0)
  1361  000A56  0100               	movlb	0	; () banked
  1362  000A58  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  1363  000A5A  D003               	goto	l225
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;doprnt.c: 842: exp--;
  1367  000A5C  076B               	decf	sprintf@exp& (0+255),f,b
  1368  000A5E  A0D8               	btfss	status,0,c
  1369  000A60  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1370  000A62                     l225:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1374                           
  1375                           ; BSR set to: 0
  1376  000A62  516B               	movf	sprintf@exp& (0+255),w,b
  1377  000A64  0800               	sublw	0
  1378  000A66  ECD9  F007         	call	_scale
  1379  000A6A  C024  F06D         	movff	?_scale,sprintf@tmpval
  1380  000A6E  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1381  000A72  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1382                           
  1383                           ;doprnt.c: 847: tmpval.integ *= fval;
  1384  000A76  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  1385  000A7A  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1386  000A7E  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1387  000A82  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1388  000A86  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1389  000A8A  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1390  000A8E  ECC0  F00D         	call	___ftmul	;wreg free
  1391  000A92  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  1392  000A96  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1393  000A9A  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1394                           
  1395                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1396  000A9E  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1397  000AA2  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1398  000AA6  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1399  000AAA  0E00               	movlw	0
  1400  000AAC  6E04               	movwf	___ftge@ff2,c
  1401  000AAE  0E80               	movlw	128
  1402  000AB0  6E05               	movwf	___ftge@ff2+1,c
  1403  000AB2  0E3F               	movlw	63
  1404  000AB4  6E06               	movwf	___ftge@ff2+2,c
  1405  000AB6  ECD0  F00F         	call	___ftge	;wreg free
  1406  000ABA  B0D8               	btfsc	status,0,c
  1407  000ABC  D005               	goto	l226
  1408                           
  1409                           ;doprnt.c: 849: exp--;
  1410  000ABE  0100               	movlb	0	; () banked
  1411  000AC0  076B               	decf	sprintf@exp& (0+255),f,b
  1412  000AC2  A0D8               	btfss	status,0,c
  1413  000AC4  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1414  000AC6  D013               	goto	l228
  1415  000AC8                     l226:
  1416                           
  1417                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1418                           
  1419                           ; BSR set to: 0
  1420  000AC8  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1421  000ACC  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1422  000AD0  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1423  000AD4  0E00               	movlw	0
  1424  000AD6  6E04               	movwf	___ftge@ff2,c
  1425  000AD8  0E20               	movlw	32
  1426  000ADA  6E05               	movwf	___ftge@ff2+1,c
  1427  000ADC  0E41               	movlw	65
  1428  000ADE  6E06               	movwf	___ftge@ff2+2,c
  1429  000AE0  ECD0  F00F         	call	___ftge	;wreg free
  1430  000AE4  A0D8               	btfss	status,0,c
  1431  000AE6  D003               	goto	l228
  1432                           
  1433                           ;doprnt.c: 851: exp++;
  1434  000AE8  0100               	movlb	0	; () banked
  1435  000AEA  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  1436  000AEC  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  1437  000AEE                     l228:
  1438                           
  1439                           ;doprnt.c: 852: }
  1440                           ;doprnt.c: 1112: if(prec <= 12)
  1441                           
  1442                           ; BSR set to: 0
  1443                           
  1444                           ; BSR set to: 0
  1445                           
  1446                           ; BSR set to: 0
  1447  000AEE  0100               	movlb	0	; () banked
  1448  000AF0  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1449  000AF2  D006               	goto	u2760
  1450  000AF4  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1451  000AF6  E11B               	bnz	l2966
  1452  000AF8  0E0D               	movlw	13
  1453  000AFA  5D71               	subwf	sprintf@prec& (0+255),w,b
  1454  000AFC  B0D8               	btfsc	status,0,c
  1455  000AFE  D017               	goto	l229
  1456  000B00                     u2760:
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;doprnt.c: 1113: fval += fround(prec);
  1460  000B00  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1461  000B04  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1462  000B08  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1463  000B0C  5171               	movf	sprintf@prec& (0+255),w,b
  1464  000B0E  ECDD  F009         	call	_fround
  1465  000B12  C024  F031         	movff	?_fround,___ftadd@f2
  1466  000B16  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1467  000B1A  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1468  000B1E  EC06  F00B         	call	___ftadd	;wreg free
  1469  000B22  C02E  F073         	movff	?___ftadd,sprintf@fval
  1470  000B26  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1471  000B2A  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1472  000B2E                     l229:
  1473  000B2E                     l2966:
  1474                           
  1475                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1476  000B2E  0100               	movlb	0	; () banked
  1477  000B30  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1478  000B32  D006               	goto	u2770
  1479  000B34  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1480  000B36  E120               	bnz	l2974
  1481  000B38  0E0A               	movlw	10
  1482  000B3A  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1483  000B3C  B0D8               	btfsc	status,0,c
  1484  000B3E  D01C               	goto	u2800
  1485  000B40                     u2770:
  1486                           
  1487                           ; BSR set to: 0
  1488  000B40  5173               	movf	sprintf@fval& (0+255),w,b
  1489  000B42  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1490  000B44  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1491  000B46  B4D8               	btfsc	status,2,c
  1492  000B48  D056               	goto	l230
  1493                           
  1494                           ; BSR set to: 0
  1495  000B4A  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1496  000B4E  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1497  000B52  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1498  000B56  EC3A  F00E         	call	___fttol	;wreg free
  1499  000B5A  502B               	movf	?___fttol,w,c
  1500  000B5C  102C               	iorwf	?___fttol+1,w,c
  1501  000B5E  102D               	iorwf	?___fttol+2,w,c
  1502  000B60  102E               	iorwf	?___fttol+3,w,c
  1503  000B62  A4D8               	btfss	status,2,c
  1504  000B64  D048               	goto	l230
  1505  000B66  0100               	movlb	0	; () banked
  1506  000B68  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1507  000B6A  D045               	goto	l230
  1508  000B6C  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1509  000B6E  E104               	bnz	l2974
  1510  000B70  0E02               	movlw	2
  1511  000B72  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1512  000B74  A0D8               	btfss	status,0,c
  1513  000B76  D03F               	goto	l230
  1514  000B78                     u2800:
  1515  000B78                     l2974:
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1519  000B78  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1520  000B7C  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1521  000B80  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1522  000B84  0E70               	movlw	112
  1523  000B86  6E04               	movwf	___ftge@ff2,c
  1524  000B88  0E89               	movlw	137
  1525  000B8A  6E05               	movwf	___ftge@ff2+1,c
  1526  000B8C  0E40               	movlw	64
  1527  000B8E  6E06               	movwf	___ftge@ff2+2,c
  1528  000B90  ECD0  F00F         	call	___ftge	;wreg free
  1529  000B94  B0D8               	btfsc	status,0,c
  1530  000B96  D003               	goto	l233
  1531                           
  1532                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1533  000B98  0100               	movlb	0	; () banked
  1534  000B9A  0EF7               	movlw	247
  1535  000B9C  D002               	goto	L1
  1536  000B9E                     l233:
  1537                           
  1538                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1539                           
  1540                           ; BSR set to: 0
  1541  000B9E  0100               	movlb	0	; () banked
  1542  000BA0  0EF8               	movlw	248
  1543  000BA2                     L1:
  1544  000BA2  276B               	addwf	sprintf@exp& (0+255),f,b
  1545  000BA4  0EFF               	movlw	255
  1546  000BA6  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;doprnt.c: 1124: }
  1550                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1551                           
  1552                           ; BSR set to: 0
  1553  000BA8  516B               	movf	sprintf@exp& (0+255),w,b
  1554  000BAA  ECD9  F007         	call	_scale
  1555  000BAE  C024  F06D         	movff	?_scale,sprintf@tmpval
  1556  000BB2  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1557  000BB6  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1558                           
  1559                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1560  000BBA  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1561  000BBE  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1562  000BC2  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1563  000BC6  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1564  000BCA  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1565  000BCE  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1566  000BD2  EC93  F00C         	call	__tdiv_to_l_	;wreg free
  1567  000BD6  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  1568  000BDA  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1569  000BDE  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1570  000BE2  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1571                           
  1572                           ;doprnt.c: 1129: fval = 0.0;
  1573  000BE6  0E00               	movlw	0
  1574  000BE8  0100               	movlb	0	; () banked
  1575  000BEA  6F73               	movwf	sprintf@fval& (0+255),b
  1576  000BEC  0E00               	movlw	0
  1577  000BEE  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1578  000BF0  0E00               	movlw	0
  1579  000BF2  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1580                           
  1581                           ;doprnt.c: 1130: } else {
  1582  000BF4  D033               	goto	l239
  1583  000BF6                     l230:
  1584                           
  1585                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1586                           
  1587                           ; BSR set to: 0
  1588  000BF6  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1589  000BFA  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1590  000BFE  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1591  000C02  EC3A  F00E         	call	___fttol	;wreg free
  1592  000C06  C02B  F067         	movff	?___fttol,sprintf@val
  1593  000C0A  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  1594  000C0E  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  1595  000C12  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  1596                           
  1597                           ;doprnt.c: 1132: fval -= (double)val;
  1598  000C16  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  1599  000C1A  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1600  000C1E  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1601  000C22  C067  F009         	movff	sprintf@val,___lltoft@c
  1602  000C26  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1603  000C2A  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1604  000C2E  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1605  000C32  EC06  F011         	call	___lltoft	;wreg free
  1606  000C36  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1607  000C3A  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1608  000C3E  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1609  000C42  ECAF  F011         	call	___ftsub	;wreg free
  1610  000C46  C03A  F073         	movff	?___ftsub,sprintf@fval
  1611  000C4A  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  1612  000C4E  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  1613                           
  1614                           ;doprnt.c: 1133: exp = 0;
  1615  000C52  0E00               	movlw	0
  1616  000C54  0100               	movlb	0	; () banked
  1617  000C56  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1618  000C58  0E00               	movlw	0
  1619  000C5A  6F6B               	movwf	sprintf@exp& (0+255),b
  1620  000C5C                     l239:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;doprnt.c: 1134: }
  1624                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1625                           
  1626                           ; BSR set to: 0
  1627  000C5C  0E01               	movlw	1
  1628  000C5E  6F76               	movwf	sprintf@c& (0+255),b
  1629  000C60                     l2994:
  1630                           
  1631                           ; BSR set to: 0
  1632  000C60  0E0A               	movlw	10
  1633  000C62  1976               	xorwf	sprintf@c& (0+255),w,b
  1634  000C64  B4D8               	btfsc	status,2,c
  1635  000C66  D018               	goto	u2840
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;doprnt.c: 1137: if(val < dpowers[c])
  1639                           
  1640                           ; BSR set to: 0
  1641                           
  1642                           ; BSR set to: 0
  1643  000C68  5176               	movf	sprintf@c& (0+255),w,b
  1644  000C6A  0D04               	mullw	4
  1645  000C6C  0E01               	movlw	low _dpowers
  1646  000C6E  24F3               	addwf	prodl,w,c
  1647  000C70  6EF6               	movwf	tblptrl,c
  1648  000C72  0E08               	movlw	high _dpowers
  1649  000C74  20F4               	addwfc	prodh,w,c
  1650  000C76  6EF7               	movwf	tblptrh,c
  1651  000C78                     	if	0	;There are less than 3 active tblptr bytes
  1652  000C78                     	endif
  1653  000C78  0009               	tblrd		*+
  1654  000C7A  50F5               	movf	tablat,w,c
  1655  000C7C  5D67               	subwf	sprintf@val& (0+255),w,b
  1656  000C7E  0009               	tblrd		*+
  1657  000C80  50F5               	movf	tablat,w,c
  1658  000C82  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  1659  000C84  0009               	tblrd		*+
  1660  000C86  50F5               	movf	tablat,w,c
  1661  000C88  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  1662  000C8A  0009               	tblrd		*+
  1663  000C8C  50F5               	movf	tablat,w,c
  1664  000C8E  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  1665  000C90  A0D8               	btfss	status,0,c
  1666  000C92  D002               	goto	u2840
  1667                           
  1668                           ; BSR set to: 0
  1669                           
  1670                           ; BSR set to: 0
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;doprnt.c: 1138: break;
  1674  000C94  2B76               	incf	sprintf@c& (0+255),f,b
  1675  000C96  D7E4               	goto	l2994
  1676  000C98                     u2840:
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;doprnt.c: 1175: {
  1680                           ;doprnt.c: 1188: if(flag & 0x03)
  1681                           
  1682                           ; BSR set to: 0
  1683  000C98  0E03               	movlw	3
  1684  000C9A  1565               	andwf	sprintf@flag& (0+255),w,b
  1685  000C9C  6E47               	movwf	??_sprintf& (0+255),c
  1686  000C9E  0E00               	movlw	0
  1687  000CA0  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1688  000CA2  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1689  000CA4  5047               	movf	??_sprintf,w,c
  1690  000CA6  1048               	iorwf	??_sprintf+1,w,c
  1691  000CA8  B4D8               	btfsc	status,2,c
  1692  000CAA  D050               	goto	l244
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1696  000CAC  C040  FFD9         	movff	sprintf@sp,fsr2l
  1697  000CB0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1698  000CB4  0E2D               	movlw	45
  1699  000CB6  D047               	goto	L2
  1700  000CB8                     
  1701                           ; BSR set to: 0
  1702                           ;doprnt.c: 1200: {
  1703                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1704                           
  1705                           ; BSR set to: 0
  1706  000CB8  C067  F001         	movff	sprintf@val,___lldiv@dividend
  1707  000CBC  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1708  000CC0  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1709  000CC4  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1710  000CC8  5176               	movf	sprintf@c& (0+255),w,b
  1711  000CCA  0D04               	mullw	4
  1712  000CCC  0E01               	movlw	low _dpowers
  1713  000CCE  24F3               	addwf	prodl,w,c
  1714  000CD0  6EF6               	movwf	tblptrl,c
  1715  000CD2  0E08               	movlw	high _dpowers
  1716  000CD4  20F4               	addwfc	prodh,w,c
  1717  000CD6  6EF7               	movwf	tblptrh,c
  1718  000CD8                     	if	0	;There are less than 3 active tblptr bytes
  1719  000CD8                     	endif
  1720  000CD8  0009               	tblrd		*+
  1721  000CDA  CFF5 F005          	movff	tablat,___lldiv@divisor
  1722  000CDE  0009               	tblrd		*+
  1723  000CE0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1724  000CE4  0009               	tblrd		*+
  1725  000CE6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1726  000CEA  000A               	tblrd		*-
  1727  000CEC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1728  000CF0  EC5A  F010         	call	___lldiv	;wreg free
  1729  000CF4  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1730  000CF8  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1731  000CFC  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1732  000D00  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1733                           
  1734                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1735  000D04  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1736  000D08  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1737  000D0C  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1738  000D10  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1739  000D14  0E0A               	movlw	10
  1740  000D16  6E05               	movwf	___llmod@divisor,c
  1741  000D18  0E00               	movlw	0
  1742  000D1A  6E06               	movwf	___llmod@divisor+1,c
  1743  000D1C  0E00               	movlw	0
  1744  000D1E  6E07               	movwf	___llmod@divisor+2,c
  1745  000D20  0E00               	movlw	0
  1746  000D22  6E08               	movwf	___llmod@divisor+3,c
  1747  000D24  ECD3  F010         	call	___llmod	;wreg free
  1748  000D28  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1749  000D2C  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1750  000D30  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1751  000D34  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1752                           
  1753                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1754  000D38  0100               	movlb	0	; () banked
  1755  000D3A  516D               	movf	sprintf@tmpval& (0+255),w,b
  1756  000D3C  0F30               	addlw	48
  1757  000D3E  C040  FFD9         	movff	sprintf@sp,fsr2l
  1758  000D42  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1759  000D46                     L2:
  1760  000D46  6EDF               	movwf	indf2,c
  1761                           
  1762                           ; BSR set to: 0
  1763  000D48  4A40               	infsnz	sprintf@sp,f,c
  1764  000D4A  2A41               	incf	sprintf@sp+1,f,c
  1765  000D4C                     l244:
  1766                           
  1767                           ; BSR set to: 0
  1768                           
  1769                           ; BSR set to: 0
  1770  000D4C  0776               	decf	sprintf@c& (0+255),f,b
  1771  000D4E  2976               	incf	sprintf@c& (0+255),w,b
  1772  000D50  B4D8               	btfsc	status,2,c
  1773  000D52  D00C               	goto	l247
  1774  000D54  D7B1               	goto	l245
  1775  000D56                     l3022:
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1779  000D56  C040  FFD9         	movff	sprintf@sp,fsr2l
  1780  000D5A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1781  000D5E  0E30               	movlw	48
  1782  000D60  6EDF               	movwf	indf2,c
  1783                           
  1784                           ; BSR set to: 0
  1785  000D62  4A40               	infsnz	sprintf@sp,f,c
  1786  000D64  2A41               	incf	sprintf@sp+1,f,c
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;doprnt.c: 1209: exp--;
  1790  000D66  076B               	decf	sprintf@exp& (0+255),f,b
  1791  000D68  A0D8               	btfss	status,0,c
  1792  000D6A  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1793  000D6C                     l247:
  1794                           
  1795                           ; BSR set to: 0
  1796                           
  1797                           ; BSR set to: 0
  1798  000D6C  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1799  000D6E  D005               	goto	u2870
  1800  000D70  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1801  000D72  E1F1               	bnz	l3022
  1802  000D74  056B               	decf	sprintf@exp& (0+255),w,b
  1803  000D76  B0D8               	btfsc	status,0,c
  1804  000D78  D7EE               	goto	l248
  1805  000D7A                     u2870:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;doprnt.c: 1210: }
  1809                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1810                           
  1811                           ; BSR set to: 0
  1812  000D7A  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1813  000D7C  D009               	goto	l250
  1814  000D7E  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1815  000D80  E104               	bnz	u2880
  1816  000D82  0E09               	movlw	9
  1817  000D84  5D71               	subwf	sprintf@prec& (0+255),w,b
  1818  000D86  A0D8               	btfss	status,0,c
  1819  000D88  D003               	goto	l250
  1820  000D8A                     u2880:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1824  000D8A  0E08               	movlw	8
  1825  000D8C  6F76               	movwf	sprintf@c& (0+255),b
  1826  000D8E  D002               	goto	l251
  1827  000D90                     l250:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;doprnt.c: 1213: else
  1831                           ;doprnt.c: 1214: c = prec;
  1832  000D90  C071  F076         	movff	sprintf@prec,sprintf@c
  1833  000D94                     l251:
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;doprnt.c: 1215: prec -= c;
  1837                           
  1838                           ; BSR set to: 0
  1839  000D94  5176               	movf	sprintf@c& (0+255),w,b
  1840  000D96  5F71               	subwf	sprintf@prec& (0+255),f,b
  1841  000D98  0E00               	movlw	0
  1842  000D9A  BF76               	btfsc	sprintf@c& (0+255),7,b
  1843  000D9C  0EFF               	movlw	255
  1844  000D9E  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;doprnt.c: 1219: if(c)
  1848  000DA0  5176               	movf	sprintf@c& (0+255),w,b
  1849  000DA2  B4D8               	btfsc	status,2,c
  1850  000DA4  D008               	goto	l252
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1854  000DA6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1855  000DAA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1856  000DAE  0E2E               	movlw	46
  1857  000DB0  6EDF               	movwf	indf2,c
  1858                           
  1859                           ; BSR set to: 0
  1860  000DB2  4A40               	infsnz	sprintf@sp,f,c
  1861  000DB4  2A41               	incf	sprintf@sp+1,f,c
  1862  000DB6                     l252:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1866                           
  1867                           ; BSR set to: 0
  1868  000DB6  5176               	movf	sprintf@c& (0+255),w,b
  1869  000DB8  ECD9  F007         	call	_scale
  1870  000DBC  C024  F060         	movff	?_scale,_sprintf$1016
  1871  000DC0  C025  F061         	movff	?_scale+1,_sprintf$1016+1
  1872  000DC4  C026  F062         	movff	?_scale+2,_sprintf$1016+2
  1873                           
  1874                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1875  000DC8  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1876  000DCC  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1877  000DD0  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1878  000DD4  C060  F015         	movff	_sprintf$1016,___ftmul@f1
  1879  000DD8  C061  F016         	movff	_sprintf$1016+1,___ftmul@f1+1
  1880  000DDC  C062  F017         	movff	_sprintf$1016+2,___ftmul@f1+2
  1881  000DE0  ECC0  F00D         	call	___ftmul	;wreg free
  1882  000DE4  C015  F02B         	movff	?___ftmul,___fttol@f1
  1883  000DE8  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1884  000DEC  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1885  000DF0  EC3A  F00E         	call	___fttol	;wreg free
  1886  000DF4  C02B  F067         	movff	?___fttol,sprintf@val
  1887  000DF8  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  1888  000DFC  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  1889  000E00  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  1890                           
  1891                           ;doprnt.c: 1228: while(c--) {
  1892  000E04  D071               	goto	l253
  1893  000E06                     
  1894                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1895  000E06  C067  F001         	movff	sprintf@val,___lldiv@dividend
  1896  000E0A  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1897  000E0E  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1898  000E12  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1899  000E16  0100               	movlb	0	; () banked
  1900  000E18  5176               	movf	sprintf@c& (0+255),w,b
  1901  000E1A  0D04               	mullw	4
  1902  000E1C  0E01               	movlw	low _dpowers
  1903  000E1E  24F3               	addwf	prodl,w,c
  1904  000E20  6EF6               	movwf	tblptrl,c
  1905  000E22  0E08               	movlw	high _dpowers
  1906  000E24  20F4               	addwfc	prodh,w,c
  1907  000E26  6EF7               	movwf	tblptrh,c
  1908  000E28                     	if	0	;There are less than 3 active tblptr bytes
  1909  000E28                     	endif
  1910  000E28  0009               	tblrd		*+
  1911  000E2A  CFF5 F005          	movff	tablat,___lldiv@divisor
  1912  000E2E  0009               	tblrd		*+
  1913  000E30  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1914  000E34  0009               	tblrd		*+
  1915  000E36  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1916  000E3A  000A               	tblrd		*-
  1917  000E3C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1918  000E40  EC5A  F010         	call	___lldiv	;wreg free
  1919  000E44  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1920  000E48  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1921  000E4C  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1922  000E50  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1923                           
  1924                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1925  000E54  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1926  000E58  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1927  000E5C  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1928  000E60  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1929  000E64  0E0A               	movlw	10
  1930  000E66  6E05               	movwf	___llmod@divisor,c
  1931  000E68  0E00               	movlw	0
  1932  000E6A  6E06               	movwf	___llmod@divisor+1,c
  1933  000E6C  0E00               	movlw	0
  1934  000E6E  6E07               	movwf	___llmod@divisor+2,c
  1935  000E70  0E00               	movlw	0
  1936  000E72  6E08               	movwf	___llmod@divisor+3,c
  1937  000E74  ECD3  F010         	call	___llmod	;wreg free
  1938  000E78  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1939  000E7C  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1940  000E80  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1941  000E84  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1942                           
  1943                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  1944  000E88  0100               	movlb	0	; () banked
  1945  000E8A  516D               	movf	sprintf@tmpval& (0+255),w,b
  1946  000E8C  0F30               	addlw	48
  1947  000E8E  C040  FFD9         	movff	sprintf@sp,fsr2l
  1948  000E92  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1949  000E96  6EDF               	movwf	indf2,c
  1950                           
  1951                           ; BSR set to: 0
  1952  000E98  4A40               	infsnz	sprintf@sp,f,c
  1953  000E9A  2A41               	incf	sprintf@sp+1,f,c
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;doprnt.c: 1232: val %= dpowers[c];
  1957  000E9C  C067  F001         	movff	sprintf@val,___llmod@dividend
  1958  000EA0  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1959  000EA4  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1960  000EA8  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1961  000EAC  5176               	movf	sprintf@c& (0+255),w,b
  1962  000EAE  0D04               	mullw	4
  1963  000EB0  0E01               	movlw	low _dpowers
  1964  000EB2  24F3               	addwf	prodl,w,c
  1965  000EB4  6EF6               	movwf	tblptrl,c
  1966  000EB6  0E08               	movlw	high _dpowers
  1967  000EB8  20F4               	addwfc	prodh,w,c
  1968  000EBA  6EF7               	movwf	tblptrh,c
  1969  000EBC                     	if	0	;There are less than 3 active tblptr bytes
  1970  000EBC                     	endif
  1971  000EBC  0009               	tblrd		*+
  1972  000EBE  CFF5 F005          	movff	tablat,___llmod@divisor
  1973  000EC2  0009               	tblrd		*+
  1974  000EC4  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1975  000EC8  0009               	tblrd		*+
  1976  000ECA  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1977  000ECE  000A               	tblrd		*-
  1978  000ED0  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1979  000ED4  ECD3  F010         	call	___llmod	;wreg free
  1980  000ED8  C001  F067         	movff	?___llmod,sprintf@val
  1981  000EDC  C002  F068         	movff	?___llmod+1,sprintf@val+1
  1982  000EE0  C003  F069         	movff	?___llmod+2,sprintf@val+2
  1983  000EE4  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  1984  000EE8                     l253:
  1985  000EE8  0100               	movlb	0	; () banked
  1986  000EEA  0776               	decf	sprintf@c& (0+255),f,b
  1987  000EEC  2976               	incf	sprintf@c& (0+255),w,b
  1988  000EEE  B4D8               	btfsc	status,2,c
  1989  000EF0  D00C               	goto	l256
  1990  000EF2  D789               	goto	l254
  1991  000EF4                     
  1992                           ; BSR set to: 0
  1993                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  1994                           
  1995                           ; BSR set to: 0
  1996  000EF4  C040  FFD9         	movff	sprintf@sp,fsr2l
  1997  000EF8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1998  000EFC  0E30               	movlw	48
  1999  000EFE  6EDF               	movwf	indf2,c
  2000                           
  2001                           ; BSR set to: 0
  2002  000F00  4A40               	infsnz	sprintf@sp,f,c
  2003  000F02  2A41               	incf	sprintf@sp+1,f,c
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;doprnt.c: 1237: prec--;
  2007  000F04  0771               	decf	sprintf@prec& (0+255),f,b
  2008  000F06  A0D8               	btfss	status,0,c
  2009  000F08  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2010  000F0A                     l256:
  2011                           
  2012                           ; BSR set to: 0
  2013                           
  2014                           ; BSR set to: 0
  2015  000F0A  5171               	movf	sprintf@prec& (0+255),w,b
  2016  000F0C  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2017  000F0E  B4D8               	btfsc	status,2,c
  2018  000F10  D03D               	goto	l263
  2019  000F12  D7F0               	goto	l257
  2020  000F14                     l221:
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;doprnt.c: 1246: }
  2024                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2025                           
  2026                           ; BSR set to: 0
  2027  000F14  5171               	movf	sprintf@prec& (0+255),w,b
  2028  000F16  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2029  000F18  A4D8               	btfss	status,2,c
  2030  000F1A  D008               	goto	l259
  2031                           
  2032                           ; BSR set to: 0
  2033  000F1C  5167               	movf	sprintf@val& (0+255),w,b
  2034  000F1E  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2035  000F20  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2036  000F22  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2037  000F24  A4D8               	btfss	status,2,c
  2038  000F26  D002               	goto	l259
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;doprnt.c: 1291: prec++;
  2042  000F28  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2043  000F2A  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2044  000F2C                     l259:
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;doprnt.c: 1339: if(c < prec)
  2048                           
  2049                           ; BSR set to: 0
  2050  000F2C  0E80               	movlw	128
  2051  000F2E  BF76               	btfsc	sprintf@c& (0+255),7,b
  2052  000F30  0E7F               	movlw	127
  2053  000F32  6E47               	movwf	??_sprintf& (0+255),c
  2054  000F34  5171               	movf	sprintf@prec& (0+255),w,b
  2055  000F36  5D76               	subwf	sprintf@c& (0+255),w,b
  2056  000F38  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2057  000F3A  0A80               	xorlw	128
  2058  000F3C  5847               	subwfb	??_sprintf& (0+255),w,c
  2059  000F3E  B0D8               	btfsc	status,0,c
  2060  000F40  D003               	goto	l260
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;doprnt.c: 1340: c = prec;
  2064  000F42  C071  F076         	movff	sprintf@prec,sprintf@c
  2065  000F46  D010               	goto	l262
  2066  000F48                     l260:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;doprnt.c: 1341: else if(prec < c)
  2070                           
  2071                           ; BSR set to: 0
  2072  000F48  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2073  000F4A  0A80               	xorlw	128
  2074  000F4C  6E47               	movwf	??_sprintf& (0+255),c
  2075  000F4E  5176               	movf	sprintf@c& (0+255),w,b
  2076  000F50  5D71               	subwf	sprintf@prec& (0+255),w,b
  2077  000F52  0E80               	movlw	128
  2078  000F54  BF76               	btfsc	sprintf@c& (0+255),7,b
  2079  000F56  0E7F               	movlw	127
  2080  000F58  5847               	subwfb	??_sprintf& (0+255),w,c
  2081  000F5A  B0D8               	btfsc	status,0,c
  2082  000F5C  D005               	goto	l262
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;doprnt.c: 1342: prec = c;
  2086  000F5E  5176               	movf	sprintf@c& (0+255),w,b
  2087  000F60  6F71               	movwf	sprintf@prec& (0+255),b
  2088  000F62  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2089  000F64  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2090  000F66  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2091  000F68                     l262:
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;doprnt.c: 1422: {
  2095                           ;doprnt.c: 1438: if(flag & 0x03)
  2096                           
  2097                           ; BSR set to: 0
  2098                           
  2099                           ; BSR set to: 0
  2100  000F68  0E03               	movlw	3
  2101  000F6A  1565               	andwf	sprintf@flag& (0+255),w,b
  2102  000F6C  6E47               	movwf	??_sprintf& (0+255),c
  2103  000F6E  0E00               	movlw	0
  2104  000F70  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2105  000F72  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2106  000F74  5047               	movf	??_sprintf,w,c
  2107  000F76  1048               	iorwf	??_sprintf+1,w,c
  2108  000F78  B4D8               	btfsc	status,2,c
  2109  000F7A  D008               	goto	l263
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2113  000F7C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2114  000F80  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2115  000F84  0E2D               	movlw	45
  2116  000F86  6EDF               	movwf	indf2,c
  2117  000F88                     l3084:
  2118                           
  2119                           ; BSR set to: 0
  2120  000F88  4A40               	infsnz	sprintf@sp,f,c
  2121  000F8A  2A41               	incf	sprintf@sp+1,f,c
  2122  000F8C                     l263:
  2123                           
  2124                           ; BSR set to: 0
  2125                           
  2126                           ; BSR set to: 0
  2127                           
  2128                           ; BSR set to: 0
  2129  000F8C  C042  FFF6         	movff	sprintf@f,tblptrl
  2130  000F90  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2131  000F94  4A42               	infsnz	sprintf@f,f,c
  2132  000F96  2A43               	incf	sprintf@f+1,f,c
  2133  000F98                     	if	0	;tblptru may be non-zero
  2134  000F98                     	endif
  2135  000F98                     	if	0	;tblptru may be non-zero
  2136  000F98                     	endif
  2137  000F98  0008               	tblrd		*
  2138  000F9A  CFF5 F076          	movff	tablat,sprintf@c
  2139  000F9E  5176               	movf	sprintf@c& (0+255),w,b
  2140  000FA0  A4D8               	btfss	status,2,c
  2141  000FA2  D489               	goto	l208
  2142  000FA4                     u2970:
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;doprnt.c: 1538: *sp = 0;
  2146                           
  2147                           ; BSR set to: 0
  2148                           
  2149                           ;doprnt.c: 1469: }
  2150                           ;doprnt.c: 1533: }
  2151                           ;doprnt.c: 1535: alldone:
  2152                           
  2153                           ; BSR set to: 0
  2154  000FA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  2155  000FA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2156  000FAC  0E00               	movlw	0
  2157  000FAE  6EDF               	movwf	indf2,c
  2158  000FB0  0012               	return	
  2159  000FB2                     __end_of_sprintf:
  2160                           	opt stack 0
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           prodh	equ	0xFF4
  2166                           prodl	equ	0xFF3
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           indf2	equ	0xFDF
  2170                           postinc2	equ	0xFDE
  2171                           postdec2	equ	0xFDD
  2172                           fsr2h	equ	0xFDA
  2173                           fsr2l	equ	0xFD9
  2174                           status	equ	0xFD8
  2175                           
  2176 ;; *************** function _scale *****************
  2177 ;; Defined at:
  2178 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;  scl             1    wreg     char 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  scl             1   41[COMRAM] char 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  3   35[COMRAM] char 
  2185 ;; Registers used:
  2186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2192 ;;      Params:         3       0       0       0       0       0       0       0       0
  2193 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2195 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2196 ;;Total ram usage:        7 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    2
  2199 ;; This function calls:
  2200 ;;		___awdiv
  2201 ;;		___awmod
  2202 ;;		___ftmul
  2203 ;;		___wmul
  2204 ;; This function is called by:
  2205 ;;		_sprintf
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text2
  2210  000FB2                     __ptext2:
  2211                           	opt stack 0
  2212  000FB2                     _scale:
  2213                           	opt stack 27
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;incstack = 0
  2217                           ;scale@scl stored from wreg
  2218  000FB2  6E2A               	movwf	scale@scl,c
  2219                           
  2220                           ;doprnt.c: 428: if(scl < 0) {
  2221  000FB4  AE2A               	btfss	scale@scl,7,c
  2222  000FB6  D101               	goto	l197
  2223                           
  2224                           ;doprnt.c: 429: scl = -scl;
  2225  000FB8  6C2A               	negf	scale@scl,c
  2226                           
  2227                           ;doprnt.c: 430: if(scl>=110)
  2228  000FBA  502A               	movf	scale@scl,w,c
  2229  000FBC  0A80               	xorlw	128
  2230  000FBE  0F12               	addlw	-238
  2231  000FC0  A0D8               	btfss	status,0,c
  2232  000FC2  D091               	goto	l198
  2233                           
  2234                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2235  000FC4  0E00               	movlw	0
  2236  000FC6  6E12               	movwf	___wmul@multiplicand+1,c
  2237  000FC8  0E03               	movlw	3
  2238  000FCA  6E11               	movwf	___wmul@multiplicand,c
  2239  000FCC  0E00               	movlw	0
  2240  000FCE  6E0A               	movwf	___awdiv@divisor+1,c
  2241  000FD0  0E0A               	movlw	10
  2242  000FD2  6E09               	movwf	___awdiv@divisor,c
  2243  000FD4  0E00               	movlw	0
  2244  000FD6  6E04               	movwf	___awmod@divisor+1,c
  2245  000FD8  0E64               	movlw	100
  2246  000FDA  6E03               	movwf	___awmod@divisor,c
  2247  000FDC  502A               	movf	scale@scl,w,c
  2248  000FDE  6E01               	movwf	___awmod@dividend,c
  2249  000FE0  6A02               	clrf	___awmod@dividend+1,c
  2250  000FE2  BE01               	btfsc	___awmod@dividend,7,c
  2251  000FE4  0602               	decf	___awmod@dividend+1,f,c
  2252  000FE6  EC9B  F010         	call	___awmod	;wreg free
  2253  000FEA  C001  F007         	movff	?___awmod,___awdiv@dividend
  2254  000FEE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2255  000FF2  EC18  F010         	call	___awdiv	;wreg free
  2256  000FF6  0E09               	movlw	9
  2257  000FF8  2407               	addwf	?___awdiv,w,c
  2258  000FFA  6E0F               	movwf	___wmul@multiplier,c
  2259  000FFC  0E00               	movlw	0
  2260  000FFE  2008               	addwfc	?___awdiv+1,w,c
  2261  001000  6E10               	movwf	___wmul@multiplier+1,c
  2262  001002  EC24  F012         	call	___wmul	;wreg free
  2263  001006  0E50               	movlw	low __npowers_
  2264  001008  240F               	addwf	?___wmul,w,c
  2265  00100A  6EF6               	movwf	tblptrl,c
  2266  00100C  0E08               	movlw	high __npowers_
  2267  00100E  2010               	addwfc	?___wmul+1,w,c
  2268  001010  6EF7               	movwf	tblptrh,c
  2269  001012                     	if	0	;There are less than 3 active tblptr bytes
  2270  001012                     	endif
  2271  001012  0009               	tblrd		*+
  2272  001014  CFF5 F018          	movff	tablat,___ftmul@f2
  2273  001018  0009               	tblrd		*+
  2274  00101A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2275  00101E  000A               	tblrd		*-
  2276  001020  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2277  001024  0E00               	movlw	0
  2278  001026  6E0A               	movwf	___awdiv@divisor+1,c
  2279  001028  0E64               	movlw	100
  2280  00102A  6E09               	movwf	___awdiv@divisor,c
  2281  00102C  502A               	movf	scale@scl,w,c
  2282  00102E  6E07               	movwf	___awdiv@dividend,c
  2283  001030  6A08               	clrf	___awdiv@dividend+1,c
  2284  001032  BE07               	btfsc	___awdiv@dividend,7,c
  2285  001034  0608               	decf	___awdiv@dividend+1,f,c
  2286  001036  EC18  F010         	call	___awdiv	;wreg free
  2287  00103A  0E12               	movlw	18
  2288  00103C  2407               	addwf	?___awdiv,w,c
  2289  00103E  6E0F               	movwf	___wmul@multiplier,c
  2290  001040  0E00               	movlw	0
  2291  001042  2008               	addwfc	?___awdiv+1,w,c
  2292  001044  6E10               	movwf	___wmul@multiplier+1,c
  2293  001046  0E00               	movlw	0
  2294  001048  6E12               	movwf	___wmul@multiplicand+1,c
  2295  00104A  0E03               	movlw	3
  2296  00104C  6E11               	movwf	___wmul@multiplicand,c
  2297  00104E  EC24  F012         	call	___wmul	;wreg free
  2298  001052  0E50               	movlw	low __npowers_
  2299  001054  240F               	addwf	?___wmul,w,c
  2300  001056  6EF6               	movwf	tblptrl,c
  2301  001058  0E08               	movlw	high __npowers_
  2302  00105A  2010               	addwfc	?___wmul+1,w,c
  2303  00105C  6EF7               	movwf	tblptrh,c
  2304  00105E                     	if	0	;There are less than 3 active tblptr bytes
  2305  00105E                     	endif
  2306  00105E  0009               	tblrd		*+
  2307  001060  CFF5 F015          	movff	tablat,___ftmul@f1
  2308  001064  0009               	tblrd		*+
  2309  001066  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2310  00106A  000A               	tblrd		*-
  2311  00106C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2312  001070  ECC0  F00D         	call	___ftmul	;wreg free
  2313  001074  C015  F027         	movff	?___ftmul,_scale$1015
  2314  001078  C016  F028         	movff	?___ftmul+1,_scale$1015+1
  2315  00107C  C017  F029         	movff	?___ftmul+2,_scale$1015+2
  2316                           
  2317                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2318  001080  C027  F015         	movff	_scale$1015,___ftmul@f1
  2319  001084  C028  F016         	movff	_scale$1015+1,___ftmul@f1+1
  2320  001088  C029  F017         	movff	_scale$1015+2,___ftmul@f1+2
  2321  00108C  0E00               	movlw	0
  2322  00108E  6E12               	movwf	___wmul@multiplicand+1,c
  2323  001090  0E03               	movlw	3
  2324  001092  6E11               	movwf	___wmul@multiplicand,c
  2325  001094  0E00               	movlw	0
  2326  001096  6E04               	movwf	___awmod@divisor+1,c
  2327  001098  0E0A               	movlw	10
  2328  00109A  6E03               	movwf	___awmod@divisor,c
  2329  00109C  502A               	movf	scale@scl,w,c
  2330  00109E  6E01               	movwf	___awmod@dividend,c
  2331  0010A0  6A02               	clrf	___awmod@dividend+1,c
  2332  0010A2  BE01               	btfsc	___awmod@dividend,7,c
  2333  0010A4  0602               	decf	___awmod@dividend+1,f,c
  2334  0010A6  EC9B  F010         	call	___awmod	;wreg free
  2335  0010AA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2336  0010AE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2337  0010B2  EC24  F012         	call	___wmul	;wreg free
  2338  0010B6  0E50               	movlw	low __npowers_
  2339  0010B8  240F               	addwf	?___wmul,w,c
  2340  0010BA  6EF6               	movwf	tblptrl,c
  2341  0010BC  0E08               	movlw	high __npowers_
  2342  0010BE  2010               	addwfc	?___wmul+1,w,c
  2343  0010C0  6EF7               	movwf	tblptrh,c
  2344  0010C2                     	if	0	;There are less than 3 active tblptr bytes
  2345  0010C2                     	endif
  2346  0010C2  0009               	tblrd		*+
  2347  0010C4  CFF5 F018          	movff	tablat,___ftmul@f2
  2348  0010C8  0009               	tblrd		*+
  2349  0010CA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2350  0010CE  000A               	tblrd		*-
  2351  0010D0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2352  0010D4  ECC0  F00D         	call	___ftmul	;wreg free
  2353  0010D8  C015  F024         	movff	?___ftmul,?_scale
  2354  0010DC  C016  F025         	movff	?___ftmul+1,?_scale+1
  2355  0010E0  C017  F026         	movff	?___ftmul+2,?_scale+2
  2356  0010E4  0012               	return	
  2357  0010E6                     l198:
  2358                           
  2359                           ;doprnt.c: 432: else if(scl > 10)
  2360  0010E6  502A               	movf	scale@scl,w,c
  2361  0010E8  0A80               	xorlw	128
  2362  0010EA  0F75               	addlw	-139
  2363  0010EC  A0D8               	btfss	status,0,c
  2364  0010EE  D053               	goto	l201
  2365                           
  2366                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2367  0010F0  0E00               	movlw	0
  2368  0010F2  6E0A               	movwf	___awdiv@divisor+1,c
  2369  0010F4  0E0A               	movlw	10
  2370  0010F6  6E09               	movwf	___awdiv@divisor,c
  2371  0010F8  502A               	movf	scale@scl,w,c
  2372  0010FA  6E07               	movwf	___awdiv@dividend,c
  2373  0010FC  6A08               	clrf	___awdiv@dividend+1,c
  2374  0010FE  BE07               	btfsc	___awdiv@dividend,7,c
  2375  001100  0608               	decf	___awdiv@dividend+1,f,c
  2376  001102  EC18  F010         	call	___awdiv	;wreg free
  2377  001106  0E09               	movlw	9
  2378  001108  2407               	addwf	?___awdiv,w,c
  2379  00110A  6E0F               	movwf	___wmul@multiplier,c
  2380  00110C  0E00               	movlw	0
  2381  00110E  2008               	addwfc	?___awdiv+1,w,c
  2382  001110  6E10               	movwf	___wmul@multiplier+1,c
  2383  001112  0E00               	movlw	0
  2384  001114  6E12               	movwf	___wmul@multiplicand+1,c
  2385  001116  0E03               	movlw	3
  2386  001118  6E11               	movwf	___wmul@multiplicand,c
  2387  00111A  EC24  F012         	call	___wmul	;wreg free
  2388  00111E  0E50               	movlw	low __npowers_
  2389  001120  240F               	addwf	?___wmul,w,c
  2390  001122  6EF6               	movwf	tblptrl,c
  2391  001124  0E08               	movlw	high __npowers_
  2392  001126  2010               	addwfc	?___wmul+1,w,c
  2393  001128  6EF7               	movwf	tblptrh,c
  2394  00112A                     	if	0	;There are less than 3 active tblptr bytes
  2395  00112A                     	endif
  2396  00112A  0009               	tblrd		*+
  2397  00112C  CFF5 F015          	movff	tablat,___ftmul@f1
  2398  001130  0009               	tblrd		*+
  2399  001132  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2400  001136  000A               	tblrd		*-
  2401  001138  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2402  00113C  0E00               	movlw	0
  2403  00113E  6E12               	movwf	___wmul@multiplicand+1,c
  2404  001140  0E03               	movlw	3
  2405  001142  6E11               	movwf	___wmul@multiplicand,c
  2406  001144  0E00               	movlw	0
  2407  001146  6E04               	movwf	___awmod@divisor+1,c
  2408  001148  0E0A               	movlw	10
  2409  00114A  6E03               	movwf	___awmod@divisor,c
  2410  00114C  502A               	movf	scale@scl,w,c
  2411  00114E  6E01               	movwf	___awmod@dividend,c
  2412  001150  6A02               	clrf	___awmod@dividend+1,c
  2413  001152  BE01               	btfsc	___awmod@dividend,7,c
  2414  001154  0602               	decf	___awmod@dividend+1,f,c
  2415  001156  EC9B  F010         	call	___awmod	;wreg free
  2416  00115A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2417  00115E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2418  001162  EC24  F012         	call	___wmul	;wreg free
  2419  001166  0E50               	movlw	low __npowers_
  2420  001168  240F               	addwf	?___wmul,w,c
  2421  00116A  6EF6               	movwf	tblptrl,c
  2422  00116C  0E08               	movlw	high __npowers_
  2423  00116E  2010               	addwfc	?___wmul+1,w,c
  2424  001170  6EF7               	movwf	tblptrh,c
  2425  001172                     	if	0	;There are less than 3 active tblptr bytes
  2426  001172                     	endif
  2427  001172  0009               	tblrd		*+
  2428  001174  CFF5 F018          	movff	tablat,___ftmul@f2
  2429  001178  0009               	tblrd		*+
  2430  00117A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2431  00117E  000A               	tblrd		*-
  2432  001180  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2433  001184  ECC0  F00D         	call	___ftmul	;wreg free
  2434  001188  C015  F024         	movff	?___ftmul,?_scale
  2435  00118C  C016  F025         	movff	?___ftmul+1,?_scale+1
  2436  001190  C017  F026         	movff	?___ftmul+2,?_scale+2
  2437  001194  0012               	return	
  2438  001196                     l201:
  2439                           
  2440                           ;doprnt.c: 434: return _npowers_[scl];
  2441  001196  502A               	movf	scale@scl,w,c
  2442  001198  0D03               	mullw	3
  2443  00119A  0E50               	movlw	low __npowers_
  2444  00119C  24F3               	addwf	prodl,w,c
  2445  00119E  6EF6               	movwf	tblptrl,c
  2446  0011A0  0E08               	movlw	high __npowers_
  2447  0011A2  20F4               	addwfc	prodh,w,c
  2448  0011A4  6EF7               	movwf	tblptrh,c
  2449  0011A6                     	if	0	;There are less than 3 active tblptr bytes
  2450  0011A6                     	endif
  2451  0011A6  0009               	tblrd		*+
  2452  0011A8  CFF5 F024          	movff	tablat,?_scale
  2453  0011AC  0009               	tblrd		*+
  2454  0011AE  CFF5 F025          	movff	tablat,?_scale+1
  2455  0011B2  000A               	tblrd		*-
  2456  0011B4  CFF5 F026          	movff	tablat,?_scale+2
  2457  0011B8  0012               	return	
  2458  0011BA                     l197:
  2459                           
  2460                           ;doprnt.c: 435: }
  2461                           ;doprnt.c: 436: if(scl>=110)
  2462  0011BA  502A               	movf	scale@scl,w,c
  2463  0011BC  0A80               	xorlw	128
  2464  0011BE  0F12               	addlw	-238
  2465  0011C0  A0D8               	btfss	status,0,c
  2466  0011C2  D091               	goto	l202
  2467                           
  2468                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2469  0011C4  0E00               	movlw	0
  2470  0011C6  6E12               	movwf	___wmul@multiplicand+1,c
  2471  0011C8  0E03               	movlw	3
  2472  0011CA  6E11               	movwf	___wmul@multiplicand,c
  2473  0011CC  0E00               	movlw	0
  2474  0011CE  6E0A               	movwf	___awdiv@divisor+1,c
  2475  0011D0  0E0A               	movlw	10
  2476  0011D2  6E09               	movwf	___awdiv@divisor,c
  2477  0011D4  0E00               	movlw	0
  2478  0011D6  6E04               	movwf	___awmod@divisor+1,c
  2479  0011D8  0E64               	movlw	100
  2480  0011DA  6E03               	movwf	___awmod@divisor,c
  2481  0011DC  502A               	movf	scale@scl,w,c
  2482  0011DE  6E01               	movwf	___awmod@dividend,c
  2483  0011E0  6A02               	clrf	___awmod@dividend+1,c
  2484  0011E2  BE01               	btfsc	___awmod@dividend,7,c
  2485  0011E4  0602               	decf	___awmod@dividend+1,f,c
  2486  0011E6  EC9B  F010         	call	___awmod	;wreg free
  2487  0011EA  C001  F007         	movff	?___awmod,___awdiv@dividend
  2488  0011EE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2489  0011F2  EC18  F010         	call	___awdiv	;wreg free
  2490  0011F6  0E09               	movlw	9
  2491  0011F8  2407               	addwf	?___awdiv,w,c
  2492  0011FA  6E0F               	movwf	___wmul@multiplier,c
  2493  0011FC  0E00               	movlw	0
  2494  0011FE  2008               	addwfc	?___awdiv+1,w,c
  2495  001200  6E10               	movwf	___wmul@multiplier+1,c
  2496  001202  EC24  F012         	call	___wmul	;wreg free
  2497  001206  0E29               	movlw	low __powers_
  2498  001208  240F               	addwf	?___wmul,w,c
  2499  00120A  6EF6               	movwf	tblptrl,c
  2500  00120C  0E08               	movlw	high __powers_
  2501  00120E  2010               	addwfc	?___wmul+1,w,c
  2502  001210  6EF7               	movwf	tblptrh,c
  2503  001212                     	if	0	;There are less than 3 active tblptr bytes
  2504  001212                     	endif
  2505  001212  0009               	tblrd		*+
  2506  001214  CFF5 F018          	movff	tablat,___ftmul@f2
  2507  001218  0009               	tblrd		*+
  2508  00121A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2509  00121E  000A               	tblrd		*-
  2510  001220  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2511  001224  0E00               	movlw	0
  2512  001226  6E0A               	movwf	___awdiv@divisor+1,c
  2513  001228  0E64               	movlw	100
  2514  00122A  6E09               	movwf	___awdiv@divisor,c
  2515  00122C  502A               	movf	scale@scl,w,c
  2516  00122E  6E07               	movwf	___awdiv@dividend,c
  2517  001230  6A08               	clrf	___awdiv@dividend+1,c
  2518  001232  BE07               	btfsc	___awdiv@dividend,7,c
  2519  001234  0608               	decf	___awdiv@dividend+1,f,c
  2520  001236  EC18  F010         	call	___awdiv	;wreg free
  2521  00123A  0E12               	movlw	18
  2522  00123C  2407               	addwf	?___awdiv,w,c
  2523  00123E  6E0F               	movwf	___wmul@multiplier,c
  2524  001240  0E00               	movlw	0
  2525  001242  2008               	addwfc	?___awdiv+1,w,c
  2526  001244  6E10               	movwf	___wmul@multiplier+1,c
  2527  001246  0E00               	movlw	0
  2528  001248  6E12               	movwf	___wmul@multiplicand+1,c
  2529  00124A  0E03               	movlw	3
  2530  00124C  6E11               	movwf	___wmul@multiplicand,c
  2531  00124E  EC24  F012         	call	___wmul	;wreg free
  2532  001252  0E29               	movlw	low __powers_
  2533  001254  240F               	addwf	?___wmul,w,c
  2534  001256  6EF6               	movwf	tblptrl,c
  2535  001258  0E08               	movlw	high __powers_
  2536  00125A  2010               	addwfc	?___wmul+1,w,c
  2537  00125C  6EF7               	movwf	tblptrh,c
  2538  00125E                     	if	0	;There are less than 3 active tblptr bytes
  2539  00125E                     	endif
  2540  00125E  0009               	tblrd		*+
  2541  001260  CFF5 F015          	movff	tablat,___ftmul@f1
  2542  001264  0009               	tblrd		*+
  2543  001266  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2544  00126A  000A               	tblrd		*-
  2545  00126C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2546  001270  ECC0  F00D         	call	___ftmul	;wreg free
  2547  001274  C015  F027         	movff	?___ftmul,_scale$1015
  2548  001278  C016  F028         	movff	?___ftmul+1,_scale$1015+1
  2549  00127C  C017  F029         	movff	?___ftmul+2,_scale$1015+2
  2550                           
  2551                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2552  001280  C027  F015         	movff	_scale$1015,___ftmul@f1
  2553  001284  C028  F016         	movff	_scale$1015+1,___ftmul@f1+1
  2554  001288  C029  F017         	movff	_scale$1015+2,___ftmul@f1+2
  2555  00128C  0E00               	movlw	0
  2556  00128E  6E12               	movwf	___wmul@multiplicand+1,c
  2557  001290  0E03               	movlw	3
  2558  001292  6E11               	movwf	___wmul@multiplicand,c
  2559  001294  0E00               	movlw	0
  2560  001296  6E04               	movwf	___awmod@divisor+1,c
  2561  001298  0E0A               	movlw	10
  2562  00129A  6E03               	movwf	___awmod@divisor,c
  2563  00129C  502A               	movf	scale@scl,w,c
  2564  00129E  6E01               	movwf	___awmod@dividend,c
  2565  0012A0  6A02               	clrf	___awmod@dividend+1,c
  2566  0012A2  BE01               	btfsc	___awmod@dividend,7,c
  2567  0012A4  0602               	decf	___awmod@dividend+1,f,c
  2568  0012A6  EC9B  F010         	call	___awmod	;wreg free
  2569  0012AA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2570  0012AE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2571  0012B2  EC24  F012         	call	___wmul	;wreg free
  2572  0012B6  0E29               	movlw	low __powers_
  2573  0012B8  240F               	addwf	?___wmul,w,c
  2574  0012BA  6EF6               	movwf	tblptrl,c
  2575  0012BC  0E08               	movlw	high __powers_
  2576  0012BE  2010               	addwfc	?___wmul+1,w,c
  2577  0012C0  6EF7               	movwf	tblptrh,c
  2578  0012C2                     	if	0	;There are less than 3 active tblptr bytes
  2579  0012C2                     	endif
  2580  0012C2  0009               	tblrd		*+
  2581  0012C4  CFF5 F018          	movff	tablat,___ftmul@f2
  2582  0012C8  0009               	tblrd		*+
  2583  0012CA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2584  0012CE  000A               	tblrd		*-
  2585  0012D0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2586  0012D4  ECC0  F00D         	call	___ftmul	;wreg free
  2587  0012D8  C015  F024         	movff	?___ftmul,?_scale
  2588  0012DC  C016  F025         	movff	?___ftmul+1,?_scale+1
  2589  0012E0  C017  F026         	movff	?___ftmul+2,?_scale+2
  2590  0012E4  0012               	return	
  2591  0012E6                     l202:
  2592                           
  2593                           ;doprnt.c: 438: else if(scl > 10)
  2594  0012E6  502A               	movf	scale@scl,w,c
  2595  0012E8  0A80               	xorlw	128
  2596  0012EA  0F75               	addlw	-139
  2597  0012EC  A0D8               	btfss	status,0,c
  2598  0012EE  D053               	goto	l204
  2599                           
  2600                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2601  0012F0  0E00               	movlw	0
  2602  0012F2  6E0A               	movwf	___awdiv@divisor+1,c
  2603  0012F4  0E0A               	movlw	10
  2604  0012F6  6E09               	movwf	___awdiv@divisor,c
  2605  0012F8  502A               	movf	scale@scl,w,c
  2606  0012FA  6E07               	movwf	___awdiv@dividend,c
  2607  0012FC  6A08               	clrf	___awdiv@dividend+1,c
  2608  0012FE  BE07               	btfsc	___awdiv@dividend,7,c
  2609  001300  0608               	decf	___awdiv@dividend+1,f,c
  2610  001302  EC18  F010         	call	___awdiv	;wreg free
  2611  001306  0E09               	movlw	9
  2612  001308  2407               	addwf	?___awdiv,w,c
  2613  00130A  6E0F               	movwf	___wmul@multiplier,c
  2614  00130C  0E00               	movlw	0
  2615  00130E  2008               	addwfc	?___awdiv+1,w,c
  2616  001310  6E10               	movwf	___wmul@multiplier+1,c
  2617  001312  0E00               	movlw	0
  2618  001314  6E12               	movwf	___wmul@multiplicand+1,c
  2619  001316  0E03               	movlw	3
  2620  001318  6E11               	movwf	___wmul@multiplicand,c
  2621  00131A  EC24  F012         	call	___wmul	;wreg free
  2622  00131E  0E29               	movlw	low __powers_
  2623  001320  240F               	addwf	?___wmul,w,c
  2624  001322  6EF6               	movwf	tblptrl,c
  2625  001324  0E08               	movlw	high __powers_
  2626  001326  2010               	addwfc	?___wmul+1,w,c
  2627  001328  6EF7               	movwf	tblptrh,c
  2628  00132A                     	if	0	;There are less than 3 active tblptr bytes
  2629  00132A                     	endif
  2630  00132A  0009               	tblrd		*+
  2631  00132C  CFF5 F015          	movff	tablat,___ftmul@f1
  2632  001330  0009               	tblrd		*+
  2633  001332  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2634  001336  000A               	tblrd		*-
  2635  001338  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2636  00133C  0E00               	movlw	0
  2637  00133E  6E12               	movwf	___wmul@multiplicand+1,c
  2638  001340  0E03               	movlw	3
  2639  001342  6E11               	movwf	___wmul@multiplicand,c
  2640  001344  0E00               	movlw	0
  2641  001346  6E04               	movwf	___awmod@divisor+1,c
  2642  001348  0E0A               	movlw	10
  2643  00134A  6E03               	movwf	___awmod@divisor,c
  2644  00134C  502A               	movf	scale@scl,w,c
  2645  00134E  6E01               	movwf	___awmod@dividend,c
  2646  001350  6A02               	clrf	___awmod@dividend+1,c
  2647  001352  BE01               	btfsc	___awmod@dividend,7,c
  2648  001354  0602               	decf	___awmod@dividend+1,f,c
  2649  001356  EC9B  F010         	call	___awmod	;wreg free
  2650  00135A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2651  00135E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2652  001362  EC24  F012         	call	___wmul	;wreg free
  2653  001366  0E29               	movlw	low __powers_
  2654  001368  240F               	addwf	?___wmul,w,c
  2655  00136A  6EF6               	movwf	tblptrl,c
  2656  00136C  0E08               	movlw	high __powers_
  2657  00136E  2010               	addwfc	?___wmul+1,w,c
  2658  001370  6EF7               	movwf	tblptrh,c
  2659  001372                     	if	0	;There are less than 3 active tblptr bytes
  2660  001372                     	endif
  2661  001372  0009               	tblrd		*+
  2662  001374  CFF5 F018          	movff	tablat,___ftmul@f2
  2663  001378  0009               	tblrd		*+
  2664  00137A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2665  00137E  000A               	tblrd		*-
  2666  001380  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2667  001384  ECC0  F00D         	call	___ftmul	;wreg free
  2668  001388  C015  F024         	movff	?___ftmul,?_scale
  2669  00138C  C016  F025         	movff	?___ftmul+1,?_scale+1
  2670  001390  C017  F026         	movff	?___ftmul+2,?_scale+2
  2671  001394  0012               	return	
  2672  001396                     l204:
  2673                           
  2674                           ;doprnt.c: 440: return _powers_[scl];
  2675  001396  502A               	movf	scale@scl,w,c
  2676  001398  0D03               	mullw	3
  2677  00139A  0E29               	movlw	low __powers_
  2678  00139C  24F3               	addwf	prodl,w,c
  2679  00139E  6EF6               	movwf	tblptrl,c
  2680  0013A0  0E08               	movlw	high __powers_
  2681  0013A2  20F4               	addwfc	prodh,w,c
  2682  0013A4  6EF7               	movwf	tblptrh,c
  2683  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  2684  0013A6                     	endif
  2685  0013A6  0009               	tblrd		*+
  2686  0013A8  CFF5 F024          	movff	tablat,?_scale
  2687  0013AC  0009               	tblrd		*+
  2688  0013AE  CFF5 F025          	movff	tablat,?_scale+1
  2689  0013B2  000A               	tblrd		*-
  2690  0013B4  CFF5 F026          	movff	tablat,?_scale+2
  2691  0013B8  0012               	return	
  2692  0013BA                     __end_of_scale:
  2693                           	opt stack 0
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           prodh	equ	0xFF4
  2699                           prodl	equ	0xFF3
  2700                           postinc0	equ	0xFEE
  2701                           wreg	equ	0xFE8
  2702                           indf2	equ	0xFDF
  2703                           postinc2	equ	0xFDE
  2704                           postdec2	equ	0xFDD
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _isdigit *****************
  2710 ;; Defined at:
  2711 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  c               1    wreg     unsigned char 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  c               1    2[COMRAM] unsigned char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;		None               void
  2718 ;; Registers used:
  2719 ;;		wreg, status,2, status,0
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2725 ;;      Params:         0       0       0       0       0       0       0       0       0
  2726 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2727 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2728 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2729 ;;Total ram usage:        3 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_sprintf
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text3
  2739  00251C                     __ptext3:
  2740                           	opt stack 0
  2741  00251C                     _isdigit:
  2742                           	opt stack 29
  2743                           
  2744                           ;incstack = 0
  2745                           ;isdigit@c stored from wreg
  2746  00251C  6E03               	movwf	isdigit@c,c
  2747  00251E  0E00               	movlw	0
  2748  002520  6E02               	movwf	_isdigit$665,c
  2749  002522  0E3A               	movlw	58
  2750  002524  6003               	cpfslt	isdigit@c,c
  2751  002526  D005               	goto	l629
  2752  002528  0E2F               	movlw	47
  2753  00252A  6403               	cpfsgt	isdigit@c,c
  2754  00252C  D002               	goto	l629
  2755  00252E  0E01               	movlw	1
  2756  002530  6E02               	movwf	_isdigit$665,c
  2757  002532                     l629:
  2758  002532  C002  F001         	movff	_isdigit$665,??_isdigit
  2759  002536  3001               	rrcf	??_isdigit,w,c
  2760  002538  0012               	return	
  2761  00253A                     __end_of_isdigit:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           indf2	equ	0xFDF
  2772                           postinc2	equ	0xFDE
  2773                           postdec2	equ	0xFDD
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _fround *****************
  2779 ;; Defined at:
  2780 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  prec            1    wreg     unsigned char 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  prec            1   44[COMRAM] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  3   35[COMRAM] unsigned char 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2794 ;;      Params:         3       0       0       0       0       0       0       0       0
  2795 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2797 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2798 ;;Total ram usage:       10 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    2
  2801 ;; This function calls:
  2802 ;;		___awdiv
  2803 ;;		___awmod
  2804 ;;		___ftmul
  2805 ;;		___wmul
  2806 ;; This function is called by:
  2807 ;;		_sprintf
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text4
  2812  0013BA                     __ptext4:
  2813                           	opt stack 0
  2814  0013BA                     _fround:
  2815                           	opt stack 27
  2816                           
  2817                           ;incstack = 0
  2818                           ;fround@prec stored from wreg
  2819  0013BA  6E2D               	movwf	fround@prec,c
  2820                           
  2821                           ;doprnt.c: 413: if(prec>=110)
  2822  0013BC  0E6D               	movlw	109
  2823  0013BE  642D               	cpfsgt	fround@prec,c
  2824  0013C0  D09F               	goto	l191
  2825                           
  2826                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2827  0013C2  0E00               	movlw	0
  2828  0013C4  6E12               	movwf	___wmul@multiplicand+1,c
  2829  0013C6  0E03               	movlw	3
  2830  0013C8  6E11               	movwf	___wmul@multiplicand,c
  2831  0013CA  0E00               	movlw	0
  2832  0013CC  6E0A               	movwf	___awdiv@divisor+1,c
  2833  0013CE  0E0A               	movlw	10
  2834  0013D0  6E09               	movwf	___awdiv@divisor,c
  2835  0013D2  0E00               	movlw	0
  2836  0013D4  6E04               	movwf	___awmod@divisor+1,c
  2837  0013D6  0E64               	movlw	100
  2838  0013D8  6E03               	movwf	___awmod@divisor,c
  2839  0013DA  C02D  F001         	movff	fround@prec,___awmod@dividend
  2840  0013DE  6A02               	clrf	___awmod@dividend+1,c
  2841  0013E0  EC9B  F010         	call	___awmod	;wreg free
  2842  0013E4  C001  F007         	movff	?___awmod,___awdiv@dividend
  2843  0013E8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2844  0013EC  EC18  F010         	call	___awdiv	;wreg free
  2845  0013F0  0E09               	movlw	9
  2846  0013F2  2407               	addwf	?___awdiv,w,c
  2847  0013F4  6E0F               	movwf	___wmul@multiplier,c
  2848  0013F6  0E00               	movlw	0
  2849  0013F8  2008               	addwfc	?___awdiv+1,w,c
  2850  0013FA  6E10               	movwf	___wmul@multiplier+1,c
  2851  0013FC  EC24  F012         	call	___wmul	;wreg free
  2852  001400  0E50               	movlw	low __npowers_
  2853  001402  240F               	addwf	?___wmul,w,c
  2854  001404  6EF6               	movwf	tblptrl,c
  2855  001406  0E08               	movlw	high __npowers_
  2856  001408  2010               	addwfc	?___wmul+1,w,c
  2857  00140A  6EF7               	movwf	tblptrh,c
  2858  00140C                     	if	0	;There are less than 3 active tblptr bytes
  2859  00140C                     	endif
  2860  00140C  0009               	tblrd		*+
  2861  00140E  CFF5 F018          	movff	tablat,___ftmul@f2
  2862  001412  0009               	tblrd		*+
  2863  001414  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2864  001418  000A               	tblrd		*-
  2865  00141A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2866  00141E  0E00               	movlw	0
  2867  001420  6E0A               	movwf	___awdiv@divisor+1,c
  2868  001422  0E64               	movlw	100
  2869  001424  6E09               	movwf	___awdiv@divisor,c
  2870  001426  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2871  00142A  6A08               	clrf	___awdiv@dividend+1,c
  2872  00142C  EC18  F010         	call	___awdiv	;wreg free
  2873  001430  0E12               	movlw	18
  2874  001432  2407               	addwf	?___awdiv,w,c
  2875  001434  6E0F               	movwf	___wmul@multiplier,c
  2876  001436  0E00               	movlw	0
  2877  001438  2008               	addwfc	?___awdiv+1,w,c
  2878  00143A  6E10               	movwf	___wmul@multiplier+1,c
  2879  00143C  0E00               	movlw	0
  2880  00143E  6E12               	movwf	___wmul@multiplicand+1,c
  2881  001440  0E03               	movlw	3
  2882  001442  6E11               	movwf	___wmul@multiplicand,c
  2883  001444  EC24  F012         	call	___wmul	;wreg free
  2884  001448  0E50               	movlw	low __npowers_
  2885  00144A  240F               	addwf	?___wmul,w,c
  2886  00144C  6EF6               	movwf	tblptrl,c
  2887  00144E  0E08               	movlw	high __npowers_
  2888  001450  2010               	addwfc	?___wmul+1,w,c
  2889  001452  6EF7               	movwf	tblptrh,c
  2890  001454                     	if	0	;There are less than 3 active tblptr bytes
  2891  001454                     	endif
  2892  001454  0009               	tblrd		*+
  2893  001456  CFF5 F015          	movff	tablat,___ftmul@f1
  2894  00145A  0009               	tblrd		*+
  2895  00145C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2896  001460  000A               	tblrd		*-
  2897  001462  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2898  001466  ECC0  F00D         	call	___ftmul	;wreg free
  2899  00146A  C015  F02A         	movff	?___ftmul,_fround$1013
  2900  00146E  C016  F02B         	movff	?___ftmul+1,_fround$1013+1
  2901  001472  C017  F02C         	movff	?___ftmul+2,_fround$1013+2
  2902                           
  2903                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2904  001476  0E00               	movlw	0
  2905  001478  6E12               	movwf	___wmul@multiplicand+1,c
  2906  00147A  0E03               	movlw	3
  2907  00147C  6E11               	movwf	___wmul@multiplicand,c
  2908  00147E  0E00               	movlw	0
  2909  001480  6E04               	movwf	___awmod@divisor+1,c
  2910  001482  0E0A               	movlw	10
  2911  001484  6E03               	movwf	___awmod@divisor,c
  2912  001486  C02D  F001         	movff	fround@prec,___awmod@dividend
  2913  00148A  6A02               	clrf	___awmod@dividend+1,c
  2914  00148C  EC9B  F010         	call	___awmod	;wreg free
  2915  001490  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2916  001494  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2917  001498  EC24  F012         	call	___wmul	;wreg free
  2918  00149C  0E50               	movlw	low __npowers_
  2919  00149E  240F               	addwf	?___wmul,w,c
  2920  0014A0  6EF6               	movwf	tblptrl,c
  2921  0014A2  0E08               	movlw	high __npowers_
  2922  0014A4  2010               	addwfc	?___wmul+1,w,c
  2923  0014A6  6EF7               	movwf	tblptrh,c
  2924  0014A8                     	if	0	;There are less than 3 active tblptr bytes
  2925  0014A8                     	endif
  2926  0014A8  0009               	tblrd		*+
  2927  0014AA  CFF5 F018          	movff	tablat,___ftmul@f2
  2928  0014AE  0009               	tblrd		*+
  2929  0014B0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2930  0014B4  000A               	tblrd		*-
  2931  0014B6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2932  0014BA  C02A  F015         	movff	_fround$1013,___ftmul@f1
  2933  0014BE  C02B  F016         	movff	_fround$1013+1,___ftmul@f1+1
  2934  0014C2  C02C  F017         	movff	_fround$1013+2,___ftmul@f1+2
  2935  0014C6  ECC0  F00D         	call	___ftmul	;wreg free
  2936  0014CA  C015  F027         	movff	?___ftmul,_fround$1014
  2937  0014CE  C016  F028         	movff	?___ftmul+1,_fround$1014+1
  2938  0014D2  C017  F029         	movff	?___ftmul+2,_fround$1014+2
  2939                           
  2940                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2941  0014D6  C027  F015         	movff	_fround$1014,___ftmul@f1
  2942  0014DA  C028  F016         	movff	_fround$1014+1,___ftmul@f1+1
  2943  0014DE  C029  F017         	movff	_fround$1014+2,___ftmul@f1+2
  2944  0014E2  0E00               	movlw	0
  2945  0014E4  6E18               	movwf	___ftmul@f2,c
  2946  0014E6  0E00               	movlw	0
  2947  0014E8  6E19               	movwf	___ftmul@f2+1,c
  2948  0014EA  0E3F               	movlw	63
  2949  0014EC  6E1A               	movwf	___ftmul@f2+2,c
  2950  0014EE  ECC0  F00D         	call	___ftmul	;wreg free
  2951  0014F2  C015  F024         	movff	?___ftmul,?_fround
  2952  0014F6  C016  F025         	movff	?___ftmul+1,?_fround+1
  2953  0014FA  C017  F026         	movff	?___ftmul+2,?_fround+2
  2954  0014FE  0012               	return	
  2955  001500                     l191:
  2956                           
  2957                           ;doprnt.c: 415: else if(prec > 10)
  2958  001500  0E0A               	movlw	10
  2959  001502  642D               	cpfsgt	fround@prec,c
  2960  001504  D063               	goto	l194
  2961                           
  2962                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2963  001506  0E00               	movlw	0
  2964  001508  6E12               	movwf	___wmul@multiplicand+1,c
  2965  00150A  0E03               	movlw	3
  2966  00150C  6E11               	movwf	___wmul@multiplicand,c
  2967  00150E  0E00               	movlw	0
  2968  001510  6E04               	movwf	___awmod@divisor+1,c
  2969  001512  0E0A               	movlw	10
  2970  001514  6E03               	movwf	___awmod@divisor,c
  2971  001516  C02D  F001         	movff	fround@prec,___awmod@dividend
  2972  00151A  6A02               	clrf	___awmod@dividend+1,c
  2973  00151C  EC9B  F010         	call	___awmod	;wreg free
  2974  001520  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2975  001524  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2976  001528  EC24  F012         	call	___wmul	;wreg free
  2977  00152C  0E50               	movlw	low __npowers_
  2978  00152E  240F               	addwf	?___wmul,w,c
  2979  001530  6EF6               	movwf	tblptrl,c
  2980  001532  0E08               	movlw	high __npowers_
  2981  001534  2010               	addwfc	?___wmul+1,w,c
  2982  001536  6EF7               	movwf	tblptrh,c
  2983  001538                     	if	0	;There are less than 3 active tblptr bytes
  2984  001538                     	endif
  2985  001538  0009               	tblrd		*+
  2986  00153A  CFF5 F018          	movff	tablat,___ftmul@f2
  2987  00153E  0009               	tblrd		*+
  2988  001540  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2989  001544  000A               	tblrd		*-
  2990  001546  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2991  00154A  0E00               	movlw	0
  2992  00154C  6E0A               	movwf	___awdiv@divisor+1,c
  2993  00154E  0E0A               	movlw	10
  2994  001550  6E09               	movwf	___awdiv@divisor,c
  2995  001552  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2996  001556  6A08               	clrf	___awdiv@dividend+1,c
  2997  001558  EC18  F010         	call	___awdiv	;wreg free
  2998  00155C  0E09               	movlw	9
  2999  00155E  2407               	addwf	?___awdiv,w,c
  3000  001560  6E0F               	movwf	___wmul@multiplier,c
  3001  001562  0E00               	movlw	0
  3002  001564  2008               	addwfc	?___awdiv+1,w,c
  3003  001566  6E10               	movwf	___wmul@multiplier+1,c
  3004  001568  0E00               	movlw	0
  3005  00156A  6E12               	movwf	___wmul@multiplicand+1,c
  3006  00156C  0E03               	movlw	3
  3007  00156E  6E11               	movwf	___wmul@multiplicand,c
  3008  001570  EC24  F012         	call	___wmul	;wreg free
  3009  001574  0E50               	movlw	low __npowers_
  3010  001576  240F               	addwf	?___wmul,w,c
  3011  001578  6EF6               	movwf	tblptrl,c
  3012  00157A  0E08               	movlw	high __npowers_
  3013  00157C  2010               	addwfc	?___wmul+1,w,c
  3014  00157E  6EF7               	movwf	tblptrh,c
  3015  001580                     	if	0	;There are less than 3 active tblptr bytes
  3016  001580                     	endif
  3017  001580  0009               	tblrd		*+
  3018  001582  CFF5 F015          	movff	tablat,___ftmul@f1
  3019  001586  0009               	tblrd		*+
  3020  001588  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3021  00158C  000A               	tblrd		*-
  3022  00158E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3023  001592  ECC0  F00D         	call	___ftmul	;wreg free
  3024  001596  C015  F02A         	movff	?___ftmul,_fround$1013
  3025  00159A  C016  F02B         	movff	?___ftmul+1,_fround$1013+1
  3026  00159E  C017  F02C         	movff	?___ftmul+2,_fround$1013+2
  3027                           
  3028                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3029  0015A2  C02A  F015         	movff	_fround$1013,___ftmul@f1
  3030  0015A6  C02B  F016         	movff	_fround$1013+1,___ftmul@f1+1
  3031  0015AA  C02C  F017         	movff	_fround$1013+2,___ftmul@f1+2
  3032  0015AE  0E00               	movlw	0
  3033  0015B0  6E18               	movwf	___ftmul@f2,c
  3034  0015B2  0E00               	movlw	0
  3035  0015B4  6E19               	movwf	___ftmul@f2+1,c
  3036  0015B6  0E3F               	movlw	63
  3037  0015B8  6E1A               	movwf	___ftmul@f2+2,c
  3038  0015BA  ECC0  F00D         	call	___ftmul	;wreg free
  3039  0015BE  C015  F024         	movff	?___ftmul,?_fround
  3040  0015C2  C016  F025         	movff	?___ftmul+1,?_fround+1
  3041  0015C6  C017  F026         	movff	?___ftmul+2,?_fround+2
  3042  0015CA  0012               	return	
  3043  0015CC                     l194:
  3044                           
  3045                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3046  0015CC  502D               	movf	fround@prec,w,c
  3047  0015CE  0D03               	mullw	3
  3048  0015D0  0E50               	movlw	low __npowers_
  3049  0015D2  24F3               	addwf	prodl,w,c
  3050  0015D4  6EF6               	movwf	tblptrl,c
  3051  0015D6  0E08               	movlw	high __npowers_
  3052  0015D8  20F4               	addwfc	prodh,w,c
  3053  0015DA  6EF7               	movwf	tblptrh,c
  3054  0015DC                     	if	0	;There are less than 3 active tblptr bytes
  3055  0015DC                     	endif
  3056  0015DC  0009               	tblrd		*+
  3057  0015DE  CFF5 F015          	movff	tablat,___ftmul@f1
  3058  0015E2  0009               	tblrd		*+
  3059  0015E4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3060  0015E8  000A               	tblrd		*-
  3061  0015EA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3062  0015EE  0E00               	movlw	0
  3063  0015F0  6E18               	movwf	___ftmul@f2,c
  3064  0015F2  0E00               	movlw	0
  3065  0015F4  6E19               	movwf	___ftmul@f2+1,c
  3066  0015F6  0E3F               	movlw	63
  3067  0015F8  6E1A               	movwf	___ftmul@f2+2,c
  3068  0015FA  ECC0  F00D         	call	___ftmul	;wreg free
  3069  0015FE  C015  F024         	movff	?___ftmul,?_fround
  3070  001602  C016  F025         	movff	?___ftmul+1,?_fround+1
  3071  001606  C017  F026         	movff	?___ftmul+2,?_fround+2
  3072  00160A  0012               	return	
  3073  00160C                     __end_of_fround:
  3074                           	opt stack 0
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           postinc0	equ	0xFEE
  3082                           wreg	equ	0xFE8
  3083                           indf2	equ	0xFDF
  3084                           postinc2	equ	0xFDE
  3085                           postdec2	equ	0xFDD
  3086                           fsr2h	equ	0xFDA
  3087                           fsr2l	equ	0xFD9
  3088                           status	equ	0xFD8
  3089                           
  3090 ;; *************** function ___wmul *****************
  3091 ;; Defined at:
  3092 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;  multiplier      2   14[COMRAM] unsigned int 
  3095 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;  product         2   18[COMRAM] unsigned int 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  2   14[COMRAM] unsigned int 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0, prodl, prodh
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3107 ;;      Params:         4       0       0       0       0       0       0       0       0
  3108 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3110 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3111 ;;Total ram usage:        6 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		_fround
  3117 ;;		_scale
  3118 ;;		_sprintf
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text5
  3123  002448                     __ptext5:
  3124                           	opt stack 0
  3125  002448                     ___wmul:
  3126                           	opt stack 28
  3127                           
  3128                           ;incstack = 0
  3129  002448  500F               	movf	___wmul@multiplier,w,c
  3130  00244A  0211               	mulwf	___wmul@multiplicand,c
  3131  00244C  CFF3 F013          	movff	prodl,___wmul@product
  3132  002450  CFF4 F014          	movff	prodh,___wmul@product+1
  3133  002454  500F               	movf	___wmul@multiplier,w,c
  3134  002456  0212               	mulwf	___wmul@multiplicand+1,c
  3135  002458  50F3               	movf	prodl,w,c
  3136  00245A  2614               	addwf	___wmul@product+1,f,c
  3137  00245C  5010               	movf	___wmul@multiplier+1,w,c
  3138  00245E  0211               	mulwf	___wmul@multiplicand,c
  3139  002460  50F3               	movf	prodl,w,c
  3140  002462  2614               	addwf	___wmul@product+1,f,c
  3141  002464  C013  F00F         	movff	___wmul@product,?___wmul
  3142  002468  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3143  00246C  0012               	return	
  3144  00246E                     __end_of___wmul:
  3145                           	opt stack 0
  3146                           tblptru	equ	0xFF8
  3147                           tblptrh	equ	0xFF7
  3148                           tblptrl	equ	0xFF6
  3149                           tablat	equ	0xFF5
  3150                           prodh	equ	0xFF4
  3151                           prodl	equ	0xFF3
  3152                           postinc0	equ	0xFEE
  3153                           wreg	equ	0xFE8
  3154                           indf2	equ	0xFDF
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function ___ftmul *****************
  3162 ;; Defined at:
  3163 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  f1              3   20[COMRAM] float 
  3166 ;;  f2              3   23[COMRAM] float 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3169 ;;  sign            1   34[COMRAM] unsigned char 
  3170 ;;  cntr            1   33[COMRAM] unsigned char 
  3171 ;;  exp             1   29[COMRAM] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  3   20[COMRAM] float 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3181 ;;      Params:         6       0       0       0       0       0       0       0       0
  3182 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3183 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3184 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3185 ;;Total ram usage:       15 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    1
  3188 ;; This function calls:
  3189 ;;		___ftpack
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;;		_fround
  3193 ;;		_scale
  3194 ;;		_sprintf
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text6
  3199  001B80                     __ptext6:
  3200                           	opt stack 0
  3201  001B80                     ___ftmul:
  3202                           	opt stack 27
  3203                           
  3204                           ;incstack = 0
  3205  001B80  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3206  001B84  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3207  001B86  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3208  001B88  3416               	rlcf	___ftmul@f1+1,w,c
  3209  001B8A  361B               	rlcf	??___ftmul& (0+255),f,c
  3210  001B8C  E301               	bnc	u1861
  3211  001B8E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3212  001B90                     u1861:
  3213  001B90  501B               	movf	??___ftmul,w,c
  3214  001B92  6E1E               	movwf	___ftmul@exp,c
  3215  001B94  501E               	movf	___ftmul@exp,w,c
  3216  001B96  A4D8               	btfss	status,2,c
  3217  001B98  D007               	goto	l593
  3218  001B9A  0E00               	movlw	0
  3219  001B9C  6E15               	movwf	?___ftmul,c
  3220  001B9E  0E00               	movlw	0
  3221  001BA0  6E16               	movwf	?___ftmul+1,c
  3222  001BA2  0E00               	movlw	0
  3223  001BA4  6E17               	movwf	?___ftmul+2,c
  3224  001BA6  0012               	return	
  3225  001BA8                     l593:
  3226  001BA8  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3227  001BAC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3228  001BAE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3229  001BB0  3419               	rlcf	___ftmul@f2+1,w,c
  3230  001BB2  361B               	rlcf	??___ftmul& (0+255),f,c
  3231  001BB4  E301               	bnc	u1881
  3232  001BB6  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3233  001BB8                     u1881:
  3234  001BB8  501B               	movf	??___ftmul,w,c
  3235  001BBA  6E23               	movwf	___ftmul@sign,c
  3236  001BBC  5023               	movf	___ftmul@sign,w,c
  3237  001BBE  A4D8               	btfss	status,2,c
  3238  001BC0  D007               	goto	l595
  3239  001BC2  0E00               	movlw	0
  3240  001BC4  6E15               	movwf	?___ftmul,c
  3241  001BC6  0E00               	movlw	0
  3242  001BC8  6E16               	movwf	?___ftmul+1,c
  3243  001BCA  0E00               	movlw	0
  3244  001BCC  6E17               	movwf	?___ftmul+2,c
  3245  001BCE  0012               	return	
  3246  001BD0                     l595:
  3247  001BD0  5023               	movf	___ftmul@sign,w,c
  3248  001BD2  0F7B               	addlw	123
  3249  001BD4  261E               	addwf	___ftmul@exp,f,c
  3250  001BD6  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3251  001BDA  501A               	movf	___ftmul@f2+2,w,c
  3252  001BDC  1A23               	xorwf	___ftmul@sign,f,c
  3253  001BDE  0E80               	movlw	128
  3254  001BE0  1623               	andwf	___ftmul@sign,f,c
  3255  001BE2  8E16               	bsf	___ftmul@f1+1,7,c
  3256  001BE4  8E19               	bsf	___ftmul@f2+1,7,c
  3257  001BE6  0EFF               	movlw	255
  3258  001BE8  1618               	andwf	___ftmul@f2,f,c
  3259  001BEA  0EFF               	movlw	255
  3260  001BEC  1619               	andwf	___ftmul@f2+1,f,c
  3261  001BEE  0E00               	movlw	0
  3262  001BF0  161A               	andwf	___ftmul@f2+2,f,c
  3263  001BF2  0E00               	movlw	0
  3264  001BF4  6E1F               	movwf	___ftmul@f3_as_product,c
  3265  001BF6  0E00               	movlw	0
  3266  001BF8  6E20               	movwf	___ftmul@f3_as_product+1,c
  3267  001BFA  0E00               	movlw	0
  3268  001BFC  6E21               	movwf	___ftmul@f3_as_product+2,c
  3269  001BFE  0E07               	movlw	7
  3270  001C00  6E22               	movwf	___ftmul@cntr,c
  3271  001C02  A015               	btfss	___ftmul@f1,0,c
  3272  001C04  D006               	goto	l597
  3273  001C06  5018               	movf	___ftmul@f2,w,c
  3274  001C08  261F               	addwf	___ftmul@f3_as_product,f,c
  3275  001C0A  5019               	movf	___ftmul@f2+1,w,c
  3276  001C0C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3277  001C0E  501A               	movf	___ftmul@f2+2,w,c
  3278  001C10  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3279  001C12                     l597:
  3280  001C12  90D8               	bcf	status,0,c
  3281  001C14  3217               	rrcf	___ftmul@f1+2,f,c
  3282  001C16  3216               	rrcf	___ftmul@f1+1,f,c
  3283  001C18  3215               	rrcf	___ftmul@f1,f,c
  3284  001C1A  90D8               	bcf	status,0,c
  3285  001C1C  3618               	rlcf	___ftmul@f2,f,c
  3286  001C1E  3619               	rlcf	___ftmul@f2+1,f,c
  3287  001C20  361A               	rlcf	___ftmul@f2+2,f,c
  3288  001C22  2E22               	decfsz	___ftmul@cntr,f,c
  3289  001C24  D7EE               	goto	l596
  3290  001C26  0E09               	movlw	9
  3291  001C28  6E22               	movwf	___ftmul@cntr,c
  3292  001C2A  A015               	btfss	___ftmul@f1,0,c
  3293  001C2C  D006               	goto	l600
  3294  001C2E  5018               	movf	___ftmul@f2,w,c
  3295  001C30  261F               	addwf	___ftmul@f3_as_product,f,c
  3296  001C32  5019               	movf	___ftmul@f2+1,w,c
  3297  001C34  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3298  001C36  501A               	movf	___ftmul@f2+2,w,c
  3299  001C38  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3300  001C3A                     l600:
  3301  001C3A  90D8               	bcf	status,0,c
  3302  001C3C  3217               	rrcf	___ftmul@f1+2,f,c
  3303  001C3E  3216               	rrcf	___ftmul@f1+1,f,c
  3304  001C40  3215               	rrcf	___ftmul@f1,f,c
  3305  001C42  90D8               	bcf	status,0,c
  3306  001C44  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3307  001C46  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3308  001C48  321F               	rrcf	___ftmul@f3_as_product,f,c
  3309  001C4A  2E22               	decfsz	___ftmul@cntr,f,c
  3310  001C4C  D7EE               	goto	l599
  3311  001C4E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3312  001C52  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3313  001C56  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3314  001C5A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3315  001C5E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3316  001C62  EC27  F00F         	call	___ftpack	;wreg free
  3317  001C66  C001  F015         	movff	?___ftpack,?___ftmul
  3318  001C6A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3319  001C6E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3320  001C72  0012               	return	
  3321  001C74                     __end_of___ftmul:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           indf2	equ	0xFDF
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function ___awmod *****************
  3339 ;; Defined at:
  3340 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  dividend        2    0[COMRAM] int 
  3343 ;;  divisor         2    2[COMRAM] int 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  sign            1    5[COMRAM] unsigned char 
  3346 ;;  counter         1    4[COMRAM] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  2    0[COMRAM] int 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3356 ;;      Params:         4       0       0       0       0       0       0       0       0
  3357 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3359 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3360 ;;Total ram usage:        6 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_fround
  3366 ;;		_scale
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text7
  3371  002136                     __ptext7:
  3372                           	opt stack 0
  3373  002136                     ___awmod:
  3374                           	opt stack 28
  3375                           
  3376                           ;incstack = 0
  3377  002136  0E00               	movlw	0
  3378  002138  6E06               	movwf	___awmod@sign,c
  3379  00213A  AE02               	btfss	___awmod@dividend+1,7,c
  3380  00213C  D006               	goto	l446
  3381  00213E  6C01               	negf	___awmod@dividend,c
  3382  002140  1E02               	comf	___awmod@dividend+1,f,c
  3383  002142  B0D8               	btfsc	status,0,c
  3384  002144  2A02               	incf	___awmod@dividend+1,f,c
  3385  002146  0E01               	movlw	1
  3386  002148  6E06               	movwf	___awmod@sign,c
  3387  00214A                     l446:
  3388  00214A  AE04               	btfss	___awmod@divisor+1,7,c
  3389  00214C  D004               	goto	l447
  3390  00214E  6C03               	negf	___awmod@divisor,c
  3391  002150  1E04               	comf	___awmod@divisor+1,f,c
  3392  002152  B0D8               	btfsc	status,0,c
  3393  002154  2A04               	incf	___awmod@divisor+1,f,c
  3394  002156                     l447:
  3395  002156  5003               	movf	___awmod@divisor,w,c
  3396  002158  1004               	iorwf	___awmod@divisor+1,w,c
  3397  00215A  B4D8               	btfsc	status,2,c
  3398  00215C  D018               	goto	l454
  3399  00215E  0E01               	movlw	1
  3400  002160  6E05               	movwf	___awmod@counter,c
  3401  002162  D004               	goto	l449
  3402  002164  90D8               	bcf	status,0,c
  3403  002166  3603               	rlcf	___awmod@divisor,f,c
  3404  002168  3604               	rlcf	___awmod@divisor+1,f,c
  3405  00216A  2A05               	incf	___awmod@counter,f,c
  3406  00216C                     l449:
  3407  00216C  AE04               	btfss	___awmod@divisor+1,7,c
  3408  00216E  D7FA               	goto	l450
  3409  002170                     u2010:
  3410  002170  5003               	movf	___awmod@divisor,w,c
  3411  002172  5C01               	subwf	___awmod@dividend,w,c
  3412  002174  5004               	movf	___awmod@divisor+1,w,c
  3413  002176  5802               	subwfb	___awmod@dividend+1,w,c
  3414  002178  A0D8               	btfss	status,0,c
  3415  00217A  D004               	goto	l453
  3416  00217C  5003               	movf	___awmod@divisor,w,c
  3417  00217E  5E01               	subwf	___awmod@dividend,f,c
  3418  002180  5004               	movf	___awmod@divisor+1,w,c
  3419  002182  5A02               	subwfb	___awmod@dividend+1,f,c
  3420  002184                     l453:
  3421  002184  90D8               	bcf	status,0,c
  3422  002186  3204               	rrcf	___awmod@divisor+1,f,c
  3423  002188  3203               	rrcf	___awmod@divisor,f,c
  3424  00218A  2E05               	decfsz	___awmod@counter,f,c
  3425  00218C  D7F1               	goto	u2010
  3426  00218E                     l454:
  3427  00218E  5006               	movf	___awmod@sign,w,c
  3428  002190  B4D8               	btfsc	status,2,c
  3429  002192  D004               	goto	l455
  3430  002194  6C01               	negf	___awmod@dividend,c
  3431  002196  1E02               	comf	___awmod@dividend+1,f,c
  3432  002198  B0D8               	btfsc	status,0,c
  3433  00219A  2A02               	incf	___awmod@dividend+1,f,c
  3434  00219C                     l455:
  3435  00219C  C001  F001         	movff	___awmod@dividend,?___awmod
  3436  0021A0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3437  0021A4  0012               	return	
  3438  0021A6                     __end_of___awmod:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           indf2	equ	0xFDF
  3449                           postinc2	equ	0xFDE
  3450                           postdec2	equ	0xFDD
  3451                           fsr2h	equ	0xFDA
  3452                           fsr2l	equ	0xFD9
  3453                           status	equ	0xFD8
  3454                           
  3455 ;; *************** function ___awdiv *****************
  3456 ;; Defined at:
  3457 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  dividend        2    6[COMRAM] int 
  3460 ;;  divisor         2    8[COMRAM] int 
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  quotient        2   12[COMRAM] int 
  3463 ;;  sign            1   11[COMRAM] unsigned char 
  3464 ;;  counter         1   10[COMRAM] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  2    6[COMRAM] int 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3474 ;;      Params:         4       0       0       0       0       0       0       0       0
  3475 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3477 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3478 ;;Total ram usage:        8 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_fround
  3484 ;;		_scale
  3485 ;;		_sprintf
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text8
  3490  002030                     __ptext8:
  3491                           	opt stack 0
  3492  002030                     ___awdiv:
  3493                           	opt stack 28
  3494                           
  3495                           ;incstack = 0
  3496  002030  0E00               	movlw	0
  3497  002032  6E0C               	movwf	___awdiv@sign,c
  3498  002034  AE0A               	btfss	___awdiv@divisor+1,7,c
  3499  002036  D006               	goto	l433
  3500  002038  6C09               	negf	___awdiv@divisor,c
  3501  00203A  1E0A               	comf	___awdiv@divisor+1,f,c
  3502  00203C  B0D8               	btfsc	status,0,c
  3503  00203E  2A0A               	incf	___awdiv@divisor+1,f,c
  3504  002040  0E01               	movlw	1
  3505  002042  6E0C               	movwf	___awdiv@sign,c
  3506  002044                     l433:
  3507  002044  AE08               	btfss	___awdiv@dividend+1,7,c
  3508  002046  D006               	goto	l434
  3509  002048  6C07               	negf	___awdiv@dividend,c
  3510  00204A  1E08               	comf	___awdiv@dividend+1,f,c
  3511  00204C  B0D8               	btfsc	status,0,c
  3512  00204E  2A08               	incf	___awdiv@dividend+1,f,c
  3513  002050  0E01               	movlw	1
  3514  002052  1A0C               	xorwf	___awdiv@sign,f,c
  3515  002054                     l434:
  3516  002054  0E00               	movlw	0
  3517  002056  6E0E               	movwf	___awdiv@quotient+1,c
  3518  002058  0E00               	movlw	0
  3519  00205A  6E0D               	movwf	___awdiv@quotient,c
  3520  00205C  5009               	movf	___awdiv@divisor,w,c
  3521  00205E  100A               	iorwf	___awdiv@divisor+1,w,c
  3522  002060  B4D8               	btfsc	status,2,c
  3523  002062  D01C               	goto	l441
  3524  002064  0E01               	movlw	1
  3525  002066  6E0B               	movwf	___awdiv@counter,c
  3526  002068  D004               	goto	l436
  3527  00206A  90D8               	bcf	status,0,c
  3528  00206C  3609               	rlcf	___awdiv@divisor,f,c
  3529  00206E  360A               	rlcf	___awdiv@divisor+1,f,c
  3530  002070  2A0B               	incf	___awdiv@counter,f,c
  3531  002072                     l436:
  3532  002072  AE0A               	btfss	___awdiv@divisor+1,7,c
  3533  002074  D7FA               	goto	l437
  3534  002076                     u1950:
  3535  002076  90D8               	bcf	status,0,c
  3536  002078  360D               	rlcf	___awdiv@quotient,f,c
  3537  00207A  360E               	rlcf	___awdiv@quotient+1,f,c
  3538  00207C  5009               	movf	___awdiv@divisor,w,c
  3539  00207E  5C07               	subwf	___awdiv@dividend,w,c
  3540  002080  500A               	movf	___awdiv@divisor+1,w,c
  3541  002082  5808               	subwfb	___awdiv@dividend+1,w,c
  3542  002084  A0D8               	btfss	status,0,c
  3543  002086  D005               	goto	l440
  3544  002088  5009               	movf	___awdiv@divisor,w,c
  3545  00208A  5E07               	subwf	___awdiv@dividend,f,c
  3546  00208C  500A               	movf	___awdiv@divisor+1,w,c
  3547  00208E  5A08               	subwfb	___awdiv@dividend+1,f,c
  3548  002090  800D               	bsf	___awdiv@quotient,0,c
  3549  002092                     l440:
  3550  002092  90D8               	bcf	status,0,c
  3551  002094  320A               	rrcf	___awdiv@divisor+1,f,c
  3552  002096  3209               	rrcf	___awdiv@divisor,f,c
  3553  002098  2E0B               	decfsz	___awdiv@counter,f,c
  3554  00209A  D7ED               	goto	u1950
  3555  00209C                     l441:
  3556  00209C  500C               	movf	___awdiv@sign,w,c
  3557  00209E  B4D8               	btfsc	status,2,c
  3558  0020A0  D004               	goto	l442
  3559  0020A2  6C0D               	negf	___awdiv@quotient,c
  3560  0020A4  1E0E               	comf	___awdiv@quotient+1,f,c
  3561  0020A6  B0D8               	btfsc	status,0,c
  3562  0020A8  2A0E               	incf	___awdiv@quotient+1,f,c
  3563  0020AA                     l442:
  3564  0020AA  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3565  0020AE  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3566  0020B2  0012               	return	
  3567  0020B4                     __end_of___awdiv:
  3568                           	opt stack 0
  3569                           tblptru	equ	0xFF8
  3570                           tblptrh	equ	0xFF7
  3571                           tblptrl	equ	0xFF6
  3572                           tablat	equ	0xFF5
  3573                           prodh	equ	0xFF4
  3574                           prodl	equ	0xFF3
  3575                           postinc0	equ	0xFEE
  3576                           wreg	equ	0xFE8
  3577                           indf2	equ	0xFDF
  3578                           postinc2	equ	0xFDE
  3579                           postdec2	equ	0xFDD
  3580                           fsr2h	equ	0xFDA
  3581                           fsr2l	equ	0xFD9
  3582                           status	equ	0xFD8
  3583                           
  3584 ;; *************** function __tdiv_to_l_ *****************
  3585 ;; Defined at:
  3586 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;  f1              3    0[COMRAM] float 
  3589 ;;  f2              3    3[COMRAM] float 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  quot            4    9[COMRAM] unsigned long 
  3592 ;;  exp1            1   14[COMRAM] unsigned char 
  3593 ;;  cntr            1   13[COMRAM] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  4    0[COMRAM] unsigned long 
  3596 ;; Registers used:
  3597 ;;		wreg, status,2, status,0
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3603 ;;      Params:         6       0       0       0       0       0       0       0       0
  3604 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3605 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3606 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3607 ;;Total ram usage:       15 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_sprintf
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text9
  3617  001926                     __ptext9:
  3618                           	opt stack 0
  3619  001926                     __tdiv_to_l_:
  3620                           	opt stack 29
  3621                           
  3622                           ;incstack = 0
  3623  001926  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3624  00192A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3625  00192C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3626  00192E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3627  001930  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3628  001932  E301               	bnc	u2211
  3629  001934  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3630  001936                     u2211:
  3631  001936  5007               	movf	??__tdiv_to_l_,w,c
  3632  001938  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3633  00193A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3634  00193C  A4D8               	btfss	status,2,c
  3635  00193E  D009               	goto	l569
  3636  001940  0E00               	movlw	0
  3637  001942  6E01               	movwf	?__tdiv_to_l_,c
  3638  001944  0E00               	movlw	0
  3639  001946  6E02               	movwf	?__tdiv_to_l_+1,c
  3640  001948  0E00               	movlw	0
  3641  00194A  6E03               	movwf	?__tdiv_to_l_+2,c
  3642  00194C  0E00               	movlw	0
  3643  00194E  6E04               	movwf	?__tdiv_to_l_+3,c
  3644  001950  0012               	return	
  3645  001952                     l569:
  3646  001952  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3647  001956  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3648  001958  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3649  00195A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3650  00195C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3651  00195E  E301               	bnc	u2231
  3652  001960  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3653  001962                     u2231:
  3654  001962  5007               	movf	??__tdiv_to_l_,w,c
  3655  001964  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3656  001966  500E               	movf	__tdiv_to_l_@cntr,w,c
  3657  001968  A4D8               	btfss	status,2,c
  3658  00196A  D009               	goto	l571
  3659  00196C  0E00               	movlw	0
  3660  00196E  6E01               	movwf	?__tdiv_to_l_,c
  3661  001970  0E00               	movlw	0
  3662  001972  6E02               	movwf	?__tdiv_to_l_+1,c
  3663  001974  0E00               	movlw	0
  3664  001976  6E03               	movwf	?__tdiv_to_l_+2,c
  3665  001978  0E00               	movlw	0
  3666  00197A  6E04               	movwf	?__tdiv_to_l_+3,c
  3667  00197C  0012               	return	
  3668  00197E                     l571:
  3669  00197E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3670  001980  0EFF               	movlw	255
  3671  001982  1601               	andwf	__tdiv_to_l_@f1,f,c
  3672  001984  0EFF               	movlw	255
  3673  001986  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3674  001988  0E00               	movlw	0
  3675  00198A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3676  00198C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3677  00198E  0EFF               	movlw	255
  3678  001990  1604               	andwf	__tdiv_to_l_@f2,f,c
  3679  001992  0EFF               	movlw	255
  3680  001994  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3681  001996  0E00               	movlw	0
  3682  001998  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3683  00199A  0E00               	movlw	0
  3684  00199C  6E0A               	movwf	__tdiv_to_l_@quot,c
  3685  00199E  0E00               	movlw	0
  3686  0019A0  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3687  0019A2  0E00               	movlw	0
  3688  0019A4  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3689  0019A6  0E00               	movlw	0
  3690  0019A8  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3691  0019AA  0E7F               	movlw	127
  3692  0019AC  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3693  0019AE  500E               	movf	__tdiv_to_l_@cntr,w,c
  3694  0019B0  0F98               	addlw	152
  3695  0019B2  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3696  0019B4  0E18               	movlw	24
  3697  0019B6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3698  0019B8                     l572:
  3699  0019B8  90D8               	bcf	status,0,c
  3700  0019BA  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3701  0019BC  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3702  0019BE  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3703  0019C0  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3704  0019C2  5004               	movf	__tdiv_to_l_@f2,w,c
  3705  0019C4  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3706  0019C6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3707  0019C8  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3708  0019CA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3709  0019CC  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3710  0019CE  A0D8               	btfss	status,0,c
  3711  0019D0  D007               	goto	l573
  3712  0019D2  5004               	movf	__tdiv_to_l_@f2,w,c
  3713  0019D4  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3714  0019D6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3715  0019D8  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3716  0019DA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3717  0019DC  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3718  0019DE  800A               	bsf	__tdiv_to_l_@quot,0,c
  3719  0019E0                     l573:
  3720  0019E0  90D8               	bcf	status,0,c
  3721  0019E2  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3722  0019E4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3723  0019E6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3724  0019E8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3725  0019EA  D7E6               	goto	l572
  3726  0019EC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3727  0019EE  D016               	goto	l575
  3728  0019F0  500F               	movf	__tdiv_to_l_@exp1,w,c
  3729  0019F2  0A80               	xorlw	128
  3730  0019F4  0F97               	addlw	151
  3731  0019F6  B0D8               	btfsc	status,0,c
  3732  0019F8  D009               	goto	l576
  3733  0019FA  0E00               	movlw	0
  3734  0019FC  6E01               	movwf	?__tdiv_to_l_,c
  3735  0019FE  0E00               	movlw	0
  3736  001A00  6E02               	movwf	?__tdiv_to_l_+1,c
  3737  001A02  0E00               	movlw	0
  3738  001A04  6E03               	movwf	?__tdiv_to_l_+2,c
  3739  001A06  0E00               	movlw	0
  3740  001A08  6E04               	movwf	?__tdiv_to_l_+3,c
  3741  001A0A  0012               	return	
  3742  001A0C                     l576:
  3743  001A0C  90D8               	bcf	status,0,c
  3744  001A0E  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3745  001A10  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3746  001A12  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3747  001A14  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3748  001A16  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3749  001A18  D7F9               	goto	l576
  3750  001A1A  D015               	goto	u2290
  3751  001A1C                     l575:
  3752  001A1C  0E17               	movlw	23
  3753  001A1E  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3754  001A20  D00F               	goto	l581
  3755  001A22  0E00               	movlw	0
  3756  001A24  6E01               	movwf	?__tdiv_to_l_,c
  3757  001A26  0E00               	movlw	0
  3758  001A28  6E02               	movwf	?__tdiv_to_l_+1,c
  3759  001A2A  0E00               	movlw	0
  3760  001A2C  6E03               	movwf	?__tdiv_to_l_+2,c
  3761  001A2E  0E00               	movlw	0
  3762  001A30  6E04               	movwf	?__tdiv_to_l_+3,c
  3763  001A32  0012               	return	
  3764  001A34  90D8               	bcf	status,0,c
  3765  001A36  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3766  001A38  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3767  001A3A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3768  001A3C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3769  001A3E  060F               	decf	__tdiv_to_l_@exp1,f,c
  3770  001A40                     l581:
  3771  001A40  500F               	movf	__tdiv_to_l_@exp1,w,c
  3772  001A42  A4D8               	btfss	status,2,c
  3773  001A44  D7F7               	goto	l582
  3774  001A46                     u2290:
  3775  001A46  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3776  001A4A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3777  001A4E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3778  001A52  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3779  001A56  0012               	return		;funcret
  3780  001A58                     __end_of__tdiv_to_l_:
  3781                           	opt stack 0
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           postinc0	equ	0xFEE
  3789                           wreg	equ	0xFE8
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function __div_to_l_ *****************
  3798 ;; Defined at:
  3799 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  f1              3    0[COMRAM] unsigned long 
  3802 ;;  f2              3    3[COMRAM] unsigned long 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  quot            4    6[COMRAM] unsigned long 
  3805 ;;  exp1            1   11[COMRAM] unsigned char 
  3806 ;;  cntr            1   10[COMRAM] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  4    0[COMRAM] unsigned long 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, status,0
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3816 ;;      Params:         6       0       0       0       0       0       0       0       0
  3817 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3819 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3820 ;;Total ram usage:       12 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_sprintf
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text10
  3830  001A58                     __ptext10:
  3831                           	opt stack 0
  3832  001A58                     __div_to_l_:
  3833                           	opt stack 29
  3834                           
  3835                           ;incstack = 0
  3836  001A58  3403               	rlcf	__div_to_l_@f1+2,w,c
  3837  001A5A  3404               	rlcf	__div_to_l_@f1+3,w,c
  3838  001A5C  6E0C               	movwf	__div_to_l_@exp1,c
  3839  001A5E  500C               	movf	__div_to_l_@exp1,w,c
  3840  001A60  A4D8               	btfss	status,2,c
  3841  001A62  D009               	goto	l465
  3842  001A64  0E00               	movlw	0
  3843  001A66  6E01               	movwf	?__div_to_l_,c
  3844  001A68  0E00               	movlw	0
  3845  001A6A  6E02               	movwf	?__div_to_l_+1,c
  3846  001A6C  0E00               	movlw	0
  3847  001A6E  6E03               	movwf	?__div_to_l_+2,c
  3848  001A70  0E00               	movlw	0
  3849  001A72  6E04               	movwf	?__div_to_l_+3,c
  3850  001A74  0012               	return	
  3851  001A76                     l465:
  3852  001A76  3406               	rlcf	__div_to_l_@f2+2,w,c
  3853  001A78  3407               	rlcf	__div_to_l_@f2+3,w,c
  3854  001A7A  6E0B               	movwf	__div_to_l_@cntr,c
  3855  001A7C  500B               	movf	__div_to_l_@cntr,w,c
  3856  001A7E  A4D8               	btfss	status,2,c
  3857  001A80  D009               	goto	l467
  3858  001A82  0E00               	movlw	0
  3859  001A84  6E01               	movwf	?__div_to_l_,c
  3860  001A86  0E00               	movlw	0
  3861  001A88  6E02               	movwf	?__div_to_l_+1,c
  3862  001A8A  0E00               	movlw	0
  3863  001A8C  6E03               	movwf	?__div_to_l_+2,c
  3864  001A8E  0E00               	movlw	0
  3865  001A90  6E04               	movwf	?__div_to_l_+3,c
  3866  001A92  0012               	return	
  3867  001A94                     l467:
  3868  001A94  8E03               	bsf	__div_to_l_@f1+2,7,c
  3869  001A96  0EFF               	movlw	255
  3870  001A98  1601               	andwf	__div_to_l_@f1,f,c
  3871  001A9A  0EFF               	movlw	255
  3872  001A9C  1602               	andwf	__div_to_l_@f1+1,f,c
  3873  001A9E  0EFF               	movlw	255
  3874  001AA0  1603               	andwf	__div_to_l_@f1+2,f,c
  3875  001AA2  0E00               	movlw	0
  3876  001AA4  1604               	andwf	__div_to_l_@f1+3,f,c
  3877  001AA6  8E06               	bsf	__div_to_l_@f2+2,7,c
  3878  001AA8  0EFF               	movlw	255
  3879  001AAA  1604               	andwf	__div_to_l_@f2,f,c
  3880  001AAC  0EFF               	movlw	255
  3881  001AAE  1605               	andwf	__div_to_l_@f2+1,f,c
  3882  001AB0  0EFF               	movlw	255
  3883  001AB2  1606               	andwf	__div_to_l_@f2+2,f,c
  3884  001AB4  0E00               	movlw	0
  3885  001AB6  1607               	andwf	__div_to_l_@f2+3,f,c
  3886  001AB8  0E00               	movlw	0
  3887  001ABA  6E07               	movwf	__div_to_l_@quot,c
  3888  001ABC  0E00               	movlw	0
  3889  001ABE  6E08               	movwf	__div_to_l_@quot+1,c
  3890  001AC0  0E00               	movlw	0
  3891  001AC2  6E09               	movwf	__div_to_l_@quot+2,c
  3892  001AC4  0E00               	movlw	0
  3893  001AC6  6E0A               	movwf	__div_to_l_@quot+3,c
  3894  001AC8  0E7F               	movlw	127
  3895  001ACA  5E0C               	subwf	__div_to_l_@exp1,f,c
  3896  001ACC  500B               	movf	__div_to_l_@cntr,w,c
  3897  001ACE  0FA0               	addlw	160
  3898  001AD0  5E0C               	subwf	__div_to_l_@exp1,f,c
  3899  001AD2  0E20               	movlw	32
  3900  001AD4  6E0B               	movwf	__div_to_l_@cntr,c
  3901  001AD6  90D8               	bcf	status,0,c
  3902  001AD8  3607               	rlcf	__div_to_l_@quot,f,c
  3903  001ADA  3608               	rlcf	__div_to_l_@quot+1,f,c
  3904  001ADC  3609               	rlcf	__div_to_l_@quot+2,f,c
  3905  001ADE  360A               	rlcf	__div_to_l_@quot+3,f,c
  3906  001AE0  5004               	movf	__div_to_l_@f2,w,c
  3907  001AE2  5C01               	subwf	__div_to_l_@f1,w,c
  3908  001AE4  5005               	movf	__div_to_l_@f2+1,w,c
  3909  001AE6  5802               	subwfb	__div_to_l_@f1+1,w,c
  3910  001AE8  5006               	movf	__div_to_l_@f2+2,w,c
  3911  001AEA  5803               	subwfb	__div_to_l_@f1+2,w,c
  3912  001AEC  5007               	movf	__div_to_l_@f2+3,w,c
  3913  001AEE  5804               	subwfb	__div_to_l_@f1+3,w,c
  3914  001AF0  A0D8               	btfss	status,0,c
  3915  001AF2  D009               	goto	l469
  3916  001AF4  5004               	movf	__div_to_l_@f2,w,c
  3917  001AF6  5E01               	subwf	__div_to_l_@f1,f,c
  3918  001AF8  5005               	movf	__div_to_l_@f2+1,w,c
  3919  001AFA  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3920  001AFC  5006               	movf	__div_to_l_@f2+2,w,c
  3921  001AFE  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3922  001B00  5007               	movf	__div_to_l_@f2+3,w,c
  3923  001B02  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3924  001B04  8007               	bsf	__div_to_l_@quot,0,c
  3925  001B06                     l469:
  3926  001B06  90D8               	bcf	status,0,c
  3927  001B08  3601               	rlcf	__div_to_l_@f1,f,c
  3928  001B0A  3602               	rlcf	__div_to_l_@f1+1,f,c
  3929  001B0C  3603               	rlcf	__div_to_l_@f1+2,f,c
  3930  001B0E  3604               	rlcf	__div_to_l_@f1+3,f,c
  3931  001B10  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3932  001B12  D7E1               	goto	l468
  3933  001B14  AE0C               	btfss	__div_to_l_@exp1,7,c
  3934  001B16  D016               	goto	l471
  3935  001B18  500C               	movf	__div_to_l_@exp1,w,c
  3936  001B1A  0A80               	xorlw	128
  3937  001B1C  0F9F               	addlw	159
  3938  001B1E  B0D8               	btfsc	status,0,c
  3939  001B20  D009               	goto	l472
  3940  001B22  0E00               	movlw	0
  3941  001B24  6E01               	movwf	?__div_to_l_,c
  3942  001B26  0E00               	movlw	0
  3943  001B28  6E02               	movwf	?__div_to_l_+1,c
  3944  001B2A  0E00               	movlw	0
  3945  001B2C  6E03               	movwf	?__div_to_l_+2,c
  3946  001B2E  0E00               	movlw	0
  3947  001B30  6E04               	movwf	?__div_to_l_+3,c
  3948  001B32  0012               	return	
  3949  001B34                     l472:
  3950  001B34  90D8               	bcf	status,0,c
  3951  001B36  320A               	rrcf	__div_to_l_@quot+3,f,c
  3952  001B38  3209               	rrcf	__div_to_l_@quot+2,f,c
  3953  001B3A  3208               	rrcf	__div_to_l_@quot+1,f,c
  3954  001B3C  3207               	rrcf	__div_to_l_@quot,f,c
  3955  001B3E  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3956  001B40  D7F9               	goto	l472
  3957  001B42  D015               	goto	u2360
  3958  001B44                     l471:
  3959  001B44  0E1F               	movlw	31
  3960  001B46  640C               	cpfsgt	__div_to_l_@exp1,c
  3961  001B48  D00F               	goto	l477
  3962  001B4A  0E00               	movlw	0
  3963  001B4C  6E01               	movwf	?__div_to_l_,c
  3964  001B4E  0E00               	movlw	0
  3965  001B50  6E02               	movwf	?__div_to_l_+1,c
  3966  001B52  0E00               	movlw	0
  3967  001B54  6E03               	movwf	?__div_to_l_+2,c
  3968  001B56  0E00               	movlw	0
  3969  001B58  6E04               	movwf	?__div_to_l_+3,c
  3970  001B5A  0012               	return	
  3971  001B5C  90D8               	bcf	status,0,c
  3972  001B5E  3607               	rlcf	__div_to_l_@quot,f,c
  3973  001B60  3608               	rlcf	__div_to_l_@quot+1,f,c
  3974  001B62  3609               	rlcf	__div_to_l_@quot+2,f,c
  3975  001B64  360A               	rlcf	__div_to_l_@quot+3,f,c
  3976  001B66  060C               	decf	__div_to_l_@exp1,f,c
  3977  001B68                     l477:
  3978  001B68  500C               	movf	__div_to_l_@exp1,w,c
  3979  001B6A  A4D8               	btfss	status,2,c
  3980  001B6C  D7F7               	goto	l478
  3981  001B6E                     u2360:
  3982  001B6E  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3983  001B72  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3984  001B76  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3985  001B7A  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3986  001B7E  0012               	return		;funcret
  3987  001B80                     __end_of__div_to_l_:
  3988                           	opt stack 0
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodh	equ	0xFF4
  3994                           prodl	equ	0xFF3
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function ___lltoft *****************
  4005 ;; Defined at:
  4006 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  c               4    8[COMRAM] unsigned long 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  exp             1   16[COMRAM] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  3    8[COMRAM] float 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4020 ;;      Params:         4       0       0       0       0       0       0       0       0
  4021 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4022 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4023 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4024 ;;Total ram usage:        9 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    1
  4027 ;; This function calls:
  4028 ;;		___ftpack
  4029 ;; This function is called by:
  4030 ;;		_sprintf
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text11
  4035  00220C                     __ptext11:
  4036                           	opt stack 0
  4037  00220C                     ___lltoft:
  4038                           	opt stack 28
  4039                           
  4040                           ;incstack = 0
  4041  00220C  0E8E               	movlw	142
  4042  00220E  6E11               	movwf	___lltoft@exp,c
  4043  002210  D006               	goto	l676
  4044  002212  90D8               	bcf	status,0,c
  4045  002214  320C               	rrcf	___lltoft@c+3,f,c
  4046  002216  320B               	rrcf	___lltoft@c+2,f,c
  4047  002218  320A               	rrcf	___lltoft@c+1,f,c
  4048  00221A  3209               	rrcf	___lltoft@c,f,c
  4049  00221C  2A11               	incf	___lltoft@exp,f,c
  4050  00221E                     l676:
  4051  00221E  0E00               	movlw	0
  4052  002220  1409               	andwf	___lltoft@c,w,c
  4053  002222  6E0D               	movwf	??___lltoft& (0+255),c
  4054  002224  0E00               	movlw	0
  4055  002226  140A               	andwf	___lltoft@c+1,w,c
  4056  002228  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4057  00222A  0E00               	movlw	0
  4058  00222C  140B               	andwf	___lltoft@c+2,w,c
  4059  00222E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4060  002230  0EFF               	movlw	255
  4061  002232  140C               	andwf	___lltoft@c+3,w,c
  4062  002234  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4063  002236  500D               	movf	??___lltoft,w,c
  4064  002238  100E               	iorwf	??___lltoft+1,w,c
  4065  00223A  100F               	iorwf	??___lltoft+2,w,c
  4066  00223C  1010               	iorwf	??___lltoft+3,w,c
  4067  00223E  A4D8               	btfss	status,2,c
  4068  002240  D7E8               	goto	l677
  4069  002242  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4070  002246  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4071  00224A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4072  00224E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4073  002252  0E00               	movlw	0
  4074  002254  6E05               	movwf	___ftpack@sign,c
  4075  002256  EC27  F00F         	call	___ftpack	;wreg free
  4076  00225A  C001  F009         	movff	?___ftpack,?___lltoft
  4077  00225E  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4078  002262  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4079  002266  0012               	return	
  4080  002268                     __end_of___lltoft:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           indf2	equ	0xFDF
  4091                           postinc2	equ	0xFDE
  4092                           postdec2	equ	0xFDD
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097 ;; *************** function ___llmod *****************
  4098 ;; Defined at:
  4099 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  dividend        4    0[COMRAM] unsigned long 
  4102 ;;  divisor         4    4[COMRAM] unsigned long 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  counter         1    8[COMRAM] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  4    0[COMRAM] unsigned long 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4114 ;;      Params:         8       0       0       0       0       0       0       0       0
  4115 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4117 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4118 ;;Total ram usage:        9 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_sprintf
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text12
  4128  0021A6                     __ptext12:
  4129                           	opt stack 0
  4130  0021A6                     ___llmod:
  4131                           	opt stack 29
  4132                           
  4133                           ;incstack = 0
  4134  0021A6  5005               	movf	___llmod@divisor,w,c
  4135  0021A8  1006               	iorwf	___llmod@divisor+1,w,c
  4136  0021AA  1007               	iorwf	___llmod@divisor+2,w,c
  4137  0021AC  1008               	iorwf	___llmod@divisor+3,w,c
  4138  0021AE  B4D8               	btfsc	status,2,c
  4139  0021B0  D024               	goto	l670
  4140  0021B2  0E01               	movlw	1
  4141  0021B4  6E09               	movwf	___llmod@counter,c
  4142  0021B6  D006               	goto	l665
  4143  0021B8  90D8               	bcf	status,0,c
  4144  0021BA  3605               	rlcf	___llmod@divisor,f,c
  4145  0021BC  3606               	rlcf	___llmod@divisor+1,f,c
  4146  0021BE  3607               	rlcf	___llmod@divisor+2,f,c
  4147  0021C0  3608               	rlcf	___llmod@divisor+3,f,c
  4148  0021C2  2A09               	incf	___llmod@counter,f,c
  4149  0021C4                     l665:
  4150  0021C4  AE08               	btfss	___llmod@divisor+3,7,c
  4151  0021C6  D7F8               	goto	l666
  4152  0021C8                     u2540:
  4153  0021C8  5005               	movf	___llmod@divisor,w,c
  4154  0021CA  5C01               	subwf	___llmod@dividend,w,c
  4155  0021CC  5006               	movf	___llmod@divisor+1,w,c
  4156  0021CE  5802               	subwfb	___llmod@dividend+1,w,c
  4157  0021D0  5007               	movf	___llmod@divisor+2,w,c
  4158  0021D2  5803               	subwfb	___llmod@dividend+2,w,c
  4159  0021D4  5008               	movf	___llmod@divisor+3,w,c
  4160  0021D6  5804               	subwfb	___llmod@dividend+3,w,c
  4161  0021D8  A0D8               	btfss	status,0,c
  4162  0021DA  D008               	goto	l669
  4163  0021DC  5005               	movf	___llmod@divisor,w,c
  4164  0021DE  5E01               	subwf	___llmod@dividend,f,c
  4165  0021E0  5006               	movf	___llmod@divisor+1,w,c
  4166  0021E2  5A02               	subwfb	___llmod@dividend+1,f,c
  4167  0021E4  5007               	movf	___llmod@divisor+2,w,c
  4168  0021E6  5A03               	subwfb	___llmod@dividend+2,f,c
  4169  0021E8  5008               	movf	___llmod@divisor+3,w,c
  4170  0021EA  5A04               	subwfb	___llmod@dividend+3,f,c
  4171  0021EC                     l669:
  4172  0021EC  90D8               	bcf	status,0,c
  4173  0021EE  3208               	rrcf	___llmod@divisor+3,f,c
  4174  0021F0  3207               	rrcf	___llmod@divisor+2,f,c
  4175  0021F2  3206               	rrcf	___llmod@divisor+1,f,c
  4176  0021F4  3205               	rrcf	___llmod@divisor,f,c
  4177  0021F6  2E09               	decfsz	___llmod@counter,f,c
  4178  0021F8  D7E7               	goto	u2540
  4179  0021FA                     l670:
  4180  0021FA  C001  F001         	movff	___llmod@dividend,?___llmod
  4181  0021FE  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4182  002202  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4183  002206  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4184  00220A  0012               	return		;funcret
  4185  00220C                     __end_of___llmod:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           postinc0	equ	0xFEE
  4194                           wreg	equ	0xFE8
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function ___lldiv *****************
  4203 ;; Defined at:
  4204 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  dividend        4    0[COMRAM] unsigned long 
  4207 ;;  divisor         4    4[COMRAM] unsigned long 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  quotient        4    8[COMRAM] unsigned long 
  4210 ;;  counter         1   12[COMRAM] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  4    0[COMRAM] unsigned long 
  4213 ;; Registers used:
  4214 ;;		wreg, status,2, status,0
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4220 ;;      Params:         8       0       0       0       0       0       0       0       0
  4221 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4223 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4224 ;;Total ram usage:       13 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; This function calls:
  4227 ;;		Nothing
  4228 ;; This function is called by:
  4229 ;;		_sprintf
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           	psect	text13
  4234  0020B4                     __ptext13:
  4235                           	opt stack 0
  4236  0020B4                     ___lldiv:
  4237                           	opt stack 29
  4238                           
  4239                           ;incstack = 0
  4240  0020B4  0E00               	movlw	0
  4241  0020B6  6E09               	movwf	___lldiv@quotient,c
  4242  0020B8  0E00               	movlw	0
  4243  0020BA  6E0A               	movwf	___lldiv@quotient+1,c
  4244  0020BC  0E00               	movlw	0
  4245  0020BE  6E0B               	movwf	___lldiv@quotient+2,c
  4246  0020C0  0E00               	movlw	0
  4247  0020C2  6E0C               	movwf	___lldiv@quotient+3,c
  4248  0020C4  5005               	movf	___lldiv@divisor,w,c
  4249  0020C6  1006               	iorwf	___lldiv@divisor+1,w,c
  4250  0020C8  1007               	iorwf	___lldiv@divisor+2,w,c
  4251  0020CA  1008               	iorwf	___lldiv@divisor+3,w,c
  4252  0020CC  B4D8               	btfsc	status,2,c
  4253  0020CE  D02A               	goto	l660
  4254  0020D0  0E01               	movlw	1
  4255  0020D2  6E0D               	movwf	___lldiv@counter,c
  4256  0020D4  D006               	goto	l655
  4257  0020D6  90D8               	bcf	status,0,c
  4258  0020D8  3605               	rlcf	___lldiv@divisor,f,c
  4259  0020DA  3606               	rlcf	___lldiv@divisor+1,f,c
  4260  0020DC  3607               	rlcf	___lldiv@divisor+2,f,c
  4261  0020DE  3608               	rlcf	___lldiv@divisor+3,f,c
  4262  0020E0  2A0D               	incf	___lldiv@counter,f,c
  4263  0020E2                     l655:
  4264  0020E2  AE08               	btfss	___lldiv@divisor+3,7,c
  4265  0020E4  D7F8               	goto	l656
  4266  0020E6                     u2510:
  4267  0020E6  90D8               	bcf	status,0,c
  4268  0020E8  3609               	rlcf	___lldiv@quotient,f,c
  4269  0020EA  360A               	rlcf	___lldiv@quotient+1,f,c
  4270  0020EC  360B               	rlcf	___lldiv@quotient+2,f,c
  4271  0020EE  360C               	rlcf	___lldiv@quotient+3,f,c
  4272  0020F0  5005               	movf	___lldiv@divisor,w,c
  4273  0020F2  5C01               	subwf	___lldiv@dividend,w,c
  4274  0020F4  5006               	movf	___lldiv@divisor+1,w,c
  4275  0020F6  5802               	subwfb	___lldiv@dividend+1,w,c
  4276  0020F8  5007               	movf	___lldiv@divisor+2,w,c
  4277  0020FA  5803               	subwfb	___lldiv@dividend+2,w,c
  4278  0020FC  5008               	movf	___lldiv@divisor+3,w,c
  4279  0020FE  5804               	subwfb	___lldiv@dividend+3,w,c
  4280  002100  A0D8               	btfss	status,0,c
  4281  002102  D009               	goto	l659
  4282  002104  5005               	movf	___lldiv@divisor,w,c
  4283  002106  5E01               	subwf	___lldiv@dividend,f,c
  4284  002108  5006               	movf	___lldiv@divisor+1,w,c
  4285  00210A  5A02               	subwfb	___lldiv@dividend+1,f,c
  4286  00210C  5007               	movf	___lldiv@divisor+2,w,c
  4287  00210E  5A03               	subwfb	___lldiv@dividend+2,f,c
  4288  002110  5008               	movf	___lldiv@divisor+3,w,c
  4289  002112  5A04               	subwfb	___lldiv@dividend+3,f,c
  4290  002114  8009               	bsf	___lldiv@quotient,0,c
  4291  002116                     l659:
  4292  002116  90D8               	bcf	status,0,c
  4293  002118  3208               	rrcf	___lldiv@divisor+3,f,c
  4294  00211A  3207               	rrcf	___lldiv@divisor+2,f,c
  4295  00211C  3206               	rrcf	___lldiv@divisor+1,f,c
  4296  00211E  3205               	rrcf	___lldiv@divisor,f,c
  4297  002120  2E0D               	decfsz	___lldiv@counter,f,c
  4298  002122  D7E1               	goto	u2510
  4299  002124                     l660:
  4300  002124  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4301  002128  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4302  00212C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4303  002130  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4304  002134  0012               	return		;funcret
  4305  002136                     __end_of___lldiv:
  4306                           	opt stack 0
  4307                           tblptru	equ	0xFF8
  4308                           tblptrh	equ	0xFF7
  4309                           tblptrl	equ	0xFF6
  4310                           tablat	equ	0xFF5
  4311                           prodh	equ	0xFF4
  4312                           prodl	equ	0xFF3
  4313                           postinc0	equ	0xFEE
  4314                           wreg	equ	0xFE8
  4315                           indf2	equ	0xFDF
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function ___fttol *****************
  4323 ;; Defined at:
  4324 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  f1              3   42[COMRAM] float 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  lval            4   52[COMRAM] unsigned long 
  4329 ;;  exp1            1   56[COMRAM] unsigned char 
  4330 ;;  sign1           1   51[COMRAM] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  4   42[COMRAM] long 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4340 ;;      Params:         4       0       0       0       0       0       0       0       0
  4341 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4342 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4343 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4344 ;;Total ram usage:       15 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_sprintf
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           	psect	text14
  4354  001C74                     __ptext14:
  4355                           	opt stack 0
  4356  001C74                     ___fttol:
  4357                           	opt stack 29
  4358                           
  4359                           ;incstack = 0
  4360  001C74  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4361  001C78  6A30               	clrf	(??___fttol+1)& (0+255),c
  4362  001C7A  6A31               	clrf	(??___fttol+2)& (0+255),c
  4363  001C7C  342C               	rlcf	___fttol@f1+1,w,c
  4364  001C7E  362F               	rlcf	??___fttol& (0+255),f,c
  4365  001C80  E301               	bnc	u2421
  4366  001C82  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4367  001C84                     u2421:
  4368  001C84  502F               	movf	??___fttol,w,c
  4369  001C86  6E39               	movwf	___fttol@exp1,c
  4370  001C88  5039               	movf	___fttol@exp1,w,c
  4371  001C8A  A4D8               	btfss	status,2,c
  4372  001C8C  D009               	goto	l614
  4373  001C8E  0E00               	movlw	0
  4374  001C90  6E2B               	movwf	?___fttol,c
  4375  001C92  0E00               	movlw	0
  4376  001C94  6E2C               	movwf	?___fttol+1,c
  4377  001C96  0E00               	movlw	0
  4378  001C98  6E2D               	movwf	?___fttol+2,c
  4379  001C9A  0E00               	movlw	0
  4380  001C9C  6E2E               	movwf	?___fttol+3,c
  4381  001C9E  0012               	return	
  4382  001CA0                     l614:
  4383  001CA0  0E17               	movlw	23
  4384  001CA2  6E2F               	movwf	??___fttol& (0+255),c
  4385  001CA4  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4386  001CA8  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4387  001CAC  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4388  001CB0  282F               	incf	??___fttol,w,c
  4389  001CB2  6E33               	movwf	(??___fttol+4)& (0+255),c
  4390  001CB4  D004               	goto	u2440
  4391  001CB6                     u2445:
  4392  001CB6  90D8               	bcf	status,0,c
  4393  001CB8  3232               	rrcf	??___fttol+3,f,c
  4394  001CBA  3231               	rrcf	??___fttol+2,f,c
  4395  001CBC  3230               	rrcf	??___fttol+1,f,c
  4396  001CBE                     u2440:
  4397  001CBE  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4398  001CC0  D7FA               	goto	u2445
  4399  001CC2  5030               	movf	??___fttol+1,w,c
  4400  001CC4  6E34               	movwf	___fttol@sign1,c
  4401  001CC6  8E2C               	bsf	___fttol@f1+1,7,c
  4402  001CC8  0EFF               	movlw	255
  4403  001CCA  162B               	andwf	___fttol@f1,f,c
  4404  001CCC  0EFF               	movlw	255
  4405  001CCE  162C               	andwf	___fttol@f1+1,f,c
  4406  001CD0  0E00               	movlw	0
  4407  001CD2  162D               	andwf	___fttol@f1+2,f,c
  4408  001CD4  502B               	movf	___fttol@f1,w,c
  4409  001CD6  6E35               	movwf	___fttol@lval,c
  4410  001CD8  502C               	movf	___fttol@f1+1,w,c
  4411  001CDA  6E36               	movwf	___fttol@lval+1,c
  4412  001CDC  502D               	movf	___fttol@f1+2,w,c
  4413  001CDE  6E37               	movwf	___fttol@lval+2,c
  4414  001CE0  6A38               	clrf	___fttol@lval+3,c
  4415  001CE2  0E8E               	movlw	142
  4416  001CE4  5E39               	subwf	___fttol@exp1,f,c
  4417  001CE6  AE39               	btfss	___fttol@exp1,7,c
  4418  001CE8  D016               	goto	l616
  4419  001CEA  5039               	movf	___fttol@exp1,w,c
  4420  001CEC  0A80               	xorlw	128
  4421  001CEE  0F8F               	addlw	143
  4422  001CF0  B0D8               	btfsc	status,0,c
  4423  001CF2  D009               	goto	l617
  4424  001CF4  0E00               	movlw	0
  4425  001CF6  6E2B               	movwf	?___fttol,c
  4426  001CF8  0E00               	movlw	0
  4427  001CFA  6E2C               	movwf	?___fttol+1,c
  4428  001CFC  0E00               	movlw	0
  4429  001CFE  6E2D               	movwf	?___fttol+2,c
  4430  001D00  0E00               	movlw	0
  4431  001D02  6E2E               	movwf	?___fttol+3,c
  4432  001D04  0012               	return	
  4433  001D06                     l617:
  4434  001D06  90D8               	bcf	status,0,c
  4435  001D08  3238               	rrcf	___fttol@lval+3,f,c
  4436  001D0A  3237               	rrcf	___fttol@lval+2,f,c
  4437  001D0C  3236               	rrcf	___fttol@lval+1,f,c
  4438  001D0E  3235               	rrcf	___fttol@lval,f,c
  4439  001D10  3E39               	incfsz	___fttol@exp1,f,c
  4440  001D12  D7F9               	goto	l617
  4441  001D14  D015               	goto	u2480
  4442  001D16                     l616:
  4443  001D16  0E17               	movlw	23
  4444  001D18  6439               	cpfsgt	___fttol@exp1,c
  4445  001D1A  D00F               	goto	l622
  4446  001D1C  0E00               	movlw	0
  4447  001D1E  6E2B               	movwf	?___fttol,c
  4448  001D20  0E00               	movlw	0
  4449  001D22  6E2C               	movwf	?___fttol+1,c
  4450  001D24  0E00               	movlw	0
  4451  001D26  6E2D               	movwf	?___fttol+2,c
  4452  001D28  0E00               	movlw	0
  4453  001D2A  6E2E               	movwf	?___fttol+3,c
  4454  001D2C  0012               	return	
  4455  001D2E  90D8               	bcf	status,0,c
  4456  001D30  3635               	rlcf	___fttol@lval,f,c
  4457  001D32  3636               	rlcf	___fttol@lval+1,f,c
  4458  001D34  3637               	rlcf	___fttol@lval+2,f,c
  4459  001D36  3638               	rlcf	___fttol@lval+3,f,c
  4460  001D38  0639               	decf	___fttol@exp1,f,c
  4461  001D3A                     l622:
  4462  001D3A  5039               	movf	___fttol@exp1,w,c
  4463  001D3C  A4D8               	btfss	status,2,c
  4464  001D3E  D7F7               	goto	l623
  4465  001D40                     u2480:
  4466  001D40  5034               	movf	___fttol@sign1,w,c
  4467  001D42  B4D8               	btfsc	status,2,c
  4468  001D44  D008               	goto	l625
  4469  001D46  1E38               	comf	___fttol@lval+3,f,c
  4470  001D48  1E37               	comf	___fttol@lval+2,f,c
  4471  001D4A  1E36               	comf	___fttol@lval+1,f,c
  4472  001D4C  6C35               	negf	___fttol@lval,c
  4473  001D4E  0E00               	movlw	0
  4474  001D50  2236               	addwfc	___fttol@lval+1,f,c
  4475  001D52  2237               	addwfc	___fttol@lval+2,f,c
  4476  001D54  2238               	addwfc	___fttol@lval+3,f,c
  4477  001D56                     l625:
  4478  001D56  C035  F02B         	movff	___fttol@lval,?___fttol
  4479  001D5A  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4480  001D5E  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4481  001D62  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4482  001D66  0012               	return	
  4483  001D68                     __end_of___fttol:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           indf2	equ	0xFDF
  4494                           postinc2	equ	0xFDE
  4495                           postdec2	equ	0xFDD
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function ___ftsub *****************
  4501 ;; Defined at:
  4502 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  f1              3   57[COMRAM] float 
  4505 ;;  f2              3   60[COMRAM] float 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;		None
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  3   57[COMRAM] float 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4517 ;;      Params:         6       0       0       0       0       0       0       0       0
  4518 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4520 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4521 ;;Total ram usage:        6 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    2
  4524 ;; This function calls:
  4525 ;;		___ftadd
  4526 ;; This function is called by:
  4527 ;;		_sprintf
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text15
  4532  00235E                     __ptext15:
  4533                           	opt stack 0
  4534  00235E                     ___ftsub:
  4535                           	opt stack 27
  4536                           
  4537                           ;incstack = 0
  4538  00235E  503D               	movf	___ftsub@f2,w,c
  4539  002360  103E               	iorwf	___ftsub@f2+1,w,c
  4540  002362  103F               	iorwf	___ftsub@f2+2,w,c
  4541  002364  B4D8               	btfsc	status,2,c
  4542  002366  D006               	goto	l610
  4543  002368  0E00               	movlw	0
  4544  00236A  1A3D               	xorwf	___ftsub@f2,f,c
  4545  00236C  0E00               	movlw	0
  4546  00236E  1A3E               	xorwf	___ftsub@f2+1,f,c
  4547  002370  0E80               	movlw	128
  4548  002372  1A3F               	xorwf	___ftsub@f2+2,f,c
  4549  002374                     l610:
  4550  002374  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4551  002378  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4552  00237C  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4553  002380  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4554  002384  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4555  002388  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4556  00238C  EC06  F00B         	call	___ftadd	;wreg free
  4557  002390  C02E  F03A         	movff	?___ftadd,?___ftsub
  4558  002394  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4559  002398  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4560  00239C  0012               	return	
  4561  00239E                     __end_of___ftsub:
  4562                           	opt stack 0
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           postdec2	equ	0xFDD
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function ___ftadd *****************
  4579 ;; Defined at:
  4580 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  f1              3   45[COMRAM] float 
  4583 ;;  f2              3   48[COMRAM] float 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  exp1            1   56[COMRAM] unsigned char 
  4586 ;;  exp2            1   55[COMRAM] unsigned char 
  4587 ;;  sign            1   54[COMRAM] unsigned char 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  3   45[COMRAM] float 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4597 ;;      Params:         6       0       0       0       0       0       0       0       0
  4598 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4599 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4600 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4601 ;;Total ram usage:       12 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    1
  4604 ;; This function calls:
  4605 ;;		___ftpack
  4606 ;; This function is called by:
  4607 ;;		_sprintf
  4608 ;;		___ftsub
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text16
  4613  00160C                     __ptext16:
  4614                           	opt stack 0
  4615  00160C                     ___ftadd:
  4616                           	opt stack 27
  4617                           
  4618                           ;incstack = 0
  4619  00160C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4620  001610  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4621  001612  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4622  001614  342F               	rlcf	___ftadd@f1+1,w,c
  4623  001616  3634               	rlcf	??___ftadd& (0+255),f,c
  4624  001618  E301               	bnc	u1651
  4625  00161A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4626  00161C                     u1651:
  4627  00161C  5034               	movf	??___ftadd,w,c
  4628  00161E  6E39               	movwf	___ftadd@exp1,c
  4629  001620  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4630  001624  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4631  001626  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4632  001628  3432               	rlcf	___ftadd@f2+1,w,c
  4633  00162A  3634               	rlcf	??___ftadd& (0+255),f,c
  4634  00162C  E301               	bnc	u1661
  4635  00162E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4636  001630                     u1661:
  4637  001630  5034               	movf	??___ftadd,w,c
  4638  001632  6E38               	movwf	___ftadd@exp2,c
  4639  001634  5039               	movf	___ftadd@exp1,w,c
  4640  001636  B4D8               	btfsc	status,2,c
  4641  001638  D00B               	goto	u1690
  4642  00163A  5038               	movf	___ftadd@exp2,w,c
  4643  00163C  5C39               	subwf	___ftadd@exp1,w,c
  4644  00163E  B0D8               	btfsc	status,0,c
  4645  001640  D00E               	goto	l528
  4646  001642  5039               	movf	___ftadd@exp1,w,c
  4647  001644  0800               	sublw	0
  4648  001646  2438               	addwf	___ftadd@exp2,w,c
  4649  001648  6E34               	movwf	??___ftadd& (0+255),c
  4650  00164A  0E18               	movlw	24
  4651  00164C  6434               	cpfsgt	??___ftadd,c
  4652  00164E  D007               	goto	l528
  4653  001650                     u1690:
  4654  001650  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4655  001654  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4656  001658  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4657  00165C  0012               	return	
  4658  00165E                     l528:
  4659  00165E  5038               	movf	___ftadd@exp2,w,c
  4660  001660  B4D8               	btfsc	status,2,c
  4661  001662  D00B               	goto	u1720
  4662  001664  5039               	movf	___ftadd@exp1,w,c
  4663  001666  5C38               	subwf	___ftadd@exp2,w,c
  4664  001668  B0D8               	btfsc	status,0,c
  4665  00166A  D00E               	goto	l532
  4666  00166C  5038               	movf	___ftadd@exp2,w,c
  4667  00166E  0800               	sublw	0
  4668  001670  2439               	addwf	___ftadd@exp1,w,c
  4669  001672  6E34               	movwf	??___ftadd& (0+255),c
  4670  001674  0E18               	movlw	24
  4671  001676  6434               	cpfsgt	??___ftadd,c
  4672  001678  D007               	goto	l532
  4673  00167A                     u1720:
  4674  00167A  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4675  00167E  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4676  001682  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4677  001686  0012               	return	
  4678  001688                     l532:
  4679  001688  0E06               	movlw	6
  4680  00168A  6E37               	movwf	___ftadd@sign,c
  4681  00168C  BE30               	btfsc	___ftadd@f1+2,7,c
  4682  00168E  8E37               	bsf	___ftadd@sign,7,c
  4683  001690  BE33               	btfsc	___ftadd@f2+2,7,c
  4684  001692  8C37               	bsf	___ftadd@sign,6,c
  4685  001694  8E2F               	bsf	___ftadd@f1+1,7,c
  4686  001696  0EFF               	movlw	255
  4687  001698  162E               	andwf	___ftadd@f1,f,c
  4688  00169A  0EFF               	movlw	255
  4689  00169C  162F               	andwf	___ftadd@f1+1,f,c
  4690  00169E  0E00               	movlw	0
  4691  0016A0  1630               	andwf	___ftadd@f1+2,f,c
  4692  0016A2  8E32               	bsf	___ftadd@f2+1,7,c
  4693  0016A4  0EFF               	movlw	255
  4694  0016A6  1631               	andwf	___ftadd@f2,f,c
  4695  0016A8  0EFF               	movlw	255
  4696  0016AA  1632               	andwf	___ftadd@f2+1,f,c
  4697  0016AC  0E00               	movlw	0
  4698  0016AE  1633               	andwf	___ftadd@f2+2,f,c
  4699  0016B0  5038               	movf	___ftadd@exp2,w,c
  4700  0016B2  5C39               	subwf	___ftadd@exp1,w,c
  4701  0016B4  B0D8               	btfsc	status,0,c
  4702  0016B6  D01B               	goto	l537
  4703  0016B8                     u1750:
  4704  0016B8  90D8               	bcf	status,0,c
  4705  0016BA  3631               	rlcf	___ftadd@f2,f,c
  4706  0016BC  3632               	rlcf	___ftadd@f2+1,f,c
  4707  0016BE  3633               	rlcf	___ftadd@f2+2,f,c
  4708  0016C0  0638               	decf	___ftadd@exp2,f,c
  4709  0016C2  5039               	movf	___ftadd@exp1,w,c
  4710  0016C4  1838               	xorwf	___ftadd@exp2,w,c
  4711  0016C6  B4D8               	btfsc	status,2,c
  4712  0016C8  D00D               	goto	l542
  4713  0016CA  0637               	decf	___ftadd@sign,f,c
  4714  0016CC  C037  F034         	movff	___ftadd@sign,??___ftadd
  4715  0016D0  0E07               	movlw	7
  4716  0016D2  1634               	andwf	??___ftadd,f,c
  4717  0016D4  B4D8               	btfsc	status,2,c
  4718  0016D6  D006               	goto	l542
  4719  0016D8  D7EF               	goto	u1750
  4720  0016DA  90D8               	bcf	status,0,c
  4721  0016DC  3230               	rrcf	___ftadd@f1+2,f,c
  4722  0016DE  322F               	rrcf	___ftadd@f1+1,f,c
  4723  0016E0  322E               	rrcf	___ftadd@f1,f,c
  4724  0016E2  2A39               	incf	___ftadd@exp1,f,c
  4725  0016E4                     l542:
  4726  0016E4  5038               	movf	___ftadd@exp2,w,c
  4727  0016E6  1839               	xorwf	___ftadd@exp1,w,c
  4728  0016E8  B4D8               	btfsc	status,2,c
  4729  0016EA  D01F               	goto	u1820
  4730  0016EC  D7F6               	goto	l543
  4731  0016EE                     l537:
  4732  0016EE  5039               	movf	___ftadd@exp1,w,c
  4733  0016F0  5C38               	subwf	___ftadd@exp2,w,c
  4734  0016F2  B0D8               	btfsc	status,0,c
  4735  0016F4  D01A               	goto	u1820
  4736  0016F6                     u1790:
  4737  0016F6  90D8               	bcf	status,0,c
  4738  0016F8  362E               	rlcf	___ftadd@f1,f,c
  4739  0016FA  362F               	rlcf	___ftadd@f1+1,f,c
  4740  0016FC  3630               	rlcf	___ftadd@f1+2,f,c
  4741  0016FE  0639               	decf	___ftadd@exp1,f,c
  4742  001700  5039               	movf	___ftadd@exp1,w,c
  4743  001702  1838               	xorwf	___ftadd@exp2,w,c
  4744  001704  B4D8               	btfsc	status,2,c
  4745  001706  D00D               	goto	l551
  4746  001708  0637               	decf	___ftadd@sign,f,c
  4747  00170A  C037  F034         	movff	___ftadd@sign,??___ftadd
  4748  00170E  0E07               	movlw	7
  4749  001710  1634               	andwf	??___ftadd,f,c
  4750  001712  B4D8               	btfsc	status,2,c
  4751  001714  D006               	goto	l551
  4752  001716  D7EF               	goto	u1790
  4753  001718  90D8               	bcf	status,0,c
  4754  00171A  3233               	rrcf	___ftadd@f2+2,f,c
  4755  00171C  3232               	rrcf	___ftadd@f2+1,f,c
  4756  00171E  3231               	rrcf	___ftadd@f2,f,c
  4757  001720  2A38               	incf	___ftadd@exp2,f,c
  4758  001722                     l551:
  4759  001722  5038               	movf	___ftadd@exp2,w,c
  4760  001724  1839               	xorwf	___ftadd@exp1,w,c
  4761  001726  A4D8               	btfss	status,2,c
  4762  001728  D7F7               	goto	l552
  4763  00172A                     u1820:
  4764  00172A  AE37               	btfss	___ftadd@sign,7,c
  4765  00172C  D00C               	goto	l554
  4766  00172E  0EFF               	movlw	255
  4767  001730  1A2E               	xorwf	___ftadd@f1,f,c
  4768  001732  0EFF               	movlw	255
  4769  001734  1A2F               	xorwf	___ftadd@f1+1,f,c
  4770  001736  0EFF               	movlw	255
  4771  001738  1A30               	xorwf	___ftadd@f1+2,f,c
  4772  00173A  0E01               	movlw	1
  4773  00173C  262E               	addwf	___ftadd@f1,f,c
  4774  00173E  0E00               	movlw	0
  4775  001740  222F               	addwfc	___ftadd@f1+1,f,c
  4776  001742  0E00               	movlw	0
  4777  001744  2230               	addwfc	___ftadd@f1+2,f,c
  4778  001746                     l554:
  4779  001746  AC37               	btfss	___ftadd@sign,6,c
  4780  001748  D00C               	goto	l555
  4781  00174A  0EFF               	movlw	255
  4782  00174C  1A31               	xorwf	___ftadd@f2,f,c
  4783  00174E  0EFF               	movlw	255
  4784  001750  1A32               	xorwf	___ftadd@f2+1,f,c
  4785  001752  0EFF               	movlw	255
  4786  001754  1A33               	xorwf	___ftadd@f2+2,f,c
  4787  001756  0E01               	movlw	1
  4788  001758  2631               	addwf	___ftadd@f2,f,c
  4789  00175A  0E00               	movlw	0
  4790  00175C  2232               	addwfc	___ftadd@f2+1,f,c
  4791  00175E  0E00               	movlw	0
  4792  001760  2233               	addwfc	___ftadd@f2+2,f,c
  4793  001762                     l555:
  4794  001762  0E00               	movlw	0
  4795  001764  6E37               	movwf	___ftadd@sign,c
  4796  001766  502E               	movf	___ftadd@f1,w,c
  4797  001768  2631               	addwf	___ftadd@f2,f,c
  4798  00176A  502F               	movf	___ftadd@f1+1,w,c
  4799  00176C  2232               	addwfc	___ftadd@f2+1,f,c
  4800  00176E  5030               	movf	___ftadd@f1+2,w,c
  4801  001770  2233               	addwfc	___ftadd@f2+2,f,c
  4802  001772  AE33               	btfss	___ftadd@f2+2,7,c
  4803  001774  D00E               	goto	l556
  4804  001776  0EFF               	movlw	255
  4805  001778  1A31               	xorwf	___ftadd@f2,f,c
  4806  00177A  0EFF               	movlw	255
  4807  00177C  1A32               	xorwf	___ftadd@f2+1,f,c
  4808  00177E  0EFF               	movlw	255
  4809  001780  1A33               	xorwf	___ftadd@f2+2,f,c
  4810  001782  0E01               	movlw	1
  4811  001784  2631               	addwf	___ftadd@f2,f,c
  4812  001786  0E00               	movlw	0
  4813  001788  2232               	addwfc	___ftadd@f2+1,f,c
  4814  00178A  0E00               	movlw	0
  4815  00178C  2233               	addwfc	___ftadd@f2+2,f,c
  4816  00178E  0E01               	movlw	1
  4817  001790  6E37               	movwf	___ftadd@sign,c
  4818  001792                     l556:
  4819  001792  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4820  001796  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4821  00179A  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4822  00179E  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4823  0017A2  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4824  0017A6  EC27  F00F         	call	___ftpack	;wreg free
  4825  0017AA  C001  F02E         	movff	?___ftpack,?___ftadd
  4826  0017AE  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4827  0017B2  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4828  0017B6  0012               	return	
  4829  0017B8                     __end_of___ftadd:
  4830                           	opt stack 0
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           postinc0	equ	0xFEE
  4838                           wreg	equ	0xFE8
  4839                           indf2	equ	0xFDF
  4840                           postinc2	equ	0xFDE
  4841                           postdec2	equ	0xFDD
  4842                           fsr2h	equ	0xFDA
  4843                           fsr2l	equ	0xFD9
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function ___ftneg *****************
  4847 ;; Defined at:
  4848 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;  f1              3    0[COMRAM] float 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  3    0[COMRAM] float 
  4855 ;; Registers used:
  4856 ;;		wreg, status,2, status,0
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4862 ;;      Params:         3       0       0       0       0       0       0       0       0
  4863 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4865 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4866 ;;Total ram usage:        3 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_sprintf
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text17
  4876  00246E                     __ptext17:
  4877                           	opt stack 0
  4878  00246E                     ___ftneg:
  4879                           	opt stack 29
  4880                           
  4881                           ;incstack = 0
  4882  00246E  5001               	movf	___ftneg@f1,w,c
  4883  002470  1002               	iorwf	___ftneg@f1+1,w,c
  4884  002472  1003               	iorwf	___ftneg@f1+2,w,c
  4885  002474  B4D8               	btfsc	status,2,c
  4886  002476  D006               	goto	l604
  4887  002478  0E00               	movlw	0
  4888  00247A  1A01               	xorwf	___ftneg@f1,f,c
  4889  00247C  0E00               	movlw	0
  4890  00247E  1A02               	xorwf	___ftneg@f1+1,f,c
  4891  002480  0E80               	movlw	128
  4892  002482  1A03               	xorwf	___ftneg@f1+2,f,c
  4893  002484                     l604:
  4894  002484  C001  F001         	movff	___ftneg@f1,?___ftneg
  4895  002488  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4896  00248C  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4897  002490  0012               	return		;funcret
  4898  002492                     __end_of___ftneg:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function ___ftge *****************
  4916 ;; Defined at:
  4917 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  ff1             3    0[COMRAM] float 
  4920 ;;  ff2             3    3[COMRAM] float 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;		None               void
  4925 ;; Registers used:
  4926 ;;		wreg, status,2, status,0
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4932 ;;      Params:         6       0       0       0       0       0       0       0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4934 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4935 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4936 ;;Total ram usage:        9 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_sprintf
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text18
  4946  001FA0                     __ptext18:
  4947                           	opt stack 0
  4948  001FA0                     ___ftge:
  4949                           	opt stack 29
  4950                           
  4951                           ;incstack = 0
  4952  001FA0  AE03               	btfss	___ftge@ff1+2,7,c
  4953  001FA2  D016               	goto	l586
  4954  001FA4  C001  F007         	movff	___ftge@ff1,??___ftge
  4955  001FA8  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4956  001FAC  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4957  001FB0  1E07               	comf	??___ftge,f,c
  4958  001FB2  1E08               	comf	??___ftge+1,f,c
  4959  001FB4  1E09               	comf	??___ftge+2,f,c
  4960  001FB6  2A07               	incf	??___ftge,f,c
  4961  001FB8  0E00               	movlw	0
  4962  001FBA  2208               	addwfc	??___ftge+1,f,c
  4963  001FBC  2209               	addwfc	??___ftge+2,f,c
  4964  001FBE  0E00               	movlw	0
  4965  001FC0  2407               	addwf	??___ftge,w,c
  4966  001FC2  6E01               	movwf	___ftge@ff1,c
  4967  001FC4  0E00               	movlw	0
  4968  001FC6  2008               	addwfc	??___ftge+1,w,c
  4969  001FC8  6E02               	movwf	___ftge@ff1+1,c
  4970  001FCA  0E80               	movlw	128
  4971  001FCC  2009               	addwfc	??___ftge+2,w,c
  4972  001FCE  6E03               	movwf	___ftge@ff1+2,c
  4973  001FD0                     l586:
  4974  001FD0  AE06               	btfss	___ftge@ff2+2,7,c
  4975  001FD2  D016               	goto	l587
  4976  001FD4  C004  F007         	movff	___ftge@ff2,??___ftge
  4977  001FD8  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4978  001FDC  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4979  001FE0  1E07               	comf	??___ftge,f,c
  4980  001FE2  1E08               	comf	??___ftge+1,f,c
  4981  001FE4  1E09               	comf	??___ftge+2,f,c
  4982  001FE6  2A07               	incf	??___ftge,f,c
  4983  001FE8  0E00               	movlw	0
  4984  001FEA  2208               	addwfc	??___ftge+1,f,c
  4985  001FEC  2209               	addwfc	??___ftge+2,f,c
  4986  001FEE  0E00               	movlw	0
  4987  001FF0  2407               	addwf	??___ftge,w,c
  4988  001FF2  6E04               	movwf	___ftge@ff2,c
  4989  001FF4  0E00               	movlw	0
  4990  001FF6  2008               	addwfc	??___ftge+1,w,c
  4991  001FF8  6E05               	movwf	___ftge@ff2+1,c
  4992  001FFA  0E80               	movlw	128
  4993  001FFC  2009               	addwfc	??___ftge+2,w,c
  4994  001FFE  6E06               	movwf	___ftge@ff2+2,c
  4995  002000                     l587:
  4996  002000  0E00               	movlw	0
  4997  002002  1A01               	xorwf	___ftge@ff1,f,c
  4998  002004  0E00               	movlw	0
  4999  002006  1A02               	xorwf	___ftge@ff1+1,f,c
  5000  002008  0E80               	movlw	128
  5001  00200A  1A03               	xorwf	___ftge@ff1+2,f,c
  5002  00200C  0E00               	movlw	0
  5003  00200E  1A04               	xorwf	___ftge@ff2,f,c
  5004  002010  0E00               	movlw	0
  5005  002012  1A05               	xorwf	___ftge@ff2+1,f,c
  5006  002014  0E80               	movlw	128
  5007  002016  1A06               	xorwf	___ftge@ff2+2,f,c
  5008  002018  5004               	movf	___ftge@ff2,w,c
  5009  00201A  5C01               	subwf	___ftge@ff1,w,c
  5010  00201C  5005               	movf	___ftge@ff2+1,w,c
  5011  00201E  5802               	subwfb	___ftge@ff1+1,w,c
  5012  002020  5006               	movf	___ftge@ff2+2,w,c
  5013  002022  5803               	subwfb	___ftge@ff1+2,w,c
  5014  002024  B0D8               	btfsc	status,0,c
  5015  002026  D002               	goto	l2114
  5016  002028  90D8               	bcf	status,0,c
  5017  00202A  0012               	return	
  5018  00202C                     l2114:
  5019  00202C  80D8               	bsf	status,0,c
  5020  00202E  0012               	return	
  5021  002030                     __end_of___ftge:
  5022                           	opt stack 0
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           postinc0	equ	0xFEE
  5030                           wreg	equ	0xFE8
  5031                           indf2	equ	0xFDF
  5032                           postinc2	equ	0xFDE
  5033                           postdec2	equ	0xFDD
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038 ;; *************** function _putrsXLCD *****************
  5039 ;; Defined at:
  5040 ;;		line 138 in file "LCD_libreria.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;  buffer          2    1[COMRAM] PTR const unsigned char 
  5043 ;;		 -> datos(20), STR_3(12), STR_2(16), STR_1(17), 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      void 
  5048 ;; Registers used:
  5049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5055 ;;      Params:         2       0       0       0       0       0       0       0       0
  5056 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5058 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5059 ;;Total ram usage:        2 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    3
  5062 ;; This function calls:
  5063 ;;		_BusyXLCD
  5064 ;;		_WriteDataXLCD
  5065 ;; This function is called by:
  5066 ;;		_main
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           	psect	text19
  5071  002268                     __ptext19:
  5072                           	opt stack 0
  5073  002268                     _putrsXLCD:
  5074                           	opt stack 27
  5075                           
  5076                           ;LCD_libreria.c: 140: while(*buffer)
  5077                           
  5078                           ;incstack = 0
  5079  002268  D019               	goto	l108
  5080  00226A                     
  5081                           ;LCD_libreria.c: 141: {
  5082                           ;LCD_libreria.c: 142: while(BusyXLCD());
  5083  00226A  ECEE  F011         	call	_BusyXLCD	;wreg free
  5084  00226E  0900               	iorlw	0
  5085  002270  A4D8               	btfss	status,2,c
  5086  002272  D7FB               	goto	l109
  5087                           
  5088                           ;LCD_libreria.c: 143: WriteDataXLCD(*buffer);
  5089  002274  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  5090  002278  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  5091  00227C  6AF8               	clrf	tblptru,c
  5092  00227E  0E07               	movlw	(high __ramtop+-1)
  5093  002280  64F7               	cpfsgt	tblptrh,c
  5094  002282  D003               	bra	u2607
  5095  002284  0008               	tblrd		*
  5096  002286  50F5               	movf	tablat,w,c
  5097  002288  D005               	bra	u2600
  5098  00228A                     u2607:
  5099  00228A  CFF6 FFE9          	movff	tblptrl,fsr0l
  5100  00228E  CFF7 FFEA          	movff	tblptrh,fsr0h
  5101  002292  50EF               	movf	indf0,w,c
  5102  002294                     u2600:
  5103  002294  EC8B  F011         	call	_WriteDataXLCD
  5104                           
  5105                           ;LCD_libreria.c: 144: buffer++;
  5106  002298  4A02               	infsnz	putrsXLCD@buffer,f,c
  5107  00229A  2A03               	incf	putrsXLCD@buffer+1,f,c
  5108  00229C                     l108:
  5109  00229C  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  5110  0022A0  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  5111  0022A4  6AF8               	clrf	tblptru,c
  5112  0022A6  0E07               	movlw	(high __ramtop+-1)
  5113  0022A8  64F7               	cpfsgt	tblptrh,c
  5114  0022AA  D003               	bra	u2617
  5115  0022AC  0008               	tblrd		*
  5116  0022AE  50F5               	movf	tablat,w,c
  5117  0022B0  D005               	bra	u2610
  5118  0022B2                     u2617:
  5119  0022B2  CFF6 FFE9          	movff	tblptrl,fsr0l
  5120  0022B6  CFF7 FFEA          	movff	tblptrh,fsr0h
  5121  0022BA  50EF               	movf	indf0,w,c
  5122  0022BC                     u2610:
  5123  0022BC  0900               	iorlw	0
  5124  0022BE  B4D8               	btfsc	status,2,c
  5125  0022C0  0012               	return	
  5126  0022C2  D7D3               	goto	l109
  5127  0022C4                     __end_of_putrsXLCD:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           indf0	equ	0xFEF
  5136                           postinc0	equ	0xFEE
  5137                           fsr0h	equ	0xFEA
  5138                           fsr0l	equ	0xFE9
  5139                           wreg	equ	0xFE8
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _WriteDataXLCD *****************
  5148 ;; Defined at:
  5149 ;;		line 395 in file "LCD_libreria.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  data            1    wreg     unsigned char 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  data            1    0[COMRAM] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5163 ;;      Params:         0       0       0       0       0       0       0       0       0
  5164 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5166 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5167 ;;Total ram usage:        1 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    2
  5170 ;; This function calls:
  5171 ;;		_BusyXLCD
  5172 ;;		_DelayFor18TCY
  5173 ;; This function is called by:
  5174 ;;		_putrsXLCD
  5175 ;;		_LCD_WriteChr_CGRAM
  5176 ;;		_putsXLCD
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text20
  5181  002316                     __ptext20:
  5182                           	opt stack 0
  5183  002316                     _WriteDataXLCD:
  5184                           	opt stack 27
  5185                           
  5186                           ;incstack = 0
  5187                           ;WriteDataXLCD@data stored from wreg
  5188  002316  6E01               	movwf	WriteDataXLCD@data,c
  5189  002318                     
  5190                           ;LCD_libreria.c: 397: while(BusyXLCD());
  5191  002318  ECEE  F011         	call	_BusyXLCD	;wreg free
  5192  00231C  0900               	iorlw	0
  5193  00231E  A4D8               	btfss	status,2,c
  5194  002320  D7FB               	goto	l2502
  5195                           
  5196                           ;LCD_libreria.c: 415: TRISD &= 0xf0;
  5197  002322  0EF0               	movlw	240
  5198  002324  1695               	andwf	3989,f,c	;volatile
  5199                           
  5200                           ;LCD_libreria.c: 416: PORTD &= 0xf0;
  5201  002326  0EF0               	movlw	240
  5202  002328  1683               	andwf	3971,f,c	;volatile
  5203                           
  5204                           ;LCD_libreria.c: 417: PORTD |= ((data>>4)&0x0f);
  5205  00232A  3801               	swapf	WriteDataXLCD@data,w,c
  5206  00232C  0B0F               	andlw	15
  5207  00232E  0B0F               	andlw	15
  5208  002330  1283               	iorwf	3971,f,c	;volatile
  5209                           
  5210                           ;LCD_libreria.c: 419: LATDbits.LATD5 = 1;
  5211  002332  8A8C               	bsf	3980,5,c	;volatile
  5212                           
  5213                           ;LCD_libreria.c: 420: LATDbits.LATD6 = 0;
  5214  002334  9C8C               	bcf	3980,6,c	;volatile
  5215                           
  5216                           ;LCD_libreria.c: 421: DelayFor18TCY();
  5217  002336  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  5218                           
  5219                           ;LCD_libreria.c: 422: LATDbits.LATD4 = 1;
  5220  00233A  888C               	bsf	3980,4,c	;volatile
  5221                           
  5222                           ;LCD_libreria.c: 423: DelayFor18TCY();
  5223  00233C  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  5224                           
  5225                           ;LCD_libreria.c: 424: LATDbits.LATD4 = 0;
  5226  002340  988C               	bcf	3980,4,c	;volatile
  5227                           
  5228                           ;LCD_libreria.c: 429: PORTD &= 0xf0;
  5229  002342  0EF0               	movlw	240
  5230  002344  1683               	andwf	3971,f,c	;volatile
  5231                           
  5232                           ;LCD_libreria.c: 430: PORTD |= (data&0x0f);
  5233  002346  5001               	movf	WriteDataXLCD@data,w,c
  5234  002348  0B0F               	andlw	15
  5235  00234A  1283               	iorwf	3971,f,c	;volatile
  5236                           
  5237                           ;LCD_libreria.c: 432: DelayFor18TCY();
  5238  00234C  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  5239                           
  5240                           ;LCD_libreria.c: 433: LATDbits.LATD4 = 1;
  5241  002350  888C               	bsf	3980,4,c	;volatile
  5242                           
  5243                           ;LCD_libreria.c: 434: DelayFor18TCY();
  5244  002352  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  5245                           
  5246                           ;LCD_libreria.c: 435: LATDbits.LATD4 = 0;
  5247  002356  988C               	bcf	3980,4,c	;volatile
  5248                           
  5249                           ;LCD_libreria.c: 439: TRISD |= 0x0f;
  5250  002358  0E0F               	movlw	15
  5251  00235A  1295               	iorwf	3989,f,c	;volatile
  5252  00235C  0012               	return	
  5253  00235E                     __end_of_WriteDataXLCD:
  5254                           	opt stack 0
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           indf0	equ	0xFEF
  5262                           postinc0	equ	0xFEE
  5263                           fsr0h	equ	0xFEA
  5264                           fsr0l	equ	0xFE9
  5265                           wreg	equ	0xFE8
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function ___lwtoft *****************
  5274 ;; Defined at:
  5275 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  c               2    8[COMRAM] unsigned int 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  3    8[COMRAM] float 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5289 ;;      Params:         3       0       0       0       0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5292 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5293 ;;Total ram usage:        3 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    1
  5296 ;; This function calls:
  5297 ;;		___ftpack
  5298 ;; This function is called by:
  5299 ;;		_main
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text21
  5304  002492                     __ptext21:
  5305                           	opt stack 0
  5306  002492                     ___lwtoft:
  5307                           	opt stack 29
  5308                           
  5309                           ;incstack = 0
  5310  002492  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5311  002496  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5312  00249A  6A03               	clrf	___ftpack@arg+2,c
  5313  00249C  0E8E               	movlw	142
  5314  00249E  6E04               	movwf	___ftpack@exp,c
  5315  0024A0  0E00               	movlw	0
  5316  0024A2  6E05               	movwf	___ftpack@sign,c
  5317  0024A4  EC27  F00F         	call	___ftpack	;wreg free
  5318  0024A8  C001  F009         	movff	?___ftpack,?___lwtoft
  5319  0024AC  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5320  0024B0  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5321  0024B4  0012               	return	
  5322  0024B6                     __end_of___lwtoft:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           indf0	equ	0xFEF
  5331                           postinc0	equ	0xFEE
  5332                           fsr0h	equ	0xFEA
  5333                           fsr0l	equ	0xFE9
  5334                           wreg	equ	0xFE8
  5335                           indf2	equ	0xFDF
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function ___ftdiv *****************
  5343 ;; Defined at:
  5344 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  f1              3   35[COMRAM] float 
  5347 ;;  f2              3   38[COMRAM] float 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  f3              3   45[COMRAM] float 
  5350 ;;  sign            1   49[COMRAM] unsigned char 
  5351 ;;  exp             1   48[COMRAM] unsigned char 
  5352 ;;  cntr            1   44[COMRAM] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  3   35[COMRAM] float 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5362 ;;      Params:         6       0       0       0       0       0       0       0       0
  5363 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5364 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5365 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5366 ;;Total ram usage:       15 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    1
  5369 ;; This function calls:
  5370 ;;		___ftpack
  5371 ;; This function is called by:
  5372 ;;		_main
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text22
  5377  001D68                     __ptext22:
  5378                           	opt stack 0
  5379  001D68                     ___ftdiv:
  5380                           	opt stack 29
  5381                           
  5382                           ;incstack = 0
  5383  001D68  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5384  001D6C  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5385  001D6E  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5386  001D70  3425               	rlcf	___ftdiv@f1+1,w,c
  5387  001D72  362A               	rlcf	??___ftdiv& (0+255),f,c
  5388  001D74  E301               	bnc	u2981
  5389  001D76  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5390  001D78                     u2981:
  5391  001D78  502A               	movf	??___ftdiv,w,c
  5392  001D7A  6E31               	movwf	___ftdiv@exp,c
  5393  001D7C  5031               	movf	___ftdiv@exp,w,c
  5394  001D7E  A4D8               	btfss	status,2,c
  5395  001D80  D007               	goto	l561
  5396  001D82  0E00               	movlw	0
  5397  001D84  6E24               	movwf	?___ftdiv,c
  5398  001D86  0E00               	movlw	0
  5399  001D88  6E25               	movwf	?___ftdiv+1,c
  5400  001D8A  0E00               	movlw	0
  5401  001D8C  6E26               	movwf	?___ftdiv+2,c
  5402  001D8E  0012               	return	
  5403  001D90                     l561:
  5404  001D90  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5405  001D94  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5406  001D96  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5407  001D98  3428               	rlcf	___ftdiv@f2+1,w,c
  5408  001D9A  362A               	rlcf	??___ftdiv& (0+255),f,c
  5409  001D9C  E301               	bnc	u3001
  5410  001D9E  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5411  001DA0                     u3001:
  5412  001DA0  502A               	movf	??___ftdiv,w,c
  5413  001DA2  6E32               	movwf	___ftdiv@sign,c
  5414  001DA4  5032               	movf	___ftdiv@sign,w,c
  5415  001DA6  A4D8               	btfss	status,2,c
  5416  001DA8  D007               	goto	l563
  5417  001DAA  0E00               	movlw	0
  5418  001DAC  6E24               	movwf	?___ftdiv,c
  5419  001DAE  0E00               	movlw	0
  5420  001DB0  6E25               	movwf	?___ftdiv+1,c
  5421  001DB2  0E00               	movlw	0
  5422  001DB4  6E26               	movwf	?___ftdiv+2,c
  5423  001DB6  0012               	return	
  5424  001DB8                     l563:
  5425  001DB8  0E00               	movlw	0
  5426  001DBA  6E2E               	movwf	___ftdiv@f3,c
  5427  001DBC  0E00               	movlw	0
  5428  001DBE  6E2F               	movwf	___ftdiv@f3+1,c
  5429  001DC0  0E00               	movlw	0
  5430  001DC2  6E30               	movwf	___ftdiv@f3+2,c
  5431  001DC4  5032               	movf	___ftdiv@sign,w,c
  5432  001DC6  0F89               	addlw	137
  5433  001DC8  5E31               	subwf	___ftdiv@exp,f,c
  5434  001DCA  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  5435  001DCE  5029               	movf	___ftdiv@f2+2,w,c
  5436  001DD0  1A32               	xorwf	___ftdiv@sign,f,c
  5437  001DD2  0E80               	movlw	128
  5438  001DD4  1632               	andwf	___ftdiv@sign,f,c
  5439  001DD6  8E25               	bsf	___ftdiv@f1+1,7,c
  5440  001DD8  0EFF               	movlw	255
  5441  001DDA  1624               	andwf	___ftdiv@f1,f,c
  5442  001DDC  0EFF               	movlw	255
  5443  001DDE  1625               	andwf	___ftdiv@f1+1,f,c
  5444  001DE0  0E00               	movlw	0
  5445  001DE2  1626               	andwf	___ftdiv@f1+2,f,c
  5446  001DE4  8E28               	bsf	___ftdiv@f2+1,7,c
  5447  001DE6  0EFF               	movlw	255
  5448  001DE8  1627               	andwf	___ftdiv@f2,f,c
  5449  001DEA  0EFF               	movlw	255
  5450  001DEC  1628               	andwf	___ftdiv@f2+1,f,c
  5451  001DEE  0E00               	movlw	0
  5452  001DF0  1629               	andwf	___ftdiv@f2+2,f,c
  5453  001DF2  0E18               	movlw	24
  5454  001DF4  6E2D               	movwf	___ftdiv@cntr,c
  5455  001DF6  90D8               	bcf	status,0,c
  5456  001DF8  362E               	rlcf	___ftdiv@f3,f,c
  5457  001DFA  362F               	rlcf	___ftdiv@f3+1,f,c
  5458  001DFC  3630               	rlcf	___ftdiv@f3+2,f,c
  5459  001DFE  5027               	movf	___ftdiv@f2,w,c
  5460  001E00  5C24               	subwf	___ftdiv@f1,w,c
  5461  001E02  5028               	movf	___ftdiv@f2+1,w,c
  5462  001E04  5825               	subwfb	___ftdiv@f1+1,w,c
  5463  001E06  5029               	movf	___ftdiv@f2+2,w,c
  5464  001E08  5826               	subwfb	___ftdiv@f1+2,w,c
  5465  001E0A  A0D8               	btfss	status,0,c
  5466  001E0C  D007               	goto	l565
  5467  001E0E  5027               	movf	___ftdiv@f2,w,c
  5468  001E10  5E24               	subwf	___ftdiv@f1,f,c
  5469  001E12  5028               	movf	___ftdiv@f2+1,w,c
  5470  001E14  5A25               	subwfb	___ftdiv@f1+1,f,c
  5471  001E16  5029               	movf	___ftdiv@f2+2,w,c
  5472  001E18  5A26               	subwfb	___ftdiv@f1+2,f,c
  5473  001E1A  802E               	bsf	___ftdiv@f3,0,c
  5474  001E1C                     l565:
  5475  001E1C  90D8               	bcf	status,0,c
  5476  001E1E  3624               	rlcf	___ftdiv@f1,f,c
  5477  001E20  3625               	rlcf	___ftdiv@f1+1,f,c
  5478  001E22  3626               	rlcf	___ftdiv@f1+2,f,c
  5479  001E24  2E2D               	decfsz	___ftdiv@cntr,f,c
  5480  001E26  D7E7               	goto	l564
  5481  001E28  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  5482  001E2C  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5483  001E30  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5484  001E34  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  5485  001E38  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  5486  001E3C  EC27  F00F         	call	___ftpack	;wreg free
  5487  001E40  C001  F024         	movff	?___ftpack,?___ftdiv
  5488  001E44  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  5489  001E48  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  5490  001E4C  0012               	return	
  5491  001E4E                     __end_of___ftdiv:
  5492                           	opt stack 0
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           indf0	equ	0xFEF
  5500                           postinc0	equ	0xFEE
  5501                           fsr0h	equ	0xFEA
  5502                           fsr0l	equ	0xFE9
  5503                           wreg	equ	0xFE8
  5504                           indf2	equ	0xFDF
  5505                           postinc2	equ	0xFDE
  5506                           postdec2	equ	0xFDD
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function ___ftpack *****************
  5512 ;; Defined at:
  5513 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  arg             3    0[COMRAM] unsigned um
  5516 ;;  exp             1    3[COMRAM] unsigned char 
  5517 ;;  sign            1    4[COMRAM] unsigned char 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  3    0[COMRAM] float 
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5529 ;;      Params:         5       0       0       0       0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5531 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5532 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5533 ;;Total ram usage:        8 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; This function calls:
  5536 ;;		Nothing
  5537 ;; This function is called by:
  5538 ;;		___ftadd
  5539 ;;		___ftdiv
  5540 ;;		___ftmul
  5541 ;;		___lltoft
  5542 ;;		___lwtoft
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text23
  5547  001E4E                     __ptext23:
  5548                           	opt stack 0
  5549  001E4E                     ___ftpack:
  5550                           	opt stack 27
  5551                           
  5552                           ;incstack = 0
  5553  001E4E  5004               	movf	___ftpack@exp,w,c
  5554  001E50  B4D8               	btfsc	status,2,c
  5555  001E52  D005               	goto	u1560
  5556  001E54  5001               	movf	___ftpack@arg,w,c
  5557  001E56  1002               	iorwf	___ftpack@arg+1,w,c
  5558  001E58  1003               	iorwf	___ftpack@arg+2,w,c
  5559  001E5A  A4D8               	btfss	status,2,c
  5560  001E5C  D00C               	goto	l497
  5561  001E5E                     u1560:
  5562  001E5E  0E00               	movlw	0
  5563  001E60  6E01               	movwf	?___ftpack,c
  5564  001E62  0E00               	movlw	0
  5565  001E64  6E02               	movwf	?___ftpack+1,c
  5566  001E66  0E00               	movlw	0
  5567  001E68  6E03               	movwf	?___ftpack+2,c
  5568  001E6A  0012               	return	
  5569  001E6C  2A04               	incf	___ftpack@exp,f,c
  5570  001E6E  90D8               	bcf	status,0,c
  5571  001E70  3203               	rrcf	___ftpack@arg+2,f,c
  5572  001E72  3202               	rrcf	___ftpack@arg+1,f,c
  5573  001E74  3201               	rrcf	___ftpack@arg,f,c
  5574  001E76                     l497:
  5575  001E76  0E00               	movlw	0
  5576  001E78  1401               	andwf	___ftpack@arg,w,c
  5577  001E7A  6E06               	movwf	??___ftpack& (0+255),c
  5578  001E7C  0E00               	movlw	0
  5579  001E7E  1402               	andwf	___ftpack@arg+1,w,c
  5580  001E80  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5581  001E82  0EFE               	movlw	254
  5582  001E84  1403               	andwf	___ftpack@arg+2,w,c
  5583  001E86  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5584  001E88  5006               	movf	??___ftpack,w,c
  5585  001E8A  1007               	iorwf	??___ftpack+1,w,c
  5586  001E8C  1008               	iorwf	??___ftpack+2,w,c
  5587  001E8E  B4D8               	btfsc	status,2,c
  5588  001E90  D00C               	goto	l500
  5589  001E92  D7EC               	goto	l498
  5590  001E94  2A04               	incf	___ftpack@exp,f,c
  5591  001E96  0E01               	movlw	1
  5592  001E98  2601               	addwf	___ftpack@arg,f,c
  5593  001E9A  0E00               	movlw	0
  5594  001E9C  2202               	addwfc	___ftpack@arg+1,f,c
  5595  001E9E  0E00               	movlw	0
  5596  001EA0  2203               	addwfc	___ftpack@arg+2,f,c
  5597  001EA2  90D8               	bcf	status,0,c
  5598  001EA4  3203               	rrcf	___ftpack@arg+2,f,c
  5599  001EA6  3202               	rrcf	___ftpack@arg+1,f,c
  5600  001EA8  3201               	rrcf	___ftpack@arg,f,c
  5601  001EAA                     l500:
  5602  001EAA  0E00               	movlw	0
  5603  001EAC  1401               	andwf	___ftpack@arg,w,c
  5604  001EAE  6E06               	movwf	??___ftpack& (0+255),c
  5605  001EB0  0E00               	movlw	0
  5606  001EB2  1402               	andwf	___ftpack@arg+1,w,c
  5607  001EB4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5608  001EB6  0EFF               	movlw	255
  5609  001EB8  1403               	andwf	___ftpack@arg+2,w,c
  5610  001EBA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5611  001EBC  5006               	movf	??___ftpack,w,c
  5612  001EBE  1007               	iorwf	??___ftpack+1,w,c
  5613  001EC0  1008               	iorwf	??___ftpack+2,w,c
  5614  001EC2  B4D8               	btfsc	status,2,c
  5615  001EC4  D006               	goto	l503
  5616  001EC6  D7E6               	goto	l501
  5617  001EC8  0604               	decf	___ftpack@exp,f,c
  5618  001ECA  90D8               	bcf	status,0,c
  5619  001ECC  3601               	rlcf	___ftpack@arg,f,c
  5620  001ECE  3602               	rlcf	___ftpack@arg+1,f,c
  5621  001ED0  3603               	rlcf	___ftpack@arg+2,f,c
  5622  001ED2                     l503:
  5623  001ED2  BE02               	btfsc	___ftpack@arg+1,7,c
  5624  001ED4  D003               	goto	u1600
  5625  001ED6  0E02               	movlw	2
  5626  001ED8  6004               	cpfslt	___ftpack@exp,c
  5627  001EDA  D7F6               	goto	l504
  5628  001EDC                     u1600:
  5629  001EDC  A004               	btfss	___ftpack@exp,0,c
  5630  001EDE  9E02               	bcf	___ftpack@arg+1,7,c
  5631  001EE0  90D8               	bcf	status,0,c
  5632  001EE2  3204               	rrcf	___ftpack@exp,f,c
  5633  001EE4  5004               	movf	___ftpack@exp,w,c
  5634  001EE6  1203               	iorwf	___ftpack@arg+2,f,c
  5635  001EE8  5005               	movf	___ftpack@sign,w,c
  5636  001EEA  A4D8               	btfss	status,2,c
  5637  001EEC  8E03               	bsf	___ftpack@arg+2,7,c
  5638  001EEE  C001  F001         	movff	___ftpack@arg,?___ftpack
  5639  001EF2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5640  001EF6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5641  001EFA  0012               	return	
  5642  001EFC                     __end_of___ftpack:
  5643                           	opt stack 0
  5644                           tblptru	equ	0xFF8
  5645                           tblptrh	equ	0xFF7
  5646                           tblptrl	equ	0xFF6
  5647                           tablat	equ	0xFF5
  5648                           prodh	equ	0xFF4
  5649                           prodl	equ	0xFF3
  5650                           indf0	equ	0xFEF
  5651                           postinc0	equ	0xFEE
  5652                           fsr0h	equ	0xFEA
  5653                           fsr0l	equ	0xFE9
  5654                           wreg	equ	0xFE8
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _LCD_gotoXY *****************
  5663 ;; Defined at:
  5664 ;;		line 55 in file "LCD_libreria.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  x               2    1[COMRAM] int 
  5667 ;;  y               2    3[COMRAM] int 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;		None
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5679 ;;      Params:         4       0       0       0       0       0       0       0       0
  5680 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5682 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5683 ;;Total ram usage:        4 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    2
  5686 ;; This function calls:
  5687 ;;		_WriteCmdXLCD
  5688 ;; This function is called by:
  5689 ;;		_main
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text24
  5694  0024DA                     __ptext24:
  5695                           	opt stack 0
  5696  0024DA                     _LCD_gotoXY:
  5697                           	opt stack 28
  5698                           
  5699                           ;LCD_libreria.c: 57: if ( x>0 ){WriteCmdXLCD(0b11000000+y);}
  5700                           
  5701                           ;incstack = 0
  5702  0024DA  BE03               	btfsc	LCD_gotoXY@x+1,7,c
  5703  0024DC  D00A               	goto	l74
  5704  0024DE  5003               	movf	LCD_gotoXY@x+1,w,c
  5705  0024E0  E103               	bnz	u2580
  5706  0024E2  0402               	decf	LCD_gotoXY@x,w,c
  5707  0024E4  A0D8               	btfss	status,0,c
  5708  0024E6  D005               	goto	l74
  5709  0024E8                     u2580:
  5710  0024E8  5004               	movf	LCD_gotoXY@y,w,c
  5711  0024EA  0FC0               	addlw	192
  5712  0024EC  ECCF  F011         	call	_WriteCmdXLCD
  5713  0024F0  0012               	return	
  5714  0024F2                     l74:
  5715                           
  5716                           ;LCD_libreria.c: 58: else {WriteCmdXLCD(0b10000000+y);}
  5717  0024F2  5004               	movf	LCD_gotoXY@y,w,c
  5718  0024F4  0F80               	addlw	128
  5719  0024F6  ECCF  F011         	call	_WriteCmdXLCD
  5720  0024FA  0012               	return	
  5721  0024FC                     __end_of_LCD_gotoXY:
  5722                           	opt stack 0
  5723                           tblptru	equ	0xFF8
  5724                           tblptrh	equ	0xFF7
  5725                           tblptrl	equ	0xFF6
  5726                           tablat	equ	0xFF5
  5727                           prodh	equ	0xFF4
  5728                           prodl	equ	0xFF3
  5729                           indf0	equ	0xFEF
  5730                           postinc0	equ	0xFEE
  5731                           fsr0h	equ	0xFEA
  5732                           fsr0l	equ	0xFE9
  5733                           wreg	equ	0xFE8
  5734                           indf2	equ	0xFDF
  5735                           postinc2	equ	0xFDE
  5736                           postdec2	equ	0xFDD
  5737                           fsr2h	equ	0xFDA
  5738                           fsr2l	equ	0xFD9
  5739                           status	equ	0xFD8
  5740                           
  5741 ;; *************** function _LCD_Init *****************
  5742 ;; Defined at:
  5743 ;;		line 45 in file "Programa_principal.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;		None
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;		None
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  1    wreg      void 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, cstack
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5757 ;;      Params:         0       0       0       0       0       0       0       0       0
  5758 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5760 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5761 ;;Total ram usage:        0 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    3
  5764 ;; This function calls:
  5765 ;;		_BusyXLCD
  5766 ;;		_OpenXLCD
  5767 ;;		_WriteCmdXLCD
  5768 ;; This function is called by:
  5769 ;;		_main
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           	psect	text25
  5774  00253A                     __ptext25:
  5775                           	opt stack 0
  5776  00253A                     _LCD_Init:
  5777                           	opt stack 27
  5778                           
  5779                           ;Programa_principal.c: 46: OpenXLCD(0b00101100 & 0b00111000 );
  5780                           
  5781                           ;incstack = 0
  5782  00253A  0E28               	movlw	40
  5783  00253C  EC7E  F00F         	call	_OpenXLCD
  5784  002540  ECEE  F011         	call	_BusyXLCD	;wreg free
  5785  002544  0900               	iorlw	0
  5786  002546  A4D8               	btfss	status,2,c
  5787  002548  D7FB               	goto	l30
  5788                           
  5789                           ;Programa_principal.c: 48: WriteCmdXLCD(0x06);
  5790  00254A  0E06               	movlw	6
  5791  00254C  ECCF  F011         	call	_WriteCmdXLCD
  5792                           
  5793                           ;Programa_principal.c: 49: WriteCmdXLCD(0x0C);
  5794  002550  0E0C               	movlw	12
  5795  002552  ECCF  F011         	call	_WriteCmdXLCD
  5796  002556  0012               	return		;funcret
  5797  002558                     __end_of_LCD_Init:
  5798                           	opt stack 0
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           indf0	equ	0xFEF
  5806                           postinc0	equ	0xFEE
  5807                           fsr0h	equ	0xFEA
  5808                           fsr0l	equ	0xFE9
  5809                           wreg	equ	0xFE8
  5810                           indf2	equ	0xFDF
  5811                           postinc2	equ	0xFDE
  5812                           postdec2	equ	0xFDD
  5813                           fsr2h	equ	0xFDA
  5814                           fsr2l	equ	0xFD9
  5815                           status	equ	0xFD8
  5816                           
  5817 ;; *************** function _OpenXLCD *****************
  5818 ;; Defined at:
  5819 ;;		line 74 in file "LCD_libreria.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  lcdtype         1    wreg     unsigned char 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  lcdtype         1    4[COMRAM] unsigned char 
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  1    wreg      void 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2, status,0, cstack
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5833 ;;      Params:         0       0       0       0       0       0       0       0       0
  5834 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5836 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5837 ;;Total ram usage:        1 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    2
  5840 ;; This function calls:
  5841 ;;		_BusyXLCD
  5842 ;;		_DelayPORXLCD
  5843 ;;		_SetDDRamAddr
  5844 ;;		_WriteCmdXLCD
  5845 ;; This function is called by:
  5846 ;;		_LCD_Init
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text26
  5851  001EFC                     __ptext26:
  5852                           	opt stack 0
  5853  001EFC                     _OpenXLCD:
  5854                           	opt stack 27
  5855                           
  5856                           ;incstack = 0
  5857                           ;OpenXLCD@lcdtype stored from wreg
  5858  001EFC  6E05               	movwf	OpenXLCD@lcdtype,c
  5859                           
  5860                           ;LCD_libreria.c: 86: PORTD &= 0xf0;
  5861  001EFE  0EF0               	movlw	240
  5862  001F00  1683               	andwf	3971,f,c	;volatile
  5863                           
  5864                           ;LCD_libreria.c: 87: TRISD &= 0xF0;
  5865  001F02  0EF0               	movlw	240
  5866  001F04  1695               	andwf	3989,f,c	;volatile
  5867                           
  5868                           ;LCD_libreria.c: 90: TRISDbits.TRISD6 = 0;
  5869  001F06  9C95               	bcf	3989,6,c	;volatile
  5870                           
  5871                           ;LCD_libreria.c: 91: TRISDbits.TRISD5 = 0;
  5872  001F08  9A95               	bcf	3989,5,c	;volatile
  5873                           
  5874                           ;LCD_libreria.c: 92: TRISDbits.TRISD4 = 0;
  5875  001F0A  9895               	bcf	3989,4,c	;volatile
  5876                           
  5877                           ;LCD_libreria.c: 93: LATDbits.LATD6 = 0;
  5878  001F0C  9C8C               	bcf	3980,6,c	;volatile
  5879                           
  5880                           ;LCD_libreria.c: 94: LATDbits.LATD5 = 0;
  5881  001F0E  9A8C               	bcf	3980,5,c	;volatile
  5882                           
  5883                           ;LCD_libreria.c: 95: LATDbits.LATD4 = 0;
  5884  001F10  988C               	bcf	3980,4,c	;volatile
  5885                           
  5886                           ;LCD_libreria.c: 98: DelayPORXLCD();
  5887  001F12  ECB9  F012         	call	_DelayPORXLCD	;wreg free
  5888                           
  5889                           ;LCD_libreria.c: 100: WriteCmdXLCD(0x30);
  5890  001F16  0E30               	movlw	48
  5891  001F18  ECCF  F011         	call	_WriteCmdXLCD
  5892                           
  5893                           ;LCD_libreria.c: 101: _delay((unsigned long)((1)*(20000000L/4000000.0)));
  5894  001F1C  D000               	nop2		;2 cycle nop
  5895  001F1E  D000               	nop2		;2 cycle nop
  5896  001F20  F000               	nop	
  5897                           
  5898                           ;LCD_libreria.c: 103: WriteCmdXLCD(0x30);
  5899  001F22  0E30               	movlw	48
  5900  001F24  ECCF  F011         	call	_WriteCmdXLCD
  5901                           
  5902                           ;LCD_libreria.c: 104: _delay((unsigned long)((1)*(20000000L/4000000.0)));
  5903  001F28  D000               	nop2		;2 cycle nop
  5904  001F2A  D000               	nop2		;2 cycle nop
  5905  001F2C  F000               	nop	
  5906                           
  5907                           ;LCD_libreria.c: 107: WriteCmdXLCD(0x32);
  5908  001F2E  0E32               	movlw	50
  5909  001F30  ECCF  F011         	call	_WriteCmdXLCD
  5910  001F34  ECEE  F011         	call	_BusyXLCD	;wreg free
  5911  001F38  0900               	iorlw	0
  5912  001F3A  A4D8               	btfss	status,2,c
  5913  001F3C  D7FB               	goto	l85
  5914  001F3E                     u2040:
  5915                           
  5916                           ;LCD_libreria.c: 113: while(BusyXLCD());
  5917  001F3E  ECEE  F011         	call	_BusyXLCD	;wreg free
  5918  001F42  0900               	iorlw	0
  5919  001F44  A4D8               	btfss	status,2,c
  5920  001F46  D7FB               	goto	u2040
  5921                           
  5922                           ;LCD_libreria.c: 114: WriteCmdXLCD(lcdtype);
  5923  001F48  5005               	movf	OpenXLCD@lcdtype,w,c
  5924  001F4A  ECCF  F011         	call	_WriteCmdXLCD
  5925  001F4E  ECEE  F011         	call	_BusyXLCD	;wreg free
  5926  001F52  0900               	iorlw	0
  5927  001F54  A4D8               	btfss	status,2,c
  5928  001F56  D7FB               	goto	l91
  5929                           
  5930                           ;LCD_libreria.c: 118: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  5931  001F58  0E08               	movlw	8
  5932  001F5A  ECCF  F011         	call	_WriteCmdXLCD
  5933  001F5E  ECEE  F011         	call	_BusyXLCD	;wreg free
  5934  001F62  0900               	iorlw	0
  5935  001F64  A4D8               	btfss	status,2,c
  5936  001F66  D7FB               	goto	l94
  5937                           
  5938                           ;LCD_libreria.c: 120: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  5939  001F68  0E0F               	movlw	15
  5940  001F6A  ECCF  F011         	call	_WriteCmdXLCD
  5941  001F6E  ECEE  F011         	call	_BusyXLCD	;wreg free
  5942  001F72  0900               	iorlw	0
  5943  001F74  A4D8               	btfss	status,2,c
  5944  001F76  D7FB               	goto	l97
  5945                           
  5946                           ;LCD_libreria.c: 124: WriteCmdXLCD(0x01);
  5947  001F78  0E01               	movlw	1
  5948  001F7A  ECCF  F011         	call	_WriteCmdXLCD
  5949  001F7E  ECEE  F011         	call	_BusyXLCD	;wreg free
  5950  001F82  0900               	iorlw	0
  5951  001F84  A4D8               	btfss	status,2,c
  5952  001F86  D7FB               	goto	l100
  5953                           
  5954                           ;LCD_libreria.c: 128: WriteCmdXLCD(0b00000100);
  5955  001F88  0E04               	movlw	4
  5956  001F8A  ECCF  F011         	call	_WriteCmdXLCD
  5957  001F8E  ECEE  F011         	call	_BusyXLCD	;wreg free
  5958  001F92  0900               	iorlw	0
  5959  001F94  A4D8               	btfss	status,2,c
  5960  001F96  D7FB               	goto	l103
  5961                           
  5962                           ;LCD_libreria.c: 132: SetDDRamAddr(0x80);
  5963  001F98  0E80               	movlw	128
  5964  001F9A  EC62  F011         	call	_SetDDRamAddr
  5965  001F9E  0012               	return	
  5966  001FA0                     __end_of_OpenXLCD:
  5967                           	opt stack 0
  5968                           tblptru	equ	0xFF8
  5969                           tblptrh	equ	0xFF7
  5970                           tblptrl	equ	0xFF6
  5971                           tablat	equ	0xFF5
  5972                           prodh	equ	0xFF4
  5973                           prodl	equ	0xFF3
  5974                           indf0	equ	0xFEF
  5975                           postinc0	equ	0xFEE
  5976                           fsr0h	equ	0xFEA
  5977                           fsr0l	equ	0xFE9
  5978                           wreg	equ	0xFE8
  5979                           indf2	equ	0xFDF
  5980                           postinc2	equ	0xFDE
  5981                           postdec2	equ	0xFDD
  5982                           fsr2h	equ	0xFDA
  5983                           fsr2l	equ	0xFD9
  5984                           status	equ	0xFD8
  5985                           
  5986 ;; *************** function _WriteCmdXLCD *****************
  5987 ;; Defined at:
  5988 ;;		line 162 in file "LCD_libreria.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  cmd             1    wreg     unsigned char 
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;  cmd             1    0[COMRAM] unsigned char 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, status,2, status,0, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6002 ;;      Params:         0       0       0       0       0       0       0       0       0
  6003 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6004 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6005 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6006 ;;Total ram usage:        1 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    1
  6009 ;; This function calls:
  6010 ;;		_DelayFor18TCY
  6011 ;; This function is called by:
  6012 ;;		_LCD_Init
  6013 ;;		_main
  6014 ;;		_LCD_gotoXY
  6015 ;;		_OpenXLCD
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text27
  6020  00239E                     __ptext27:
  6021                           	opt stack 0
  6022  00239E                     _WriteCmdXLCD:
  6023                           	opt stack 29
  6024                           
  6025                           ;incstack = 0
  6026                           ;WriteCmdXLCD@cmd stored from wreg
  6027  00239E  6E01               	movwf	WriteCmdXLCD@cmd,c
  6028                           
  6029                           ;LCD_libreria.c: 181: TRISD &= 0xf0;
  6030  0023A0  0EF0               	movlw	240
  6031  0023A2  1695               	andwf	3989,f,c	;volatile
  6032                           
  6033                           ;LCD_libreria.c: 182: PORTD &= 0xf0;
  6034  0023A4  0EF0               	movlw	240
  6035  0023A6  1683               	andwf	3971,f,c	;volatile
  6036                           
  6037                           ;LCD_libreria.c: 183: PORTD |= (cmd>>4)&0x0f;
  6038  0023A8  3801               	swapf	WriteCmdXLCD@cmd,w,c
  6039  0023AA  0B0F               	andlw	15
  6040  0023AC  0B0F               	andlw	15
  6041  0023AE  1283               	iorwf	3971,f,c	;volatile
  6042                           
  6043                           ;LCD_libreria.c: 185: LATDbits.LATD6 = 0;
  6044  0023B0  9C8C               	bcf	3980,6,c	;volatile
  6045                           
  6046                           ;LCD_libreria.c: 186: LATDbits.LATD5 = 0;
  6047  0023B2  9A8C               	bcf	3980,5,c	;volatile
  6048                           
  6049                           ;LCD_libreria.c: 187: DelayFor18TCY();
  6050  0023B4  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6051                           
  6052                           ;LCD_libreria.c: 188: LATDbits.LATD4 = 1;
  6053  0023B8  888C               	bsf	3980,4,c	;volatile
  6054                           
  6055                           ;LCD_libreria.c: 189: DelayFor18TCY();
  6056  0023BA  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6057                           
  6058                           ;LCD_libreria.c: 190: LATDbits.LATD4 = 0;
  6059  0023BE  988C               	bcf	3980,4,c	;volatile
  6060                           
  6061                           ;LCD_libreria.c: 195: PORTD &= 0xf0;
  6062  0023C0  0EF0               	movlw	240
  6063  0023C2  1683               	andwf	3971,f,c	;volatile
  6064                           
  6065                           ;LCD_libreria.c: 196: PORTD |= cmd&0x0f;
  6066  0023C4  5001               	movf	WriteCmdXLCD@cmd,w,c
  6067  0023C6  0B0F               	andlw	15
  6068  0023C8  1283               	iorwf	3971,f,c	;volatile
  6069                           
  6070                           ;LCD_libreria.c: 198: DelayFor18TCY();
  6071  0023CA  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6072                           
  6073                           ;LCD_libreria.c: 199: LATDbits.LATD4 = 1;
  6074  0023CE  888C               	bsf	3980,4,c	;volatile
  6075                           
  6076                           ;LCD_libreria.c: 200: DelayFor18TCY();
  6077  0023D0  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6078                           
  6079                           ;LCD_libreria.c: 201: LATDbits.LATD4 = 0;
  6080  0023D4  988C               	bcf	3980,4,c	;volatile
  6081                           
  6082                           ;LCD_libreria.c: 205: TRISD |= 0x0f;
  6083  0023D6  0E0F               	movlw	15
  6084  0023D8  1295               	iorwf	3989,f,c	;volatile
  6085  0023DA  0012               	return	
  6086  0023DC                     __end_of_WriteCmdXLCD:
  6087                           	opt stack 0
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodh	equ	0xFF4
  6093                           prodl	equ	0xFF3
  6094                           indf0	equ	0xFEF
  6095                           postinc0	equ	0xFEE
  6096                           fsr0h	equ	0xFEA
  6097                           fsr0l	equ	0xFE9
  6098                           wreg	equ	0xFE8
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _SetDDRamAddr *****************
  6107 ;; Defined at:
  6108 ;;		line 303 in file "LCD_libreria.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  DDaddr          1    wreg     unsigned char 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  DDaddr          1    3[COMRAM] unsigned char 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0, cstack
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6122 ;;      Params:         0       0       0       0       0       0       0       0       0
  6123 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6124 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6125 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6126 ;;Total ram usage:        4 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    1
  6129 ;; This function calls:
  6130 ;;		_DelayFor18TCY
  6131 ;; This function is called by:
  6132 ;;		_OpenXLCD
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text28
  6137  0022C4                     __ptext28:
  6138                           	opt stack 0
  6139  0022C4                     _SetDDRamAddr:
  6140                           	opt stack 27
  6141                           
  6142                           ;incstack = 0
  6143                           ;SetDDRamAddr@DDaddr stored from wreg
  6144  0022C4  6E04               	movwf	SetDDRamAddr@DDaddr,c
  6145                           
  6146                           ;LCD_libreria.c: 322: TRISD &= 0xf0;
  6147  0022C6  0EF0               	movlw	240
  6148  0022C8  1695               	andwf	3989,f,c	;volatile
  6149                           
  6150                           ;LCD_libreria.c: 323: PORTD &= 0xf0;
  6151  0022CA  0EF0               	movlw	240
  6152  0022CC  1683               	andwf	3971,f,c	;volatile
  6153                           
  6154                           ;LCD_libreria.c: 324: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  6155  0022CE  5004               	movf	SetDDRamAddr@DDaddr,w,c
  6156  0022D0  6E01               	movwf	??_SetDDRamAddr& (0+255),c
  6157  0022D2  6A02               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  6158  0022D4  8E01               	bsf	??_SetDDRamAddr,7,c
  6159  0022D6  0E04               	movlw	4
  6160  0022D8  6E03               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  6161  0022DA                     u1645:
  6162  0022DA  3402               	rlcf	??_SetDDRamAddr+1,w,c
  6163  0022DC  3202               	rrcf	??_SetDDRamAddr+1,f,c
  6164  0022DE  3201               	rrcf	??_SetDDRamAddr,f,c
  6165  0022E0  2E03               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  6166  0022E2  D7FB               	goto	u1645
  6167  0022E4  5001               	movf	??_SetDDRamAddr,w,c
  6168  0022E6  0B0F               	andlw	15
  6169  0022E8  1283               	iorwf	3971,f,c	;volatile
  6170                           
  6171                           ;LCD_libreria.c: 326: LATDbits.LATD6 = 0;
  6172  0022EA  9C8C               	bcf	3980,6,c	;volatile
  6173                           
  6174                           ;LCD_libreria.c: 327: LATDbits.LATD5 = 0;
  6175  0022EC  9A8C               	bcf	3980,5,c	;volatile
  6176                           
  6177                           ;LCD_libreria.c: 328: DelayFor18TCY();
  6178  0022EE  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6179                           
  6180                           ;LCD_libreria.c: 329: LATDbits.LATD4 = 1;
  6181  0022F2  888C               	bsf	3980,4,c	;volatile
  6182                           
  6183                           ;LCD_libreria.c: 330: DelayFor18TCY();
  6184  0022F4  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6185                           
  6186                           ;LCD_libreria.c: 331: LATDbits.LATD4 = 0;
  6187  0022F8  988C               	bcf	3980,4,c	;volatile
  6188                           
  6189                           ;LCD_libreria.c: 336: PORTD &= 0xf0;
  6190  0022FA  0EF0               	movlw	240
  6191  0022FC  1683               	andwf	3971,f,c	;volatile
  6192                           
  6193                           ;LCD_libreria.c: 337: PORTD |= (DDaddr&0x0f);
  6194  0022FE  5004               	movf	SetDDRamAddr@DDaddr,w,c
  6195  002300  0B0F               	andlw	15
  6196  002302  1283               	iorwf	3971,f,c	;volatile
  6197                           
  6198                           ;LCD_libreria.c: 339: DelayFor18TCY();
  6199  002304  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6200                           
  6201                           ;LCD_libreria.c: 340: LATDbits.LATD4 = 1;
  6202  002308  888C               	bsf	3980,4,c	;volatile
  6203                           
  6204                           ;LCD_libreria.c: 341: DelayFor18TCY();
  6205  00230A  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6206                           
  6207                           ;LCD_libreria.c: 342: LATDbits.LATD4 = 0;
  6208  00230E  988C               	bcf	3980,4,c	;volatile
  6209                           
  6210                           ;LCD_libreria.c: 346: TRISD |= 0x0f;
  6211  002310  0E0F               	movlw	15
  6212  002312  1295               	iorwf	3989,f,c	;volatile
  6213  002314  0012               	return	
  6214  002316                     __end_of_SetDDRamAddr:
  6215                           	opt stack 0
  6216                           tblptru	equ	0xFF8
  6217                           tblptrh	equ	0xFF7
  6218                           tblptrl	equ	0xFF6
  6219                           tablat	equ	0xFF5
  6220                           prodh	equ	0xFF4
  6221                           prodl	equ	0xFF3
  6222                           indf0	equ	0xFEF
  6223                           postinc0	equ	0xFEE
  6224                           fsr0h	equ	0xFEA
  6225                           fsr0l	equ	0xFE9
  6226                           wreg	equ	0xFE8
  6227                           indf2	equ	0xFDF
  6228                           postinc2	equ	0xFDE
  6229                           postdec2	equ	0xFDD
  6230                           fsr2h	equ	0xFDA
  6231                           fsr2l	equ	0xFD9
  6232                           status	equ	0xFD8
  6233                           
  6234 ;; *************** function _DelayPORXLCD *****************
  6235 ;; Defined at:
  6236 ;;		line 44 in file "LCD_libreria.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;		None
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      void 
  6243 ;; Registers used:
  6244 ;;		wreg
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0
  6251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6252 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6253 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6254 ;;Total ram usage:        1 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; This function calls:
  6257 ;;		Nothing
  6258 ;; This function is called by:
  6259 ;;		_OpenXLCD
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	text29
  6264  002572                     __ptext29:
  6265                           	opt stack 0
  6266  002572                     _DelayPORXLCD:
  6267                           	opt stack 28
  6268                           
  6269                           ;LCD_libreria.c: 45: _delay((unsigned long)((15)*(20000000L/4000.0)));
  6270                           
  6271                           ;incstack = 0
  6272  002572  0E62               	movlw	98
  6273  002574  6E01               	movwf	??_DelayPORXLCD& (0+255),c
  6274  002576  0E66               	movlw	102
  6275  002578                     u3137:
  6276  002578  2EE8               	decfsz	wreg,f,c
  6277  00257A  D7FE               	bra	u3137
  6278  00257C  2E01               	decfsz	??_DelayPORXLCD& (0+255),f,c
  6279  00257E  D7FC               	bra	u3137
  6280  002580  0012               	return	
  6281  002582                     __end_of_DelayPORXLCD:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           indf0	equ	0xFEF
  6290                           postinc0	equ	0xFEE
  6291                           fsr0h	equ	0xFEA
  6292                           fsr0l	equ	0xFE9
  6293                           wreg	equ	0xFE8
  6294                           indf2	equ	0xFDF
  6295                           postinc2	equ	0xFDE
  6296                           postdec2	equ	0xFDD
  6297                           fsr2h	equ	0xFDA
  6298                           fsr2l	equ	0xFD9
  6299                           status	equ	0xFD8
  6300                           
  6301 ;; *************** function _BusyXLCD *****************
  6302 ;; Defined at:
  6303 ;;		line 446 in file "LCD_libreria.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      unsigned char 
  6310 ;; Registers used:
  6311 ;;		wreg, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0
  6318 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6320 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6321 ;;Total ram usage:        0 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    1
  6324 ;; This function calls:
  6325 ;;		_DelayFor18TCY
  6326 ;; This function is called by:
  6327 ;;		_LCD_Init
  6328 ;;		_OpenXLCD
  6329 ;;		_putrsXLCD
  6330 ;;		_WriteDataXLCD
  6331 ;;		_putsXLCD
  6332 ;;		_SetCGRamAddr
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text30
  6337  0023DC                     __ptext30:
  6338                           	opt stack 0
  6339  0023DC                     _BusyXLCD:
  6340                           	opt stack 27
  6341                           
  6342                           ;LCD_libreria.c: 448: LATDbits.LATD6 = 1;
  6343                           
  6344                           ;incstack = 0
  6345  0023DC  8C8C               	bsf	3980,6,c	;volatile
  6346                           
  6347                           ;LCD_libreria.c: 449: LATDbits.LATD5 = 0;
  6348  0023DE  9A8C               	bcf	3980,5,c	;volatile
  6349                           
  6350                           ;LCD_libreria.c: 450: DelayFor18TCY();
  6351  0023E0  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6352                           
  6353                           ;LCD_libreria.c: 451: LATDbits.LATD4 = 1;
  6354  0023E4  888C               	bsf	3980,4,c	;volatile
  6355                           
  6356                           ;LCD_libreria.c: 452: DelayFor18TCY();
  6357  0023E6  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6358                           
  6359                           ;LCD_libreria.c: 470: if(PORTD&0x08)
  6360  0023EA  A683               	btfss	3971,3,c	;volatile
  6361  0023EC  D00A               	goto	l150
  6362                           
  6363                           ;LCD_libreria.c: 472: {
  6364                           ;LCD_libreria.c: 473: LATDbits.LATD4 = 0;
  6365  0023EE  988C               	bcf	3980,4,c	;volatile
  6366                           
  6367                           ;LCD_libreria.c: 474: DelayFor18TCY();
  6368  0023F0  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6369                           
  6370                           ;LCD_libreria.c: 475: LATDbits.LATD4 = 1;
  6371  0023F4  888C               	bsf	3980,4,c	;volatile
  6372                           
  6373                           ;LCD_libreria.c: 476: DelayFor18TCY();
  6374  0023F6  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6375                           
  6376                           ;LCD_libreria.c: 477: LATDbits.LATD4 = 0;
  6377  0023FA  988C               	bcf	3980,4,c	;volatile
  6378                           
  6379                           ;LCD_libreria.c: 478: LATDbits.LATD6 = 0;
  6380  0023FC  9C8C               	bcf	3980,6,c	;volatile
  6381                           
  6382                           ;LCD_libreria.c: 479: return 1;
  6383  0023FE  0E01               	movlw	1
  6384                           
  6385                           ;LCD_libreria.c: 480: }
  6386  002400  0012               	return	
  6387  002402                     l150:
  6388                           
  6389                           ;LCD_libreria.c: 481: else
  6390                           ;LCD_libreria.c: 482: {
  6391                           ;LCD_libreria.c: 483: LATDbits.LATD4 = 0;
  6392  002402  988C               	bcf	3980,4,c	;volatile
  6393                           
  6394                           ;LCD_libreria.c: 484: DelayFor18TCY();
  6395  002404  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6396                           
  6397                           ;LCD_libreria.c: 485: LATDbits.LATD4 = 1;
  6398  002408  888C               	bsf	3980,4,c	;volatile
  6399                           
  6400                           ;LCD_libreria.c: 486: DelayFor18TCY();
  6401  00240A  ECAC  F012         	call	_DelayFor18TCY	;wreg free
  6402                           
  6403                           ;LCD_libreria.c: 487: LATDbits.LATD4 = 0;
  6404  00240E  988C               	bcf	3980,4,c	;volatile
  6405                           
  6406                           ;LCD_libreria.c: 488: LATDbits.LATD6 = 0;
  6407  002410  9C8C               	bcf	3980,6,c	;volatile
  6408                           
  6409                           ;LCD_libreria.c: 489: return 0;
  6410  002412  0E00               	movlw	0
  6411  002414  0012               	return	
  6412  002416                     __end_of_BusyXLCD:
  6413                           	opt stack 0
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           indf0	equ	0xFEF
  6421                           postinc0	equ	0xFEE
  6422                           fsr0h	equ	0xFEA
  6423                           fsr0l	equ	0xFE9
  6424                           wreg	equ	0xFE8
  6425                           indf2	equ	0xFDF
  6426                           postinc2	equ	0xFDE
  6427                           postdec2	equ	0xFDD
  6428                           fsr2h	equ	0xFDA
  6429                           fsr2l	equ	0xFD9
  6430                           status	equ	0xFD8
  6431                           
  6432 ;; *************** function _DelayFor18TCY *****************
  6433 ;; Defined at:
  6434 ;;		line 27 in file "LCD_libreria.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		None
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0
  6449 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6451 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_WriteCmdXLCD
  6458 ;;		_SetDDRamAddr
  6459 ;;		_WriteDataXLCD
  6460 ;;		_BusyXLCD
  6461 ;;		_ReadAddrXLCD
  6462 ;;		_ReadDataXLCD
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text31
  6467  002558                     __ptext31:
  6468                           	opt stack 0
  6469  002558                     _DelayFor18TCY:
  6470                           	opt stack 28
  6471                           
  6472                           ;LCD_libreria.c: 28: __nop();
  6473                           
  6474                           ;incstack = 0
  6475  002558  F000               	nop	
  6476                           
  6477                           ;LCD_libreria.c: 29: __nop();
  6478  00255A  F000               	nop	
  6479                           
  6480                           ;LCD_libreria.c: 30: __nop();
  6481  00255C  F000               	nop	
  6482                           
  6483                           ;LCD_libreria.c: 31: __nop();
  6484  00255E  F000               	nop	
  6485                           
  6486                           ;LCD_libreria.c: 32: __nop();
  6487  002560  F000               	nop	
  6488                           
  6489                           ;LCD_libreria.c: 33: __nop();
  6490  002562  F000               	nop	
  6491                           
  6492                           ;LCD_libreria.c: 34: __nop();
  6493  002564  F000               	nop	
  6494                           
  6495                           ;LCD_libreria.c: 35: __nop();
  6496  002566  F000               	nop	
  6497                           
  6498                           ;LCD_libreria.c: 36: __nop();
  6499  002568  F000               	nop	
  6500                           
  6501                           ;LCD_libreria.c: 37: __nop();
  6502  00256A  F000               	nop	
  6503                           
  6504                           ;LCD_libreria.c: 38: __nop();
  6505  00256C  F000               	nop	
  6506                           
  6507                           ;LCD_libreria.c: 39: __nop();
  6508  00256E  F000               	nop	
  6509                           
  6510                           ;LCD_libreria.c: 40: return;
  6511  002570  0012               	return		;funcret
  6512  002572                     __end_of_DelayFor18TCY:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           indf0	equ	0xFEF
  6521                           postinc0	equ	0xFEE
  6522                           fsr0h	equ	0xFEA
  6523                           fsr0l	equ	0xFE9
  6524                           wreg	equ	0xFE8
  6525                           indf2	equ	0xFDF
  6526                           postinc2	equ	0xFDE
  6527                           postdec2	equ	0xFDD
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532 ;; *************** function _ADC_read *****************
  6533 ;; Defined at:
  6534 ;;		line 12 in file "ADC_libreria.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  ch              1    wreg     unsigned char 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  ch              1    2[COMRAM] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  2    0[COMRAM] unsigned int 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6548 ;;      Params:         2       0       0       0       0       0       0       0       0
  6549 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6551 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6552 ;;Total ram usage:        3 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_main
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text32
  6562  002416                     __ptext32:
  6563                           	opt stack 0
  6564  002416                     _ADC_read:
  6565                           	opt stack 30
  6566                           
  6567                           ;incstack = 0
  6568                           ;ADC_read@ch stored from wreg
  6569  002416  6E03               	movwf	ADC_read@ch,c
  6570                           
  6571                           ;ADC_libreria.c: 13: if(ch > 13)return 0;
  6572  002418  0E0D               	movlw	13
  6573  00241A  6403               	cpfsgt	ADC_read@ch,c
  6574  00241C  D005               	goto	l168
  6575  00241E  0E00               	movlw	0
  6576  002420  6E02               	movwf	?_ADC_read+1,c
  6577  002422  0E00               	movlw	0
  6578  002424  6E01               	movwf	?_ADC_read,c
  6579  002426  0012               	return	
  6580  002428                     l168:
  6581                           
  6582                           ;ADC_libreria.c: 14: ADCON0 = 0;
  6583  002428  0E00               	movlw	0
  6584  00242A  6EC2               	movwf	4034,c	;volatile
  6585                           
  6586                           ;ADC_libreria.c: 15: ADCON0 = (ch<<2);
  6587  00242C  4403               	rlncf	ADC_read@ch,w,c
  6588  00242E  46E8               	rlncf	wreg,f,c
  6589  002430  0BFC               	andlw	252
  6590  002432  6EC2               	movwf	4034,c	;volatile
  6591                           
  6592                           ;ADC_libreria.c: 16: ADCON0bits.ADON = 1;
  6593  002434  80C2               	bsf	4034,0,c	;volatile
  6594                           
  6595                           ;ADC_libreria.c: 17: ADCON0bits.GO_DONE = 1;
  6596  002436  82C2               	bsf	4034,1,c	;volatile
  6597  002438  B2C2               	btfsc	4034,1,c	;volatile
  6598  00243A  D7FE               	goto	l171
  6599                           
  6600                           ;ADC_libreria.c: 19: ADCON0bits.ADON = 0;
  6601  00243C  90C2               	bcf	4034,0,c	;volatile
  6602                           
  6603                           ;ADC_libreria.c: 20: return ADRES;
  6604  00243E  CFC3 F001          	movff	4035,?_ADC_read	;volatile
  6605  002442  CFC4 F002          	movff	4036,?_ADC_read+1	;volatile
  6606  002446  0012               	return		;funcret
  6607  002448                     __end_of_ADC_read:
  6608                           	opt stack 0
  6609                           tblptru	equ	0xFF8
  6610                           tblptrh	equ	0xFF7
  6611                           tblptrl	equ	0xFF6
  6612                           tablat	equ	0xFF5
  6613                           prodh	equ	0xFF4
  6614                           prodl	equ	0xFF3
  6615                           indf0	equ	0xFEF
  6616                           postinc0	equ	0xFEE
  6617                           fsr0h	equ	0xFEA
  6618                           fsr0l	equ	0xFE9
  6619                           wreg	equ	0xFE8
  6620                           indf2	equ	0xFDF
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _ADC_init *****************
  6628 ;; Defined at:
  6629 ;;		line 3 in file "ADC_libreria.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      void 
  6636 ;; Registers used:
  6637 ;;		wreg, status,2
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0
  6644 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6646 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6647 ;;Total ram usage:        0 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; This function calls:
  6650 ;;		Nothing
  6651 ;; This function is called by:
  6652 ;;		_main
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text33
  6657  0024B6                     __ptext33:
  6658                           	opt stack 0
  6659  0024B6                     _ADC_init:
  6660                           	opt stack 30
  6661                           
  6662                           ;ADC_libreria.c: 4: ADCON1bits.PCFG = 0;
  6663                           
  6664                           ;incstack = 0
  6665  0024B6  90C1               	bcf	4033,0,c	;volatile
  6666  0024B8  92C1               	bcf	4033,1,c	;volatile
  6667  0024BA  94C1               	bcf	4033,2,c	;volatile
  6668  0024BC  96C1               	bcf	4033,3,c	;volatile
  6669                           
  6670                           ;ADC_libreria.c: 5: ADCON1bits.VCFG = 0;
  6671  0024BE  0ECF               	movlw	-49
  6672  0024C0  16C1               	andwf	4033,f,c	;volatile
  6673                           
  6674                           ;ADC_libreria.c: 6: ADCON0 = 0;
  6675  0024C2  0E00               	movlw	0
  6676  0024C4  6EC2               	movwf	4034,c	;volatile
  6677                           
  6678                           ;ADC_libreria.c: 7: ADCON2bits.ACQT = 3;
  6679  0024C6  50C0               	movf	4032,w,c	;volatile
  6680  0024C8  0BC7               	andlw	-57
  6681  0024CA  0918               	iorlw	24
  6682  0024CC  6EC0               	movwf	4032,c	;volatile
  6683                           
  6684                           ;ADC_libreria.c: 8: ADCON2bits.ADCS = 5;
  6685  0024CE  50C0               	movf	4032,w,c	;volatile
  6686  0024D0  0BF8               	andlw	-8
  6687  0024D2  0905               	iorlw	5
  6688  0024D4  6EC0               	movwf	4032,c	;volatile
  6689                           
  6690                           ;ADC_libreria.c: 9: ADCON2bits.ADFM = 1;
  6691  0024D6  8EC0               	bsf	4032,7,c	;volatile
  6692  0024D8  0012               	return		;funcret
  6693  0024DA                     __end_of_ADC_init:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           indf0	equ	0xFEF
  6702                           postinc0	equ	0xFEE
  6703                           fsr0h	equ	0xFEA
  6704                           fsr0l	equ	0xFE9
  6705                           wreg	equ	0xFE8
  6706                           indf2	equ	0xFDF
  6707                           postinc2	equ	0xFDE
  6708                           postdec2	equ	0xFDD
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           indf0	equ	0xFEF
  6719                           postinc0	equ	0xFEE
  6720                           fsr0h	equ	0xFEA
  6721                           fsr0l	equ	0xFE9
  6722                           wreg	equ	0xFE8
  6723                           indf2	equ	0xFDF
  6724                           postinc2	equ	0xFDE
  6725                           postdec2	equ	0xFDD
  6726                           fsr2h	equ	0xFDA
  6727                           fsr2l	equ	0xFD9
  6728                           status	equ	0xFD8
  6729                           
  6730                           	psect	rparam
  6731  0000                     tblptru	equ	0xFF8
  6732                           tblptrh	equ	0xFF7
  6733                           tblptrl	equ	0xFF6
  6734                           tablat	equ	0xFF5
  6735                           prodh	equ	0xFF4
  6736                           prodl	equ	0xFF3
  6737                           indf0	equ	0xFEF
  6738                           postinc0	equ	0xFEE
  6739                           fsr0h	equ	0xFEA
  6740                           fsr0l	equ	0xFE9
  6741                           wreg	equ	0xFE8
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8


Data Sizes:
    Strings     50
    Constant    118
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      83
    BANK0           160     23      43
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> datos(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 20
		 -> datos(BANK0[20]), STR_3(CODE[12]), STR_2(CODE[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _putrsXLCD->_WriteDataXLCD
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _LCD_gotoXY->_WriteCmdXLCD
    _LCD_Init->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   61653
                                             76 COMRAM     2     2      0
                           _ADC_init
                           _ADC_read
                           _LCD_Init
                         _LCD_gotoXY
                       _WriteCmdXLCD
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                          _putrsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   49397
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11907
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11709
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _putrsXLCD                                            2     0      2     393
                                              1 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      44
                                              0 COMRAM     1     1      0
                           _BusyXLCD
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3063
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCD_gotoXY                                           4     0      4     718
                                              1 COMRAM     4     0      4
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     154
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     110
                                              4 COMRAM     1     1      0
                           _BusyXLCD
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (1) _WriteCmdXLCD                                         1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      44
                                              0 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _LCD_Init
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _DelayPORXLCD
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
   _LCD_gotoXY
     _WriteCmdXLCD
       _DelayFor18TCY
   _WriteCmdXLCD
     _DelayFor18TCY
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _putrsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _BusyXLCD
         _DelayFor18TCY
       _DelayFor18TCY
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      2B       5       26.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      53       1       87.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7E      20        0.0%
DATA                 0      0      7E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 19 21:09:44 2018

                     l30 2540                       l37 1838                       l74 24F2  
                     l91 1F4E                       l85 1F34                       l94 1F5E  
                     l97 1F6E             ___awdiv@sign 000C      ___wmul@multiplicand 0011  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 0039  
           ___ftadd@exp2 0038             ___ftadd@sign 0037                      l100 1F7E  
                    l103 1F8E                      l201 1196                      l202 12E6  
                    l210 0944                      l211 092E                      l108 229C  
                    l204 1396                      l212 08F6                      l109 226A  
                    l221 0F14                      l150 2402                      l230 0BF6  
                    l222 098E                      l223 09D0                      l215 0956  
                    l208 08B6                      l233 0B9E                      l225 0A62  
                    l209 08CC                      l250 0D90                      l226 0AC8  
                    l218 0952                      l171 2438                      l251 0D94  
                    l219 097A                      l500 1EAA                      l260 0F48  
                    l252 0DB6                      l244 0D4C                      l228 0AEE  
                    l501 1E94                      l253 0EE8                      l245 0CB8  
                    l229 0B2E                      l262 0F68                      l254 0E06  
                    l503 1ED2                      l191 1500                      l263 0F8C  
                    l247 0D6C                      l239 0C5C                      l168 2428  
                    l504 1EC8                      l440 2092                      l600 1C3A  
                    l256 0F0A                      l248 0D56                      l441 209C  
                    l433 2044                      l257 0EF4                      l610 2374  
                    l442 20AA                      l434 2054                      l450 2164  
                    l194 15CC                      l259 0F2C                      l604 2484  
                    l532 1688                      l436 2072                      l437 206A  
                    l453 2184                      l197 11BA                      l542 16E4  
                    l622 1D3A                      l614 1CA0                      l454 218E  
                    l446 214A                      l198 10E6                      l551 1722  
                    l543 16DA                      l623 1D2E                      l471 1B44  
                    l455 219C                      l447 2156                      l552 1718  
                    l528 165E                      l616 1D16                      l472 1B34  
                    l561 1D90                      l537 16EE                      l625 1D56  
                    l617 1D06                      l465 1A76                      l449 216C  
                    l554 1746                      l563 1DB8                      l555 1762  
                    l467 1A94                      l571 197E                      l564 1DF6  
                    l556 1792                      l660 2124                      l468 1AD6  
                    l572 19B8                      l565 1E1C                      l477 1B68  
                    l469 1B06                      l581 1A40                      l573 19E0  
                    l629 2532                      l670 21FA                      l478 1B5C  
                    l582 1A34                      l655 20E2                      l575 1A1C  
                    l656 20D6                      l576 1A0C                      l497 1E76  
                    l665 21C4                      l569 1952                      l593 1BA8  
                    l498 1E6C                      l586 1FD0                      l666 21B8  
                    l587 2000                      l659 2116                      l595 1BD0  
                    l676 221E                      l596 1C02                      l669 21EC  
                    l677 2212                      l597 1C12                      l599 1C2A  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000              ?_LCD_gotoXY 0002  
           __CFG_BOR$OFF 000000    __size_of_WriteCmdXLCD 003E             ___awmod@sign 0006  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           ___ftdiv@cntr 002D             ___ftdiv@sign 0032             __CFG_WDT$OFF 000000  
                   l2114 202C                     l3022 0D56                     l2502 2318  
                   l3084 0F88                     l2974 0B78                     l2966 0B2E  
                   l2994 0C60                     STR_1 0877                     STR_2 0888  
                   STR_3 0898                     STR_4 08A4                     u2010 2170  
                   u2040 1F3E                     u3001 1DA0                     u2211 1936  
                   u2231 1962                     u1600 1EDC                     u3107 1824  
                   u2421 1C84                     u3117 1862                     u2510 20E6  
                   u3127 1916                     u1560 1E5E                     u2600 2294  
                   u1720 167A                     u2440 1CBE                     u2360 1B6E  
                   u3137 2578                     u2610 22BC                     u2290 1A46  
                   u1651 161C                     u1820 172A                     u2540 21C8  
                   u1645 22DA                     u1661 1630                     u2445 1CB6  
                   u1750 16B8                     u2607 228A                     u2480 1D40  
                   u2800 0B78                     u2720 0A08                     u2617 22B2  
                   u3097 17EE                     u1690 1650                     u2580 24E8  
                   u1861 1B90                     u2725 09FE                     u1790 16F6  
                   u1950 2076                     u2840 0C98                     u2760 0B00  
                   u1881 1BB8                     u2770 0B40                     u2870 0D7A  
                   u2880 0D8A                     u2970 0FA4                     u2981 1D78  
                   _main 17B8             ___ftpack@arg 0001             ___ftpack@exp 0004  
                   fsr0h 000FEA                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr2l 000FD9  
 __size_of_WriteDataXLCD 0048                     prodh 000FF4                     prodl 000FF3  
                   start 0000         __end_of_ADC_init 24DA         __end_of_ADC_read 2448  
          __CFG_IESO$OFF 000000             _sprintf$1016 0060            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0022             ___param_bank 000000             ___ftmul@sign 0023  
           ___fttol@exp1 0039             ___fttol@lval 0035             _WriteCmdXLCD 239E  
       __end_of_LCD_Init 2558            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
          ?_SetDDRamAddr 0001                    ?_main 0001          __end_of___awdiv 20B4  
                  _ADRES 000FC3          __end_of___ftadd 17B8          __end_of___awmod 21A6  
        __end_of___ftdiv 1E4E          __end_of___ftneg 2492          __end_of___lldiv 2136  
        __end_of___ftmul 1C74          ___awdiv@divisor 0009          __end_of___llmod 220C  
        __end_of___ftsub 239E          __end_of___fttol 1D68          ___awdiv@counter 000B  
                  _PORTD 000F83            __CFG_USBDIV$1 000000                    _TRISA 000F92  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
           ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _datos 0077          __end_of_dpowers 0829  
                  _scale 0FB2          __end_of_isdigit 253A            ___ftpack@sign 0005  
                  _valor 0052                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 0FB2           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
    __size_of_LCD_gotoXY 0022          __initialization 24FC              LCD_gotoXY@x 0002  
            LCD_gotoXY@y 0004             __end_of_main 1926         __end_of_BusyXLCD 2416  
  __size_of_DelayPORXLCD 0010           ??_SetDDRamAddr 0001         __end_of_OpenXLCD 1FA0  
                 ??_main 004D            ___fttol@sign1 0034            __activetblptr 000002  
          _WriteDataXLCD 2316     __size_of__tdiv_to_l_ 0132                   _ADCON0 000FC2  
       ___llmod@dividend 0001                   ?_scale 0024         ___awdiv@dividend 0007  
       __end_of___ftpack 1EFC         __end_of___lltoft 2268         __end_of___lwtoft 24B6  
           _DelayPORXLCD 2572           __CFG_XINST$OFF 000000         __end_of__powers_ 0850  
                 ___ftge 1FA0                   ___wmul 2448                ??___awdiv 000B  
              ??___ftadd 0034           __CFG_STVREN$ON 000000                ??___awmod 0005  
              ??___ftdiv 002A                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 001B                ??___llmod 0009                ??___ftsub 0040  
              ??___fttol 002F                   _fround 13BA                   clear_0 2502  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
         ?_WriteDataXLCD 0001    ___ftmul@f3_as_product 001F                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ?_ADC_init 0001                ?_ADC_read 0001  
              ??_sprintf 0047               __accesstop 0060  __end_of__initialization 2512  
              ?_LCD_Init 0001               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftdiv@f1 0024               ___ftdiv@f2 0027               ___ftdiv@f3 002E  
             ___ftneg@f1 0001               ___ftmul@f1 0015               ___ftmul@f2 0018  
             ___ftsub@f1 003A               ___ftsub@f2 003D               ___fttol@f1 002B  
         __pcstackCOMRAM 0001               ___lltoft@c 0009            __end_of_scale 13BA  
             ___lwtoft@c 0009             ??_LCD_gotoXY 0006               __div_to_l_ 1A58  
             ??_ADC_init 0001               ??_ADC_read 0003          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0027   __size_of_DelayFor18TCY 001A  
        __div_to_l_@quot 0007               __pbssBANK0 0077                ?_BusyXLCD 0001  
        WriteCmdXLCD@cmd 0001               ??_LCD_Init 0006     __end_of_SetDDRamAddr 2316  
              ?_OpenXLCD 0001            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
     __end_of_LCD_gotoXY 24FC                  ?___ftge 0001        WriteDataXLCD@data 0001  
                ?___wmul 000F          ??_WriteDataXLCD 0001                  ?_fround 0024  
              ?___ftpack 0001                ?___lltoft 0009                ?___lwtoft 0009  
     __size_of_putrsXLCD 005C               ??_BusyXLCD 0001          __CFG_VREGEN$OFF 000000  
             ADC_read@ch 0003               ??_OpenXLCD 0005        __end_of__npowers_ 0877  
                __Hparam 0000               _scale$1015 0027                  __Lparam 0000  
        __size_of___ftge 0090                  ___awdiv 2030            _DelayFor18TCY 2558  
                ___ftadd 160C                  ___awmod 2136                  ___ftdiv 1D68  
                ___ftneg 246E                  ___lldiv 20B4          __size_of___wmul 0026  
                ___ftmul 1B80                  ___llmod 21A6                  ___ftsub 235E  
                ___fttol 1C74             __psmallconst 0800                  __pcinit 24FC  
             ??___ftpack 0006          putrsXLCD@buffer 0002          __size_of_fround 0252  
                __ramtop 0800               ??___lltoft 000D                  __ptext0 17B8  
                __ptext1 08AA                  __ptext2 0FB2                  __ptext3 251C  
                __ptext4 13BA                  __ptext5 2448                  __ptext6 1B80  
                __ptext7 2136                  __ptext8 2030                  __ptext9 1926  
             ??___lwtoft 000C              ?__div_to_l_ 0001                  _dpowers 0801  
                _isdigit 251C         ___awmod@dividend 0001                  _sprintf 08AA  
                _voltaje 004F     end_of_initialization 2512            __Lmediumconst 0000  
        ___lldiv@divisor 0005          ___lldiv@counter 000D           ?_DelayFor18TCY 0001  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
         __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004        __end_of_putrsXLCD 22C4  
          ??__tdiv_to_l_ 0007                _TRISDbits 000F95    __size_of_SetDDRamAddr 0052  
      __size_of_ADC_init 0024        __size_of_ADC_read 0032              ___ftdiv@exp 0031  
      __size_of_LCD_Init 001E      __size_of__div_to_l_ 0128              ___ftmul@exp 001E  
         __end_of___ftge 2030           __end_of___wmul 246E           __end_of_fround 160C  
           _SetDDRamAddr 22C4       SetDDRamAddr@DDaddr 0004      start_initialization 24FC  
    __end_of__tdiv_to_l_ 1A58          ___llmod@divisor 0005        __size_of_BusyXLCD 003A  
        ___llmod@counter 0009          ??_DelayFor18TCY 0001        __size_of_OpenXLCD 00A4  
               ??___ftge 0007                 ??___wmul 0013            ?_WriteCmdXLCD 0001  
       __CFG_LPT1OSC$OFF 000000                 ??_fround 0027            sprintf@tmpval 006D  
             fround@prec 002D        __size_of___ftpack 00AE        __size_of___lltoft 005C  
            __pbssCOMRAM 004F        __size_of___lwtoft 0024            __pcstackBANK0 0060  
            sprintf@flag 0065              sprintf@fval 0073              sprintf@prec 0071  
         ??_WriteCmdXLCD 0001                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001                 ?___ftdiv 0024                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0015                 ?___llmod 0001  
               ?___ftsub 003A                __npowers_ 0850                 ?___fttol 002B  
            __tdiv_to_l_ 1926    __end_of_WriteDataXLCD 235E             ??__div_to_l_ 0007  
            __smallconst 0800                 ?_isdigit 0001                 _ADC_init 24B6  
               _ADC_read 2416                 ?_sprintf 0040           __size_of_scale 0408  
               _LCD_Init 253A           ___wmul@product 0013                 _LATDbits 000F8C  
          ?_DelayPORXLCD 0001          OpenXLCD@lcdtype 0005       __end_of__div_to_l_ 1B80  
       __CFG_WDTPS$32768 000000               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 000F                _putrsXLCD 2268  
               _BusyXLCD 23DC           ??_DelayPORXLCD 0001                 _OpenXLCD 1EFC  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___ftpack 1E4E              _fround$1013 002A              _fround$1014 0027  
               ___lltoft 220C              _isdigit$665 0002                 ___lwtoft 2492  
             sprintf@exp 006B               sprintf@val 0067               ?_putrsXLCD 0002  
       __size_of_isdigit 001E                 __ptext10 1A58                 __ptext11 220C  
               __ptext20 2316                 __ptext12 21A6                 __ptext21 2492  
               __ptext13 20B4                 __ptext30 23DC                 __ptext22 1D68  
               __ptext14 1C74                 __ptext31 2558                 __ptext23 1E4E  
               __ptext15 235E                 __ptext32 2416                 __ptext24 24DA  
               __ptext16 160C                 __ptext33 24B6                 __ptext25 253A  
               __ptext17 246E                 __ptext26 1EFC                 __ptext18 1FA0  
               __ptext27 239E                 __ptext19 2268                 __ptext28 22C4  
               __ptext29 2572                 __powers_ 0829     __end_of_WriteCmdXLCD 23DC  
       __size_of_sprintf 0708            __size_of_main 016E    __CFG_CPUDIV$OSC1_PLL2 000000  
             _LCD_gotoXY 24DA                 isdigit@c 0003                 scale@scl 002A  
              sprintf@ap 0063         __tdiv_to_l_@exp1 000F                sprintf@sp 0040  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
  __end_of_DelayFor18TCY 2572             ?__tdiv_to_l_ 0001                 sprintf@c 0076  
               sprintf@f 0042     __end_of_DelayPORXLCD 2582              ??_putrsXLCD 0004  
       ___lldiv@quotient 0009  
